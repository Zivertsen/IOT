
c:/Studie/IOT/IOT_projekt/PhotonDisplay/target/1.4.2/photon/PhotonDisplay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003794  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a37b0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000048c  20000000  080a37b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000608  2000048c  2000048c  0003048c  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a3c40  080a3c40  00023c40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3c68  080a3c68  00023c68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000c31ed  00000000  00000000  00023c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000122fb  00000000  00000000  000e6e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00017a7f  00000000  00000000  000f9154  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002498  00000000  00000000  00110bd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003640  00000000  00000000  0011306b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002a475  00000000  00000000  001166ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a7d2  00000000  00000000  00140b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a8e3f  00000000  00000000  0016b2f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c6a0  00000000  00000000  00214134  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f002 fed5 	bl	80a2ddc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f002 feda 	bl	80a2df2 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a37b4 	.word	0x080a37b4
 80a004c:	2000048c 	.word	0x2000048c
 80a0050:	2000048c 	.word	0x2000048c
 80a0054:	20000a94 	.word	0x20000a94
 80a0058:	20000a94 	.word	0x20000a94

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f977 	bl	80a2350 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3760 	.word	0x080a3760
 80a0084:	080a37a4 	.word	0x080a37a4

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b848 	b.w	80a011c <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f863 	bl	80a0158 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b91d 	b.w	80a22d4 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bc99 	b.w	80a19d0 <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f001 bc97 	b.w	80a19d0 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bc9d 	b.w	80a19e0 <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f001 bc9b 	b.w	80a19e0 <free>
	...

080a00ac <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a03      	ldr	r2, [pc, #12]	; (80a00bc <__cxa_pure_virtual+0x10>)
 80a00b0:	2100      	movs	r1, #0
 80a00b2:	200c      	movs	r0, #12
 80a00b4:	f001 fc00 	bl	80a18b8 <panic_>
 80a00b8:	e7fe      	b.n	80a00b8 <__cxa_pure_virtual+0xc>
 80a00ba:	bf00      	nop
 80a00bc:	080a1655 	.word	0x080a1655

080a00c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00c0:	7800      	ldrb	r0, [r0, #0]
 80a00c2:	fab0 f080 	clz	r0, r0
 80a00c6:	0940      	lsrs	r0, r0, #5
 80a00c8:	4770      	bx	lr

080a00ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ca:	2301      	movs	r3, #1
 80a00cc:	7003      	strb	r3, [r0, #0]
 80a00ce:	4770      	bx	lr

080a00d0 <_Z8callbackPcPhj>:
char Server[] = "test.Mosquitto.org";
uint16_t Port = 1883;

MQTT client(Server , 1883, callback);

void callback(char* topic, byte *payload, unsigned int length){
 80a00d0:	b5b0      	push	{r4, r5, r7, lr}
 80a00d2:	4614      	mov	r4, r2
 80a00d4:	4605      	mov	r5, r0
    
    char temp[length+2];
 80a00d6:	f102 0309 	add.w	r3, r2, #9
char Server[] = "test.Mosquitto.org";
uint16_t Port = 1883;

MQTT client(Server , 1883, callback);

void callback(char* topic, byte *payload, unsigned int length){
 80a00da:	b084      	sub	sp, #16
    
    char temp[length+2];
 80a00dc:	f023 0307 	bic.w	r3, r3, #7
char Server[] = "test.Mosquitto.org";
uint16_t Port = 1883;

MQTT client(Server , 1883, callback);

void callback(char* topic, byte *payload, unsigned int length){
 80a00e0:	af00      	add	r7, sp, #0
    
    char temp[length+2];
 80a00e2:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(temp,payload,length);
 80a00e6:	4668      	mov	r0, sp
 80a00e8:	f002 fe78 	bl	80a2ddc <memcpy>
    temp[length+1] = '\0';
 80a00ec:	446c      	add	r4, sp
 80a00ee:	2300      	movs	r3, #0
 80a00f0:	7063      	strb	r3, [r4, #1]
   
    
  if (strcmp("weather/gettemp",topic) == 0)
 80a00f2:	4629      	mov	r1, r5
 80a00f4:	4808      	ldr	r0, [pc, #32]	; (80a0118 <_Z8callbackPcPhj+0x48>)
 80a00f6:	f002 fead 	bl	80a2e54 <strcmp>
 80a00fa:	b948      	cbnz	r0, 80a0110 <_Z8callbackPcPhj+0x40>
  {
    SDD1306_Temp(temp);
 80a00fc:	4669      	mov	r1, sp
 80a00fe:	4638      	mov	r0, r7
 80a0100:	f001 ffd1 	bl	80a20a6 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0104:	4638      	mov	r0, r7
 80a0106:	f000 f86d 	bl	80a01e4 <_Z12SDD1306_Temp6String>
 80a010a:	4638      	mov	r0, r7
 80a010c:	f001 ff84 	bl	80a2018 <_ZN6StringD1Ev>
  }
  
  
}
 80a0110:	3710      	adds	r7, #16
 80a0112:	46bd      	mov	sp, r7
 80a0114:	bdb0      	pop	{r4, r5, r7, pc}
 80a0116:	bf00      	nop
 80a0118:	080a2e8c 	.word	0x080a2e8c

080a011c <setup>:

// setup() runs once, when the device is first turned on.
void setup() {
 80a011c:	b508      	push	{r3, lr}

  Serial.begin(9600);
 80a011e:	f002 fa2d 	bl	80a257c <_Z16_fetch_usbserialv>
 80a0122:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a0126:	f002 fa0f 	bl	80a2548 <_ZN9USBSerial5beginEl>

  SDD1306_Init();
 80a012a:	f000 f84d 	bl	80a01c8 <_Z12SDD1306_Initv>

  client.connect("weatherclient");
 80a012e:	4907      	ldr	r1, [pc, #28]	; (80a014c <setup+0x30>)
 80a0130:	4807      	ldr	r0, [pc, #28]	; (80a0150 <setup+0x34>)
 80a0132:	f001 f81b 	bl	80a116c <_ZN4MQTT7connectEPKc>
  

  // publish/subscribe
    if (client.isConnected()) {
 80a0136:	4806      	ldr	r0, [pc, #24]	; (80a0150 <setup+0x34>)
 80a0138:	f000 ff33 	bl	80a0fa2 <_ZN4MQTT11isConnectedEv>
 80a013c:	b128      	cbz	r0, 80a014a <setup+0x2e>
       client.subscribe("weather/gettemp");
    }

 
}
 80a013e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  client.connect("weatherclient");
  

  // publish/subscribe
    if (client.isConnected()) {
       client.subscribe("weather/gettemp");
 80a0142:	4904      	ldr	r1, [pc, #16]	; (80a0154 <setup+0x38>)
 80a0144:	4802      	ldr	r0, [pc, #8]	; (80a0150 <setup+0x34>)
 80a0146:	f001 ba03 	b.w	80a1550 <_ZN4MQTT9subscribeEPKc>
 80a014a:	bd08      	pop	{r3, pc}
 80a014c:	080a2e9c 	.word	0x080a2e9c
 80a0150:	20000490 	.word	0x20000490
 80a0154:	080a2e8c 	.word	0x080a2e8c

080a0158 <loop>:

 
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0158:	b508      	push	{r3, lr}
    if (client.isConnected())
 80a015a:	4809      	ldr	r0, [pc, #36]	; (80a0180 <loop+0x28>)
 80a015c:	f000 ff21 	bl	80a0fa2 <_ZN4MQTT11isConnectedEv>
 80a0160:	b110      	cbz	r0, 80a0168 <loop+0x10>
      client.loop();
 80a0162:	4807      	ldr	r0, [pc, #28]	; (80a0180 <loop+0x28>)
 80a0164:	f001 f8c8 	bl	80a12f8 <_ZN4MQTT4loopEv>

client.publish("outMQTT","hello fra main");
 80a0168:	4a06      	ldr	r2, [pc, #24]	; (80a0184 <loop+0x2c>)
 80a016a:	4907      	ldr	r1, [pc, #28]	; (80a0188 <loop+0x30>)
 80a016c:	4804      	ldr	r0, [pc, #16]	; (80a0180 <loop+0x28>)
 80a016e:	f001 f87c 	bl	80a126a <_ZN4MQTT7publishEPKcS1_>
delay(1000);
  
}
 80a0172:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void loop() {
    if (client.isConnected())
      client.loop();

client.publish("outMQTT","hello fra main");
delay(1000);
 80a0176:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a017a:	f002 b859 	b.w	80a2230 <delay>
 80a017e:	bf00      	nop
 80a0180:	20000490 	.word	0x20000490
 80a0184:	080a2eaa 	.word	0x080a2eaa
 80a0188:	080a2eb9 	.word	0x080a2eb9

080a018c <_GLOBAL__sub_I_Server>:
  
}
 80a018c:	b510      	push	{r4, lr}

//byte Server[] = {192,168,0,19};
char Server[] = "test.Mosquitto.org";
uint16_t Port = 1883;

MQTT client(Server , 1883, callback);
 80a018e:	4c08      	ldr	r4, [pc, #32]	; (80a01b0 <_GLOBAL__sub_I_Server+0x24>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0190:	f001 f9f8 	bl	80a1584 <HAL_Pin_Map>
 80a0194:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0198:	4906      	ldr	r1, [pc, #24]	; (80a01b4 <_GLOBAL__sub_I_Server+0x28>)
 80a019a:	4620      	mov	r0, r4
 80a019c:	4b06      	ldr	r3, [pc, #24]	; (80a01b8 <_GLOBAL__sub_I_Server+0x2c>)
 80a019e:	f000 fe19 	bl	80a0dd4 <_ZN4MQTTC1EPctPFvS0_PhjE>
 80a01a2:	4620      	mov	r0, r4
      client.loop();

client.publish("outMQTT","hello fra main");
delay(1000);
  
}
 80a01a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

//byte Server[] = {192,168,0,19};
char Server[] = "test.Mosquitto.org";
uint16_t Port = 1883;

MQTT client(Server , 1883, callback);
 80a01a8:	4a04      	ldr	r2, [pc, #16]	; (80a01bc <_GLOBAL__sub_I_Server+0x30>)
 80a01aa:	4905      	ldr	r1, [pc, #20]	; (80a01c0 <_GLOBAL__sub_I_Server+0x34>)
 80a01ac:	f002 bcb8 	b.w	80a2b20 <__aeabi_atexit>
 80a01b0:	20000490 	.word	0x20000490
 80a01b4:	20000000 	.word	0x20000000
 80a01b8:	080a00d1 	.word	0x080a00d1
 80a01bc:	2000048c 	.word	0x2000048c
 80a01c0:	080a1557 	.word	0x080a1557

080a01c4 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
 80a01c4:	4770      	bx	lr
	...

080a01c8 <_Z12SDD1306_Initv>:


Adafruit_SSD1306 oled(OLED_RESET);

void SDD1306_Init()
{
 80a01c8:	b510      	push	{r4, lr}
    oled.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
 80a01ca:	4c05      	ldr	r4, [pc, #20]	; (80a01e0 <_Z12SDD1306_Initv+0x18>)
 80a01cc:	223c      	movs	r2, #60	; 0x3c
 80a01ce:	4620      	mov	r0, r4
 80a01d0:	2102      	movs	r1, #2
 80a01d2:	f000 fa9d 	bl	80a0710 <_ZN16Adafruit_SSD13065beginEhh>
    oled.clearDisplay();
 80a01d6:	4620      	mov	r0, r4
}
 80a01d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_SSD1306 oled(OLED_RESET);

void SDD1306_Init()
{
    oled.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
    oled.clearDisplay();
 80a01dc:	f000 bbde 	b.w	80a099c <_ZN16Adafruit_SSD130612clearDisplayEv>
 80a01e0:	200004e8 	.word	0x200004e8

080a01e4 <_Z12SDD1306_Temp6String>:
}

void SDD1306_Temp(String T)
{   
 80a01e4:	b530      	push	{r4, r5, lr}
 80a01e6:	4605      	mov	r5, r0
 80a01e8:	b085      	sub	sp, #20
    Serial.println("Temp print:");
    Serial.print(T);
    
    
    oled.clearDisplay();
 80a01ea:	4c22      	ldr	r4, [pc, #136]	; (80a0274 <_Z12SDD1306_Temp6String+0x90>)
    oled.clearDisplay();
}

void SDD1306_Temp(String T)
{   
    Serial.println("Temp print:");
 80a01ec:	f002 f9c6 	bl	80a257c <_Z16_fetch_usbserialv>
 80a01f0:	4921      	ldr	r1, [pc, #132]	; (80a0278 <_Z12SDD1306_Temp6String+0x94>)
 80a01f2:	f001 ffcf 	bl	80a2194 <_ZN5Print7printlnEPKc>
    Serial.print(T);
 80a01f6:	f002 f9c1 	bl	80a257c <_Z16_fetch_usbserialv>
 80a01fa:	6829      	ldr	r1, [r5, #0]
 80a01fc:	f001 ffb7 	bl	80a216e <_ZN5Print5printEPKc>
    
    
    oled.clearDisplay();
 80a0200:	4620      	mov	r0, r4
 80a0202:	f000 fbcb 	bl	80a099c <_ZN16Adafruit_SSD130612clearDisplayEv>
    oled.setTextSize(1);
 80a0206:	4620      	mov	r0, r4
 80a0208:	2101      	movs	r1, #1
 80a020a:	f000 fd8b 	bl	80a0d24 <_ZN12Adafruit_GFX11setTextSizeEh>
    oled.setCursor(50,16);
 80a020e:	2210      	movs	r2, #16
 80a0210:	4620      	mov	r0, r4
 80a0212:	2132      	movs	r1, #50	; 0x32
 80a0214:	f000 fd83 	bl	80a0d1e <_ZN12Adafruit_GFX9setCursorEss>
    oled.print("Temp:");
 80a0218:	4918      	ldr	r1, [pc, #96]	; (80a027c <_Z12SDD1306_Temp6String+0x98>)
 80a021a:	4620      	mov	r0, r4
 80a021c:	f001 ffa7 	bl	80a216e <_ZN5Print5printEPKc>
    oled.setTextSize(2);
 80a0220:	4620      	mov	r0, r4
 80a0222:	2102      	movs	r1, #2
 80a0224:	f000 fd7e 	bl	80a0d24 <_ZN12Adafruit_GFX11setTextSizeEh>
    oled.setCursor(35,34);
 80a0228:	2222      	movs	r2, #34	; 0x22
 80a022a:	4620      	mov	r0, r4
 80a022c:	2123      	movs	r1, #35	; 0x23
 80a022e:	f000 fd76 	bl	80a0d1e <_ZN12Adafruit_GFX9setCursorEss>
    oled.print(String(T));
 80a0232:	4629      	mov	r1, r5
 80a0234:	4668      	mov	r0, sp
 80a0236:	f001 ff58 	bl	80a20ea <_ZN6StringC1ERKS_>
 80a023a:	9900      	ldr	r1, [sp, #0]
 80a023c:	4620      	mov	r0, r4
 80a023e:	f001 ff96 	bl	80a216e <_ZN5Print5printEPKc>
 80a0242:	4668      	mov	r0, sp
 80a0244:	f001 fee8 	bl	80a2018 <_ZN6StringD1Ev>
    oled.setTextColor(WHITE);
 80a0248:	4620      	mov	r0, r4
 80a024a:	2101      	movs	r1, #1
 80a024c:	f000 fd6f 	bl	80a0d2e <_ZN12Adafruit_GFX12setTextColorEt>
    oled.setTextSize(2);
 80a0250:	4620      	mov	r0, r4
 80a0252:	2102      	movs	r1, #2
 80a0254:	f000 fd66 	bl	80a0d24 <_ZN12Adafruit_GFX11setTextSizeEh>
    oled.setCursor(60,50);
 80a0258:	2232      	movs	r2, #50	; 0x32
 80a025a:	4620      	mov	r0, r4
 80a025c:	213c      	movs	r1, #60	; 0x3c
 80a025e:	f000 fd5e 	bl	80a0d1e <_ZN12Adafruit_GFX9setCursorEss>
    oled.print("C");
 80a0262:	4907      	ldr	r1, [pc, #28]	; (80a0280 <_Z12SDD1306_Temp6String+0x9c>)
 80a0264:	4620      	mov	r0, r4
 80a0266:	f001 ff82 	bl	80a216e <_ZN5Print5printEPKc>
    oled.display();
 80a026a:	4620      	mov	r0, r4
 80a026c:	f000 fb20 	bl	80a08b0 <_ZN16Adafruit_SSD13067displayEv>
}
 80a0270:	b005      	add	sp, #20
 80a0272:	bd30      	pop	{r4, r5, pc}
 80a0274:	200004e8 	.word	0x200004e8
 80a0278:	080a2ec1 	.word	0x080a2ec1
 80a027c:	080a2ecd 	.word	0x080a2ecd
 80a0280:	080a2ed3 	.word	0x080a2ed3

080a0284 <_ZN16Adafruit_SSD1306D0Ev>:
 80a0284:	b510      	push	{r4, lr}
 80a0286:	4604      	mov	r4, r0
 80a0288:	2124      	movs	r1, #36	; 0x24
 80a028a:	f002 fc4e 	bl	80a2b2a <_ZdlPvj>
 80a028e:	4620      	mov	r0, r4
 80a0290:	bd10      	pop	{r4, pc}
	...

080a0294 <_GLOBAL__sub_I_oled>:
 80a0294:	b510      	push	{r4, lr}
#include "Display.h"


Adafruit_SSD1306 oled(OLED_RESET);
 80a0296:	4c07      	ldr	r4, [pc, #28]	; (80a02b4 <_GLOBAL__sub_I_oled+0x20>)
 80a0298:	f001 f974 	bl	80a1584 <HAL_Pin_Map>
 80a029c:	2104      	movs	r1, #4
 80a029e:	4620      	mov	r0, r4
 80a02a0:	f000 f9de 	bl	80a0660 <_ZN16Adafruit_SSD1306C1Ea>
 80a02a4:	4620      	mov	r0, r4
    oled.setTextColor(WHITE);
    oled.setTextSize(2);
    oled.setCursor(60,50);
    oled.print("C");
    oled.display();
}
 80a02a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "Display.h"


Adafruit_SSD1306 oled(OLED_RESET);
 80a02aa:	4a03      	ldr	r2, [pc, #12]	; (80a02b8 <_GLOBAL__sub_I_oled+0x24>)
 80a02ac:	4903      	ldr	r1, [pc, #12]	; (80a02bc <_GLOBAL__sub_I_oled+0x28>)
 80a02ae:	f002 bc37 	b.w	80a2b20 <__aeabi_atexit>
 80a02b2:	bf00      	nop
 80a02b4:	200004e8 	.word	0x200004e8
 80a02b8:	2000048c 	.word	0x2000048c
 80a02bc:	080a01c5 	.word	0x080a01c5

080a02c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a02c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
 80a02c2:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a02c4:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
 80a02c8:	2c02      	cmp	r4, #2
 80a02ca:	d008      	beq.n	80a02de <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
 80a02cc:	2c03      	cmp	r4, #3
 80a02ce:	d00f      	beq.n	80a02f0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
 80a02d0:	2c01      	cmp	r4, #1
 80a02d2:	d170      	bne.n	80a03b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
 80a02d4:	8904      	ldrh	r4, [r0, #8]
 80a02d6:	3c01      	subs	r4, #1
 80a02d8:	1aa2      	subs	r2, r4, r2
 80a02da:	b212      	sxth	r2, r2
      break;
 80a02dc:	e00c      	b.n	80a02f8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a02de:	8944      	ldrh	r4, [r0, #10]
 80a02e0:	3c01      	subs	r4, #1
 80a02e2:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
 80a02e4:	8904      	ldrh	r4, [r0, #8]
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a02e6:	b212      	sxth	r2, r2
      x -= (w-1);
 80a02e8:	1ae4      	subs	r4, r4, r3
 80a02ea:	1a61      	subs	r1, r4, r1
 80a02ec:	b209      	sxth	r1, r1
      break;
 80a02ee:	e062      	b.n	80a03b6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
 80a02f0:	8944      	ldrh	r4, [r0, #10]
 80a02f2:	1ae4      	subs	r4, r4, r3
 80a02f4:	1a61      	subs	r1, r4, r1
 80a02f6:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a02f8:	2a00      	cmp	r2, #0
 80a02fa:	db5b      	blt.n	80a03b4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
 80a02fc:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0300:	4294      	cmp	r4, r2
 80a0302:	f340 8090 	ble.w	80a0426 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a0306:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a0308:	bfbe      	ittt	lt
 80a030a:	185b      	addlt	r3, r3, r1
 80a030c:	b21b      	sxthlt	r3, r3
    __y = 0;
 80a030e:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0310:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80a0314:	18cc      	adds	r4, r1, r3
 80a0316:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a0318:	bfc4      	itt	gt
 80a031a:	1a43      	subgt	r3, r0, r1
 80a031c:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a031e:	2b00      	cmp	r3, #0
 80a0320:	f340 8081 	ble.w	80a0426 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a0324:	b2c9      	uxtb	r1, r1
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0326:	08c8      	lsrs	r0, r1, #3
 80a0328:	4f3f      	ldr	r7, [pc, #252]	; (80a0428 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
 80a032a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a032e:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a0332:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0334:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0338:	d017      	beq.n	80a036a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a033a:	f1c1 0108 	rsb	r1, r1, #8
 80a033e:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0340:	493a      	ldr	r1, [pc, #232]	; (80a042c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a0342:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0344:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a0346:	bf3f      	itttt	cc
 80a0348:	ebc3 0e00 	rsbcc	lr, r3, r0
 80a034c:	21ff      	movcc	r1, #255	; 0xff
 80a034e:	fa41 f10e 	asrcc.w	r1, r1, lr
 80a0352:	400e      	andcc	r6, r1
 80a0354:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
 80a0356:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a0358:	bf0c      	ite	eq
 80a035a:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
 80a035c:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a035e:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a0360:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0362:	d360      	bcc.n	80a0426 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
 80a0364:	1a18      	subs	r0, r3, r0
 80a0366:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
 80a0368:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a036a:	2b07      	cmp	r3, #7
 80a036c:	d917      	bls.n	80a039e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a036e:	2d01      	cmp	r5, #1
 80a0370:	bf0c      	ite	eq
 80a0372:	20ff      	moveq	r0, #255	; 0xff
 80a0374:	2000      	movne	r0, #0
 80a0376:	461a      	mov	r2, r3
 80a0378:	f104 0180 	add.w	r1, r4, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a037c:	3a08      	subs	r2, #8
 80a037e:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 80a0380:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a0382:	f801 0c80 	strb.w	r0, [r1, #-128]
 80a0386:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a038a:	d8f7      	bhi.n	80a037c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
 80a038c:	f1a3 0208 	sub.w	r2, r3, #8
 80a0390:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80a0394:	3201      	adds	r2, #1
 80a0396:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80a039a:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a039e:	2b00      	cmp	r3, #0
 80a03a0:	d041      	beq.n	80a0426 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a03a2:	4a23      	ldr	r2, [pc, #140]	; (80a0430 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
    if(color == WHITE) { 
 80a03a4:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a03a6:	5cd2      	ldrb	r2, [r2, r3]
 80a03a8:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a03aa:	bf0c      	ite	eq
 80a03ac:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
 80a03ae:	4393      	bicne	r3, r2
 80a03b0:	7023      	strb	r3, [r4, #0]
 80a03b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a03b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a03b6:	2a00      	cmp	r2, #0
 80a03b8:	db35      	blt.n	80a0426 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a03ba:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a03be:	4294      	cmp	r4, r2
 80a03c0:	dd31      	ble.n	80a0426 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a03c2:	2900      	cmp	r1, #0
    w += x;
 80a03c4:	bfbc      	itt	lt
 80a03c6:	18c9      	addlt	r1, r1, r3
 80a03c8:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a03ca:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a03ce:	bfb8      	it	lt
 80a03d0:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a03d2:	18ce      	adds	r6, r1, r3
 80a03d4:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a03d6:	bfc4      	itt	gt
 80a03d8:	1a63      	subgt	r3, r4, r1
 80a03da:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a03dc:	2b00      	cmp	r3, #0
 80a03de:	dd22      	ble.n	80a0426 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a03e0:	10d0      	asrs	r0, r2, #3
 80a03e2:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 80a03e6:	4810      	ldr	r0, [pc, #64]	; (80a0428 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
 80a03e8:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a03ec:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
 80a03ee:	2001      	movs	r0, #1
 80a03f0:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
 80a03f4:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a03f6:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
 80a03f8:	d109      	bne.n	80a040e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
 80a03fa:	3b01      	subs	r3, #1
 80a03fc:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
 80a03fe:	1c5c      	adds	r4, r3, #1
 80a0400:	d011      	beq.n	80a0426 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a0402:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a0406:	4310      	orrs	r0, r2
 80a0408:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a040c:	e7f5      	b.n	80a03fa <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
 80a040e:	43d2      	mvns	r2, r2
 80a0410:	b2d2      	uxtb	r2, r2
 80a0412:	3b01      	subs	r3, #1
 80a0414:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
 80a0416:	1c58      	adds	r0, r3, #1
 80a0418:	d005      	beq.n	80a0426 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a041a:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a041e:	4010      	ands	r0, r2
 80a0420:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a0424:	e7f5      	b.n	80a0412 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
 80a0426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0428:	20000023 	.word	0x20000023
 80a042c:	2000001b 	.word	0x2000001b
 80a0430:	20000013 	.word	0x20000013

080a0434 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a0434:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
 80a0436:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a0438:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
 80a043c:	2c02      	cmp	r4, #2
 80a043e:	d008      	beq.n	80a0452 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
 80a0440:	2c03      	cmp	r4, #3
 80a0442:	d00f      	beq.n	80a0464 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
 80a0444:	2c01      	cmp	r4, #1
 80a0446:	d112      	bne.n	80a046e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
 80a0448:	8904      	ldrh	r4, [r0, #8]
 80a044a:	1ae4      	subs	r4, r4, r3
 80a044c:	1aa2      	subs	r2, r4, r2
 80a044e:	b212      	sxth	r2, r2
      break;
 80a0450:	e06d      	b.n	80a052e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a0452:	8904      	ldrh	r4, [r0, #8]
 80a0454:	3c01      	subs	r4, #1
 80a0456:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a0458:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a045a:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a045c:	1ae4      	subs	r4, r4, r3
 80a045e:	1aa2      	subs	r2, r4, r2
 80a0460:	b212      	sxth	r2, r2
      break;
 80a0462:	e004      	b.n	80a046e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
 80a0464:	8944      	ldrh	r4, [r0, #10]
 80a0466:	3c01      	subs	r4, #1
 80a0468:	1a61      	subs	r1, r4, r1
 80a046a:	b209      	sxth	r1, r1
      break;
 80a046c:	e05f      	b.n	80a052e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a046e:	2900      	cmp	r1, #0
 80a0470:	db5c      	blt.n	80a052c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
 80a0472:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0476:	428c      	cmp	r4, r1
 80a0478:	f340 8091 	ble.w	80a059e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a047c:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a047e:	bfbc      	itt	lt
 80a0480:	18d2      	addlt	r2, r2, r3
 80a0482:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0484:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
 80a0488:	bfb8      	it	lt
 80a048a:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a048c:	18d4      	adds	r4, r2, r3
 80a048e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a0490:	bfc4      	itt	gt
 80a0492:	1a83      	subgt	r3, r0, r2
 80a0494:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a0496:	2b00      	cmp	r3, #0
 80a0498:	f340 8081 	ble.w	80a059e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a049c:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a049e:	4e40      	ldr	r6, [pc, #256]	; (80a05a0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a04a0:	b2da      	uxtb	r2, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a04a2:	08e3      	lsrs	r3, r4, #3
 80a04a4:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a04a8:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a04ac:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a04b0:	d017      	beq.n	80a04e2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a04b2:	f1c4 0408 	rsb	r4, r4, #8
 80a04b6:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a04b8:	4c3a      	ldr	r4, [pc, #232]	; (80a05a4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a04ba:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a04bc:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a04be:	bf3f      	itttt	cc
 80a04c0:	ebc2 0e00 	rsbcc	lr, r2, r0
 80a04c4:	24ff      	movcc	r4, #255	; 0xff
 80a04c6:	fa44 f40e 	asrcc.w	r4, r4, lr
 80a04ca:	4027      	andcc	r7, r4
 80a04cc:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
 80a04ce:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a04d0:	bf0c      	ite	eq
 80a04d2:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
 80a04d4:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a04d6:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a04d8:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a04da:	d360      	bcc.n	80a059e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
 80a04dc:	1a10      	subs	r0, r2, r0
 80a04de:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
 80a04e0:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a04e2:	2a07      	cmp	r2, #7
 80a04e4:	d917      	bls.n	80a0516 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a04e6:	2d01      	cmp	r5, #1
 80a04e8:	bf0c      	ite	eq
 80a04ea:	24ff      	moveq	r4, #255	; 0xff
 80a04ec:	2400      	movne	r4, #0
 80a04ee:	4611      	mov	r1, r2
 80a04f0:	f103 0080 	add.w	r0, r3, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a04f4:	3908      	subs	r1, #8
 80a04f6:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
 80a04f8:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a04fa:	f800 4c80 	strb.w	r4, [r0, #-128]
 80a04fe:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a0502:	d8f7      	bhi.n	80a04f4 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
 80a0504:	f1a2 0108 	sub.w	r1, r2, #8
 80a0508:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80a050c:	3101      	adds	r1, #1
 80a050e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 80a0512:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a0516:	2a00      	cmp	r2, #0
 80a0518:	d041      	beq.n	80a059e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a051a:	4923      	ldr	r1, [pc, #140]	; (80a05a8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
    if(color == WHITE) { 
 80a051c:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a051e:	5c89      	ldrb	r1, [r1, r2]
 80a0520:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a0522:	bf0c      	ite	eq
 80a0524:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
 80a0526:	438a      	bicne	r2, r1
 80a0528:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
 80a052a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a052c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a052e:	2900      	cmp	r1, #0
 80a0530:	db35      	blt.n	80a059e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0532:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a0536:	428c      	cmp	r4, r1
 80a0538:	dd31      	ble.n	80a059e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a053a:	2a00      	cmp	r2, #0
    w += x;
 80a053c:	bfbc      	itt	lt
 80a053e:	18d2      	addlt	r2, r2, r3
 80a0540:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0542:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a0546:	bfb8      	it	lt
 80a0548:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a054a:	18d6      	adds	r6, r2, r3
 80a054c:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a054e:	bfc4      	itt	gt
 80a0550:	1aa3      	subgt	r3, r4, r2
 80a0552:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a0554:	2b00      	cmp	r3, #0
 80a0556:	dd22      	ble.n	80a059e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0558:	10c8      	asrs	r0, r1, #3
 80a055a:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 80a055e:	4810      	ldr	r0, [pc, #64]	; (80a05a0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
 80a0560:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0564:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
 80a0566:	2201      	movs	r2, #1
 80a0568:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
 80a056c:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a056e:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
 80a0570:	d109      	bne.n	80a0586 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
 80a0572:	1e5a      	subs	r2, r3, #1
 80a0574:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
 80a0576:	1c5c      	adds	r4, r3, #1
 80a0578:	d011      	beq.n	80a059e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a057a:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a057e:	430a      	orrs	r2, r1
 80a0580:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a0584:	e7f5      	b.n	80a0572 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
 80a0586:	43c9      	mvns	r1, r1
 80a0588:	b2c9      	uxtb	r1, r1
 80a058a:	1e5a      	subs	r2, r3, #1
 80a058c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
 80a058e:	1c5a      	adds	r2, r3, #1
 80a0590:	d005      	beq.n	80a059e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0592:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a0596:	400a      	ands	r2, r1
 80a0598:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a059c:	e7f5      	b.n	80a058a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
 80a059e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a05a0:	20000023 	.word	0x20000023
 80a05a4:	2000001b 	.word	0x2000001b
 80a05a8:	20000013 	.word	0x20000013

080a05ac <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>:
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
 80a05ac:	b410      	push	{r4}
  
  if(hwSPI) {
 80a05ae:	b122      	cbz	r2, 80a05ba <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0xe>
    (void)SPI.transfer(d);
 80a05b0:	4619      	mov	r1, r3
 80a05b2:	4805      	ldr	r0, [pc, #20]	; (80a05c8 <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1+0x1c>)
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}
 80a05b4:	bc10      	pop	{r4}


inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
 80a05b6:	f001 baa5 	b.w	80a1b04 <_ZN8SPIClass8transferEh>
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 80a05ba:	2201      	movs	r2, #1
 80a05bc:	b2c9      	uxtb	r1, r1
 80a05be:	b2c0      	uxtb	r0, r0
  }
}
 80a05c0:	bc10      	pop	{r4}
inline void Adafruit_SSD1306::fastSPIwrite(uint8_t d) {
  
  if(hwSPI) {
    (void)SPI.transfer(d);
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
 80a05c2:	f002 ba2f 	b.w	80a2a24 <shiftOut>
 80a05c6:	bf00      	nop
 80a05c8:	200009a0 	.word	0x200009a0

080a05cc <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a05cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a05ce:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a05d0:	4606      	mov	r6, r0
 80a05d2:	4614      	mov	r4, r2
 80a05d4:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a05d6:	db3f      	blt.n	80a0658 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a05d8:	f000 fbae 	bl	80a0d38 <_ZN12Adafruit_GFX5widthEv>
 80a05dc:	4285      	cmp	r5, r0
 80a05de:	da3b      	bge.n	80a0658 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a05e0:	2c00      	cmp	r4, #0
 80a05e2:	db39      	blt.n	80a0658 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a05e4:	4630      	mov	r0, r6
 80a05e6:	f000 fbaa 	bl	80a0d3e <_ZN12Adafruit_GFX6heightEv>
 80a05ea:	4284      	cmp	r4, r0
 80a05ec:	da34      	bge.n	80a0658 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a05ee:	4630      	mov	r0, r6
 80a05f0:	f000 fba0 	bl	80a0d34 <_ZN12Adafruit_GFX11getRotationEv>
 80a05f4:	2802      	cmp	r0, #2
 80a05f6:	d127      	bne.n	80a0648 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a05f8:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 80a05fa:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a05fc:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
 80a05fe:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0600:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
 80a0602:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0604:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
 80a0606:	b204      	sxth	r4, r0
 80a0608:	e006      	b.n	80a0618 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a060a:	2801      	cmp	r0, #1
 80a060c:	d104      	bne.n	80a0618 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
 80a060e:	8933      	ldrh	r3, [r6, #8]
 80a0610:	3b01      	subs	r3, #1
 80a0612:	1b1b      	subs	r3, r3, r4
 80a0614:	462c      	mov	r4, r5
 80a0616:	b21d      	sxth	r5, r3
 80a0618:	2008      	movs	r0, #8
    break;
  }  

  // x is which column
  if (color == WHITE) 
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a061a:	fb94 f0f0 	sdiv	r0, r4, r0
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a061e:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0620:	b200      	sxth	r0, r0
 80a0622:	4b0e      	ldr	r3, [pc, #56]	; (80a065c <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
 80a0624:	f004 0207 	and.w	r2, r4, #7
 80a0628:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a062c:	d104      	bne.n	80a0638 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a062e:	4097      	lsls	r7, r2
 80a0630:	5c5a      	ldrb	r2, [r3, r1]
 80a0632:	4317      	orrs	r7, r2
 80a0634:	545f      	strb	r7, [r3, r1]
 80a0636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
 80a0638:	5c58      	ldrb	r0, [r3, r1]
 80a063a:	2701      	movs	r7, #1
 80a063c:	fa07 f202 	lsl.w	r2, r7, r2
 80a0640:	ea20 0202 	bic.w	r2, r0, r2
 80a0644:	545a      	strb	r2, [r3, r1]
 80a0646:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a0648:	2803      	cmp	r0, #3
 80a064a:	d1de      	bne.n	80a060a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
 80a064c:	8973      	ldrh	r3, [r6, #10]
 80a064e:	3b01      	subs	r3, #1
 80a0650:	1b5b      	subs	r3, r3, r5
 80a0652:	4625      	mov	r5, r4
 80a0654:	b21c      	sxth	r4, r3
 80a0656:	e7df      	b.n	80a0618 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
 80a0658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a065a:	bf00      	nop
 80a065c:	20000023 	.word	0x20000023

080a0660 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
 80a0660:	b538      	push	{r3, r4, r5, lr}
 80a0662:	4604      	mov	r4, r0
 80a0664:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a0666:	2240      	movs	r2, #64	; 0x40
 80a0668:	2180      	movs	r1, #128	; 0x80
 80a066a:	f000 fa77 	bl	80a0b5c <_ZN12Adafruit_GFXC1Ess>
 80a066e:	4b06      	ldr	r3, [pc, #24]	; (80a0688 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
  sclk = dc = cs = sid = -1;
  rst = reset;
 80a0670:	f884 5020 	strb.w	r5, [r4, #32]
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a0674:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
 80a0676:	23ff      	movs	r3, #255	; 0xff
 80a0678:	7763      	strb	r3, [r4, #29]
 80a067a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 80a067e:	77e3      	strb	r3, [r4, #31]
 80a0680:	77a3      	strb	r3, [r4, #30]
  rst = reset;
}
 80a0682:	4620      	mov	r0, r4
 80a0684:	bd38      	pop	{r3, r4, r5, pc}
 80a0686:	bf00      	nop
 80a0688:	080a2ee0 	.word	0x080a2ee0

080a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>:
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 80a068c:	b538      	push	{r3, r4, r5, lr}
  if (sid != -1)
 80a068e:	f990 301d 	ldrsb.w	r3, [r0, #29]
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 80a0692:	4604      	mov	r4, r0
  if (sid != -1)
 80a0694:	3301      	adds	r3, #1
  } else {
    ssd1306_command(SSD1306_NORMALDISPLAY);
  }
}

void Adafruit_SSD1306::ssd1306_command(uint8_t c) { 
 80a0696:	460d      	mov	r5, r1
  if (sid != -1)
 80a0698:	d022      	beq.n	80a06e0 <_ZN16Adafruit_SSD130615ssd1306_commandEh+0x54>
  {
    // SPI
    digitalWrite(cs, HIGH);
 80a069a:	f990 0021 	ldrsb.w	r0, [r0, #33]	; 0x21
 80a069e:	2101      	movs	r1, #1
 80a06a0:	b280      	uxth	r0, r0
 80a06a2:	f002 f9a6 	bl	80a29f2 <digitalWrite>
    digitalWrite(dc, LOW);
 80a06a6:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80a06aa:	2100      	movs	r1, #0
 80a06ac:	b280      	uxth	r0, r0
 80a06ae:	f002 f9a0 	bl	80a29f2 <digitalWrite>
    digitalWrite(cs, LOW);
 80a06b2:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a06b6:	2100      	movs	r1, #0
 80a06b8:	b280      	uxth	r0, r0
 80a06ba:	f002 f99a 	bl	80a29f2 <digitalWrite>
    fastSPIwrite(c);
 80a06be:	f994 101e 	ldrsb.w	r1, [r4, #30]
 80a06c2:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a06c6:	462b      	mov	r3, r5
 80a06c8:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80a06cc:	f7ff ff6e 	bl	80a05ac <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
 80a06d0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a06d4:	2101      	movs	r1, #1
 80a06d6:	b280      	uxth	r0, r0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
  }
}
 80a06d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // SPI
    digitalWrite(cs, HIGH);
    digitalWrite(dc, LOW);
    digitalWrite(cs, LOW);
    fastSPIwrite(c);
    digitalWrite(cs, HIGH);
 80a06dc:	f002 b989 	b.w	80a29f2 <digitalWrite>
  }
  else
  {
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
 80a06e0:	f002 f9fe 	bl	80a2ae0 <_Z19__fetch_global_Wirev>
 80a06e4:	f994 101b 	ldrsb.w	r1, [r4, #27]
 80a06e8:	f002 f874 	bl	80a27d4 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(control);
 80a06ec:	f002 f9f8 	bl	80a2ae0 <_Z19__fetch_global_Wirev>
 80a06f0:	6803      	ldr	r3, [r0, #0]
 80a06f2:	2100      	movs	r1, #0
 80a06f4:	689b      	ldr	r3, [r3, #8]
 80a06f6:	4798      	blx	r3
    Wire.write(c);
 80a06f8:	f002 f9f2 	bl	80a2ae0 <_Z19__fetch_global_Wirev>
 80a06fc:	6803      	ldr	r3, [r0, #0]
 80a06fe:	4629      	mov	r1, r5
 80a0700:	689b      	ldr	r3, [r3, #8]
 80a0702:	4798      	blx	r3
    Wire.endTransmission();
 80a0704:	f002 f9ec 	bl	80a2ae0 <_Z19__fetch_global_Wirev>
  }
}
 80a0708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    // I2C
    uint8_t control = 0x00;   // Co = 0, D/C = 0
    Wire.beginTransmission(_i2caddr);
    Wire.write(control);
    Wire.write(c);
    Wire.endTransmission();
 80a070c:	f002 b869 	b.w	80a27e2 <_ZN7TwoWire15endTransmissionEv>

080a0710 <_ZN16Adafruit_SSD13065beginEhh>:
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 80a0710:	b538      	push	{r3, r4, r5, lr}
 80a0712:	4604      	mov	r4, r0
  _vccstate = vccstate;
 80a0714:	7721      	strb	r1, [r4, #28]
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
 80a0716:	f990 301d 	ldrsb.w	r3, [r0, #29]
  sclk = dc = cs = sid = -1;
  rst = reset;
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
 80a071a:	460d      	mov	r5, r1
  _vccstate = vccstate;
  _i2caddr = i2caddr;

  // set pin directions
  if (sid != -1){
 80a071c:	3301      	adds	r3, #1
}
  

void Adafruit_SSD1306::begin(uint8_t vccstate, uint8_t i2caddr) {
  _vccstate = vccstate;
  _i2caddr = i2caddr;
 80a071e:	76c2      	strb	r2, [r0, #27]

  // set pin directions
  if (sid != -1){
 80a0720:	d033      	beq.n	80a078a <_ZN16Adafruit_SSD13065beginEhh+0x7a>
    pinMode(dc, OUTPUT);
 80a0722:	f990 001f 	ldrsb.w	r0, [r0, #31]
 80a0726:	2101      	movs	r1, #1
 80a0728:	b280      	uxth	r0, r0
 80a072a:	f002 f951 	bl	80a29d0 <pinMode>
    pinMode(cs, OUTPUT);
 80a072e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0732:	2101      	movs	r1, #1
 80a0734:	b280      	uxth	r0, r0
 80a0736:	f002 f94b 	bl	80a29d0 <pinMode>
    if (!hwSPI){
 80a073a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a073e:	b95b      	cbnz	r3, 80a0758 <_ZN16Adafruit_SSD13065beginEhh+0x48>
    	// set pins for software-SPI
    	pinMode(sid, OUTPUT);
 80a0740:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a0744:	2101      	movs	r1, #1
 80a0746:	b280      	uxth	r0, r0
 80a0748:	f002 f942 	bl	80a29d0 <pinMode>
    	pinMode(sclk, OUTPUT);
 80a074c:	f994 001e 	ldrsb.w	r0, [r4, #30]
 80a0750:	2101      	movs	r1, #1
 80a0752:	b280      	uxth	r0, r0
 80a0754:	f002 f93c 	bl	80a29d0 <pinMode>
    	}
    if (hwSPI){
 80a0758:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a075c:	b1cb      	cbz	r3, 80a0792 <_ZN16Adafruit_SSD13065beginEhh+0x82>
        digitalWrite(cs, HIGH);
 80a075e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0762:	2101      	movs	r1, #1
 80a0764:	b280      	uxth	r0, r0
 80a0766:	f002 f944 	bl	80a29f2 <digitalWrite>
        SPI.setBitOrder(MSBFIRST);
 80a076a:	2101      	movs	r1, #1
 80a076c:	484f      	ldr	r0, [pc, #316]	; (80a08ac <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a076e:	f001 f968 	bl	80a1a42 <_ZN8SPIClass11setBitOrderEh>
        SPI.setClockDivider(SPI_CLOCK_DIV8);	// 72MHz / 8 = 9Mhz
 80a0772:	2110      	movs	r1, #16
 80a0774:	484d      	ldr	r0, [pc, #308]	; (80a08ac <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a0776:	f001 f9b1 	bl	80a1adc <_ZN8SPIClass15setClockDividerEh>
        SPI.setDataMode(0);
 80a077a:	2100      	movs	r1, #0
 80a077c:	484b      	ldr	r0, [pc, #300]	; (80a08ac <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a077e:	f001 f963 	bl	80a1a48 <_ZN8SPIClass11setDataModeEh>
        SPI.begin();	
 80a0782:	484a      	ldr	r0, [pc, #296]	; (80a08ac <_ZN16Adafruit_SSD13065beginEhh+0x19c>)
 80a0784:	f001 f958 	bl	80a1a38 <_ZN8SPIClass5beginEv>
 80a0788:	e003      	b.n	80a0792 <_ZN16Adafruit_SSD13065beginEhh+0x82>
    	}
    }
  else
  {
    // I2C Init
    Wire.begin();
 80a078a:	f002 f9a9 	bl	80a2ae0 <_Z19__fetch_global_Wirev>
 80a078e:	f002 f817 	bl	80a27c0 <_ZN7TwoWire5beginEv>
  }

  // Setup reset pin direction (used by both SPI and I2C)  
  pinMode(rst, OUTPUT);
 80a0792:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a0796:	2101      	movs	r1, #1
 80a0798:	b280      	uxth	r0, r0
 80a079a:	f002 f919 	bl	80a29d0 <pinMode>
  digitalWrite(rst, HIGH);
 80a079e:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a07a2:	2101      	movs	r1, #1
 80a07a4:	b280      	uxth	r0, r0
 80a07a6:	f002 f924 	bl	80a29f2 <digitalWrite>
  // VDD (3.3V) goes high at start, lets just chill for a ms
  delay(1);
 80a07aa:	2001      	movs	r0, #1
 80a07ac:	f001 fd40 	bl	80a2230 <delay>
  // bring reset low
  digitalWrite(rst, LOW);
 80a07b0:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a07b4:	2100      	movs	r1, #0
 80a07b6:	b280      	uxth	r0, r0
 80a07b8:	f002 f91b 	bl	80a29f2 <digitalWrite>
  // wait 10ms
  delay(10);
 80a07bc:	200a      	movs	r0, #10
 80a07be:	f001 fd37 	bl	80a2230 <delay>
  // bring out of reset
  digitalWrite(rst, HIGH);
 80a07c2:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80a07c6:	2101      	movs	r1, #1
 80a07c8:	b280      	uxth	r0, r0
 80a07ca:	f002 f912 	bl	80a29f2 <digitalWrite>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif

  #if defined SSD1306_128_64
    // Init sequence for 128x64 OLED module
    ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
 80a07ce:	4620      	mov	r0, r4
 80a07d0:	21ae      	movs	r1, #174	; 0xae
 80a07d2:	f7ff ff5b 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
 80a07d6:	4620      	mov	r0, r4
 80a07d8:	21d5      	movs	r1, #213	; 0xd5
 80a07da:	f7ff ff57 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x80);                                  // the suggested ratio 0x80
 80a07de:	4620      	mov	r0, r4
 80a07e0:	2180      	movs	r1, #128	; 0x80
 80a07e2:	f7ff ff53 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
 80a07e6:	4620      	mov	r0, r4
 80a07e8:	21a8      	movs	r1, #168	; 0xa8
 80a07ea:	f7ff ff4f 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x3F);
 80a07ee:	4620      	mov	r0, r4
 80a07f0:	213f      	movs	r1, #63	; 0x3f
 80a07f2:	f7ff ff4b 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
 80a07f6:	4620      	mov	r0, r4
 80a07f8:	21d3      	movs	r1, #211	; 0xd3
 80a07fa:	f7ff ff47 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x0);                                   // no offset
 80a07fe:	4620      	mov	r0, r4
 80a0800:	2100      	movs	r1, #0
 80a0802:	f7ff ff43 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
 80a0806:	4620      	mov	r0, r4
 80a0808:	2140      	movs	r1, #64	; 0x40
 80a080a:	f7ff ff3f 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
 80a080e:	218d      	movs	r1, #141	; 0x8d
 80a0810:	4620      	mov	r0, r4
 80a0812:	f7ff ff3b 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 80a0816:	2d01      	cmp	r5, #1
      { ssd1306_command(0x10); }
 80a0818:	bf0c      	ite	eq
 80a081a:	2110      	moveq	r1, #16
    else 
      { ssd1306_command(0x14); }
 80a081c:	2114      	movne	r1, #20
 80a081e:	4620      	mov	r0, r4
 80a0820:	f7ff ff34 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
 80a0824:	4620      	mov	r0, r4
 80a0826:	2120      	movs	r1, #32
 80a0828:	f7ff ff30 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x00);                                  // 0x0 act like ks0108
 80a082c:	4620      	mov	r0, r4
 80a082e:	2100      	movs	r1, #0
 80a0830:	f7ff ff2c 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SEGREMAP | 0x1);
 80a0834:	4620      	mov	r0, r4
 80a0836:	21a1      	movs	r1, #161	; 0xa1
 80a0838:	f7ff ff28 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_COMSCANDEC);
 80a083c:	4620      	mov	r0, r4
 80a083e:	21c8      	movs	r1, #200	; 0xc8
 80a0840:	f7ff ff24 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
 80a0844:	4620      	mov	r0, r4
 80a0846:	21da      	movs	r1, #218	; 0xda
 80a0848:	f7ff ff20 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x12);
 80a084c:	4620      	mov	r0, r4
 80a084e:	2112      	movs	r1, #18
 80a0850:	f7ff ff1c 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
 80a0854:	2181      	movs	r1, #129	; 0x81
 80a0856:	4620      	mov	r0, r4
 80a0858:	f7ff ff18 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 80a085c:	2d01      	cmp	r5, #1
      { ssd1306_command(0x9F); }
 80a085e:	bf0c      	ite	eq
 80a0860:	219f      	moveq	r1, #159	; 0x9f
    else 
      { ssd1306_command(0xCF); }
 80a0862:	21cf      	movne	r1, #207	; 0xcf
 80a0864:	4620      	mov	r0, r4
 80a0866:	f7ff ff11 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
 80a086a:	21d9      	movs	r1, #217	; 0xd9
 80a086c:	4620      	mov	r0, r4
 80a086e:	f7ff ff0d 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    if (vccstate == SSD1306_EXTERNALVCC) 
 80a0872:	2d01      	cmp	r5, #1
      { ssd1306_command(0x22); }
 80a0874:	bf0c      	ite	eq
 80a0876:	2122      	moveq	r1, #34	; 0x22
    else 
      { ssd1306_command(0xF1); }
 80a0878:	21f1      	movne	r1, #241	; 0xf1
 80a087a:	4620      	mov	r0, r4
 80a087c:	f7ff ff06 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
 80a0880:	4620      	mov	r0, r4
 80a0882:	21db      	movs	r1, #219	; 0xdb
 80a0884:	f7ff ff02 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(0x40);
 80a0888:	4620      	mov	r0, r4
 80a088a:	2140      	movs	r1, #64	; 0x40
 80a088c:	f7ff fefe 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
 80a0890:	4620      	mov	r0, r4
 80a0892:	21a4      	movs	r1, #164	; 0xa4
 80a0894:	f7ff fefa 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
 80a0898:	4620      	mov	r0, r4
 80a089a:	21a6      	movs	r1, #166	; 0xa6
 80a089c:	f7ff fef6 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 80a08a0:	4620      	mov	r0, r4
}
 80a08a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    ssd1306_command(0x40);
    ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
    ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
  #endif
  
  ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
 80a08a6:	21af      	movs	r1, #175	; 0xaf
 80a08a8:	f7ff bef0 	b.w	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
 80a08ac:	200009a0 	.word	0x200009a0

080a08b0 <_ZN16Adafruit_SSD13067displayEv>:
    Wire.write(c);
    Wire.endTransmission();
  }
}

void Adafruit_SSD1306::display(void) {
 80a08b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a08b4:	4604      	mov	r4, r0
  ssd1306_command(SSD1306_COLUMNADDR);
 80a08b6:	2121      	movs	r1, #33	; 0x21
 80a08b8:	f7ff fee8 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0);   // Column start address (0 = reset)
 80a08bc:	2100      	movs	r1, #0
 80a08be:	4620      	mov	r0, r4
 80a08c0:	f7ff fee4 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(127); // Column end address (127 = reset)
 80a08c4:	217f      	movs	r1, #127	; 0x7f
 80a08c6:	4620      	mov	r0, r4
 80a08c8:	f7ff fee0 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  ssd1306_command(SSD1306_PAGEADDR);
 80a08cc:	2122      	movs	r1, #34	; 0x22
 80a08ce:	4620      	mov	r0, r4
 80a08d0:	f7ff fedc 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command(0); // Page start address (0 = reset)
 80a08d4:	2100      	movs	r1, #0
 80a08d6:	4620      	mov	r0, r4
 80a08d8:	f7ff fed8 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>
  ssd1306_command((SSD1306_LCDHEIGHT == 64) ? 7 : 3); // Page end address
 80a08dc:	2107      	movs	r1, #7
 80a08de:	4620      	mov	r0, r4
 80a08e0:	f7ff fed4 	bl	80a068c <_ZN16Adafruit_SSD130615ssd1306_commandEh>

  if (sid != -1)
 80a08e4:	f994 301d 	ldrsb.w	r3, [r4, #29]
 80a08e8:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80a0998 <_ZN16Adafruit_SSD13067displayEv+0xe8>
 80a08ec:	3301      	adds	r3, #1
 80a08ee:	d02e      	beq.n	80a094e <_ZN16Adafruit_SSD13067displayEv+0x9e>
  {
    // SPI
    digitalWrite(cs, HIGH);
 80a08f0:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a08f4:	2101      	movs	r1, #1
 80a08f6:	b280      	uxth	r0, r0
 80a08f8:	f002 f87b 	bl	80a29f2 <digitalWrite>
    digitalWrite(dc, HIGH);
 80a08fc:	f994 001f 	ldrsb.w	r0, [r4, #31]
 80a0900:	2101      	movs	r1, #1
 80a0902:	b280      	uxth	r0, r0
 80a0904:	f002 f875 	bl	80a29f2 <digitalWrite>
    digitalWrite(cs, LOW);
 80a0908:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a090c:	2100      	movs	r1, #0
 80a090e:	b280      	uxth	r0, r0
 80a0910:	f002 f86f 	bl	80a29f2 <digitalWrite>
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0914:	2001      	movs	r0, #1
 80a0916:	f000 fe9d 	bl	80a1654 <HAL_Delay_Microseconds>
 80a091a:	2500      	movs	r5, #0
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
 80a091c:	f818 3005 	ldrb.w	r3, [r8, r5]
 80a0920:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 80a0924:	f994 101e 	ldrsb.w	r1, [r4, #30]
 80a0928:	f994 001d 	ldrsb.w	r0, [r4, #29]
 80a092c:	3501      	adds	r5, #1
 80a092e:	f7ff fe3d 	bl	80a05ac <_ZN16Adafruit_SSD130612fastSPIwriteEh.isra.1>
    digitalWrite(cs, HIGH);
    digitalWrite(dc, HIGH);
    digitalWrite(cs, LOW);
	delayMicroseconds(1);		// May not be necessary - needs testing

    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 80a0932:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a0936:	d1f1      	bne.n	80a091c <_ZN16Adafruit_SSD13067displayEv+0x6c>
 80a0938:	2001      	movs	r0, #1
 80a093a:	f000 fe8b 	bl	80a1654 <HAL_Delay_Microseconds>
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
 80a093e:	f994 0021 	ldrsb.w	r0, [r4, #33]	; 0x21
 80a0942:	2101      	movs	r1, #1
 80a0944:	b280      	uxth	r0, r0
		}
	i--;
	Wire.endTransmission();
	}
  }
}
 80a0946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      fastSPIwrite(buffer[i]);
      //ssd1306_data(buffer[i]);
    }
	delayMicroseconds(1);		// May not be necessary - needs testing
    digitalWrite(cs, HIGH);
 80a094a:	f002 b852 	b.w	80a29f2 <digitalWrite>
 80a094e:	2500      	movs	r5, #0
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
 80a0950:	f002 f8c6 	bl	80a2ae0 <_Z19__fetch_global_Wirev>
 80a0954:	f994 101b 	ldrsb.w	r1, [r4, #27]
 80a0958:	f001 ff3c 	bl	80a27d4 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(0x40);
 80a095c:	f002 f8c0 	bl	80a2ae0 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0960:	6803      	ldr	r3, [r0, #0]
 80a0962:	2140      	movs	r1, #64	; 0x40
 80a0964:	689b      	ldr	r3, [r3, #8]
 80a0966:	4798      	blx	r3
 80a0968:	2600      	movs	r6, #0
      for (uint8_t x=0; x<16; x++) {
		Wire.write(buffer[i]);
 80a096a:	f002 f8b9 	bl	80a2ae0 <_Z19__fetch_global_Wirev>
 80a096e:	19af      	adds	r7, r5, r6
 80a0970:	6803      	ldr	r3, [r0, #0]
 80a0972:	b2bf      	uxth	r7, r7
 80a0974:	689b      	ldr	r3, [r3, #8]
 80a0976:	f818 1007 	ldrb.w	r1, [r8, r7]
 80a097a:	3601      	adds	r6, #1
 80a097c:	4798      	blx	r3
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
      // send a bunch of data in one xmission
      Wire.beginTransmission(_i2caddr);
      Wire.write(0x40);
      for (uint8_t x=0; x<16; x++) {
 80a097e:	2e10      	cmp	r6, #16
 80a0980:	d1f3      	bne.n	80a096a <_ZN16Adafruit_SSD13067displayEv+0xba>
 80a0982:	3510      	adds	r5, #16
		Wire.write(buffer[i]);
		i++;
		}
	i--;
	Wire.endTransmission();
 80a0984:	f002 f8ac 	bl	80a2ae0 <_Z19__fetch_global_Wirev>
 80a0988:	b2ad      	uxth	r5, r5
 80a098a:	f001 ff2a 	bl	80a27e2 <_ZN7TwoWire15endTransmissionEv>
    digitalWrite(cs, HIGH);
  }
  else
  {
    // I2C
    for (uint16_t i=0; i<(SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8); i++) {
 80a098e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80a0992:	d1dd      	bne.n	80a0950 <_ZN16Adafruit_SSD13067displayEv+0xa0>
		}
	i--;
	Wire.endTransmission();
	}
  }
}
 80a0994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0998:	20000023 	.word	0x20000023

080a099c <_ZN16Adafruit_SSD130612clearDisplayEv>:

// clear everything
void Adafruit_SSD1306::clearDisplay(void) {
  memset(buffer, 0, (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT/8));
 80a099c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80a09a0:	2100      	movs	r1, #0
 80a09a2:	4801      	ldr	r0, [pc, #4]	; (80a09a8 <_ZN16Adafruit_SSD130612clearDisplayEv+0xc>)
 80a09a4:	f002 ba25 	b.w	80a2df2 <memset>
 80a09a8:	20000023 	.word	0x20000023

080a09ac <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a09ac:	f000 bdea 	b.w	80a1584 <HAL_Pin_Map>

080a09b0 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a09b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a09b4:	461e      	mov	r6, r3
 80a09b6:	b085      	sub	sp, #20
 80a09b8:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a09bc:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a09be:	1a9a      	subs	r2, r3, r2
 80a09c0:	2a00      	cmp	r2, #0
 80a09c2:	bfb8      	it	lt
 80a09c4:	4252      	neglt	r2, r2
 80a09c6:	9200      	str	r2, [sp, #0]
 80a09c8:	1a72      	subs	r2, r6, r1
 80a09ca:	2a00      	cmp	r2, #0
 80a09cc:	bfb8      	it	lt
 80a09ce:	4252      	neglt	r2, r2
 80a09d0:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a09d2:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a09d4:	9a00      	ldr	r2, [sp, #0]
 80a09d6:	9901      	ldr	r1, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a09d8:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a09da:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a09dc:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a09e0:	dd05      	ble.n	80a09ee <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 80a09e2:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
 80a09e4:	461e      	mov	r6, r3
 80a09e6:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a09e8:	4622      	mov	r2, r4
    swap(x0, y0);
 80a09ea:	462c      	mov	r4, r5
 80a09ec:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a09ee:	42b4      	cmp	r4, r6
 80a09f0:	dd05      	ble.n	80a09fe <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 80a09f2:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 80a09f4:	461d      	mov	r5, r3
 80a09f6:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a09f8:	4622      	mov	r2, r4
 80a09fa:	4634      	mov	r4, r6
 80a09fc:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 80a09fe:	1b5a      	subs	r2, r3, r5
 80a0a00:	2a00      	cmp	r2, #0
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a0a02:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 80a0a06:	bfb8      	it	lt
 80a0a08:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a0a0a:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 80a0a0e:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 80a0a10:	fa0f f788 	sxth.w	r7, r8
 80a0a14:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a0a16:	429d      	cmp	r5, r3
 80a0a18:	bfb4      	ite	lt
 80a0a1a:	2301      	movlt	r3, #1
 80a0a1c:	f04f 33ff 	movge.w	r3, #4294967295

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 80a0a20:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a0a24:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a0a26:	42b4      	cmp	r4, r6
 80a0a28:	dc1f      	bgt.n	80a0a6a <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 80a0a2a:	9a01      	ldr	r2, [sp, #4]
 80a0a2c:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 80a0a2e:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 80a0a30:	4293      	cmp	r3, r2
 80a0a32:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 80a0a36:	bfc8      	it	gt
 80a0a38:	4622      	movgt	r2, r4
 80a0a3a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0a3e:	bfc8      	it	gt
 80a0a40:	4629      	movgt	r1, r5
 80a0a42:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 80a0a44:	bfdc      	itt	le
 80a0a46:	462a      	movle	r2, r5
 80a0a48:	4621      	movle	r1, r4
 80a0a4a:	47d8      	blx	fp
    }
    err -= dy;
 80a0a4c:	9b03      	ldr	r3, [sp, #12]
 80a0a4e:	1aff      	subs	r7, r7, r3
 80a0a50:	b2bb      	uxth	r3, r7
 80a0a52:	b21f      	sxth	r7, r3
    if (err < 0) {
 80a0a54:	2f00      	cmp	r7, #0
 80a0a56:	da05      	bge.n	80a0a64 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 80a0a58:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 80a0a5a:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 80a0a5e:	4415      	add	r5, r2
 80a0a60:	b22d      	sxth	r5, r5
      err += dx;
 80a0a62:	b23f      	sxth	r7, r7
 80a0a64:	3401      	adds	r4, #1
 80a0a66:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 80a0a68:	e7dd      	b.n	80a0a26 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 80a0a6a:	b005      	add	sp, #20
 80a0a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0a70 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a0a70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0a74:	4604      	mov	r4, r0
 80a0a76:	4691      	mov	r9, r2
 80a0a78:	460d      	mov	r5, r1
 80a0a7a:	4698      	mov	r8, r3
 80a0a7c:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a0a80:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a0a82:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a0a86:	9600      	str	r6, [sp, #0]
 80a0a88:	69ff      	ldr	r7, [r7, #28]
 80a0a8a:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a0a8c:	6823      	ldr	r3, [r4, #0]
 80a0a8e:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a0a92:	9600      	str	r6, [sp, #0]
 80a0a94:	444a      	add	r2, r9
 80a0a96:	69df      	ldr	r7, [r3, #28]
 80a0a98:	4629      	mov	r1, r5
 80a0a9a:	4643      	mov	r3, r8
 80a0a9c:	4620      	mov	r0, r4
 80a0a9e:	b212      	sxth	r2, r2
 80a0aa0:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a0aa2:	6823      	ldr	r3, [r4, #0]
 80a0aa4:	9600      	str	r6, [sp, #0]
 80a0aa6:	699f      	ldr	r7, [r3, #24]
 80a0aa8:	464a      	mov	r2, r9
 80a0aaa:	4653      	mov	r3, sl
 80a0aac:	4629      	mov	r1, r5
 80a0aae:	4620      	mov	r0, r4
 80a0ab0:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a0ab2:	6823      	ldr	r3, [r4, #0]
 80a0ab4:	f108 31ff 	add.w	r1, r8, #4294967295
 80a0ab8:	960a      	str	r6, [sp, #40]	; 0x28
 80a0aba:	4429      	add	r1, r5
 80a0abc:	699d      	ldr	r5, [r3, #24]
 80a0abe:	464a      	mov	r2, r9
 80a0ac0:	4653      	mov	r3, sl
 80a0ac2:	4620      	mov	r0, r4
 80a0ac4:	46ac      	mov	ip, r5
 80a0ac6:	b209      	sxth	r1, r1
}
 80a0ac8:	b002      	add	sp, #8
 80a0aca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 80a0ace:	4760      	bx	ip

080a0ad0 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80a0ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a0ad2:	3b01      	subs	r3, #1
 80a0ad4:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0ad8:	4413      	add	r3, r2
 80a0ada:	6804      	ldr	r4, [r0, #0]
 80a0adc:	b21b      	sxth	r3, r3
 80a0ade:	9300      	str	r3, [sp, #0]
 80a0ae0:	9501      	str	r5, [sp, #4]
 80a0ae2:	6964      	ldr	r4, [r4, #20]
 80a0ae4:	460b      	mov	r3, r1
 80a0ae6:	47a0      	blx	r4
}
 80a0ae8:	b003      	add	sp, #12
 80a0aea:	bd30      	pop	{r4, r5, pc}

080a0aec <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 80a0aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a0aee:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0af2:	6804      	ldr	r4, [r0, #0]
 80a0af4:	e88d 0024 	stmia.w	sp, {r2, r5}
 80a0af8:	3b01      	subs	r3, #1
 80a0afa:	440b      	add	r3, r1
 80a0afc:	6964      	ldr	r4, [r4, #20]
 80a0afe:	b21b      	sxth	r3, r3
 80a0b00:	47a0      	blx	r4
}
 80a0b02:	b003      	add	sp, #12
 80a0b04:	bd30      	pop	{r4, r5, pc}

080a0b06 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a0b06:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a0b0a:	4605      	mov	r5, r0
 80a0b0c:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0b0e:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a0b10:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a0b14:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0b18:	eb01 0a03 	add.w	sl, r1, r3
 80a0b1c:	4554      	cmp	r4, sl
 80a0b1e:	da0b      	bge.n	80a0b38 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a0b20:	682b      	ldr	r3, [r5, #0]
 80a0b22:	f8cd 9000 	str.w	r9, [sp]
 80a0b26:	699e      	ldr	r6, [r3, #24]
 80a0b28:	4621      	mov	r1, r4
 80a0b2a:	4643      	mov	r3, r8
 80a0b2c:	463a      	mov	r2, r7
 80a0b2e:	4628      	mov	r0, r5
 80a0b30:	3401      	adds	r4, #1
 80a0b32:	47b0      	blx	r6
 80a0b34:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0b36:	e7f1      	b.n	80a0b1c <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 80a0b38:	b002      	add	sp, #8
 80a0b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0b3e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a0b3e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a0b40:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a0b44:	6804      	ldr	r4, [r0, #0]
 80a0b46:	9101      	str	r1, [sp, #4]
 80a0b48:	9200      	str	r2, [sp, #0]
 80a0b4a:	2200      	movs	r2, #0
 80a0b4c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a0b50:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a0b52:	4611      	mov	r1, r2
 80a0b54:	47a0      	blx	r4
}
 80a0b56:	b002      	add	sp, #8
 80a0b58:	bd10      	pop	{r4, pc}

080a0b5a <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 80a0b5a:	4770      	bx	lr

080a0b5c <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a0b5c:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 80a0b5e:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 80a0b60:	f64f 71ff 	movw	r1, #65535	; 0xffff
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a0b64:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
 80a0b66:	4d07      	ldr	r5, [pc, #28]	; (80a0b84 <_ZN12Adafruit_GFXC1Ess+0x28>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a0b68:	2400      	movs	r4, #0
 80a0b6a:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 80a0b6c:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 80a0b6e:	2201      	movs	r2, #1
 80a0b70:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a0b72:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 80a0b74:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
 80a0b76:	8204      	strh	r4, [r0, #16]
 80a0b78:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
 80a0b7a:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 80a0b7c:	82c1      	strh	r1, [r0, #22]
 80a0b7e:	8281      	strh	r1, [r0, #20]
  wrap      = true;
 80a0b80:	7682      	strb	r2, [r0, #26]
}
 80a0b82:	bd30      	pop	{r4, r5, pc}
 80a0b84:	080a2f18 	.word	0x080a2f18

080a0b88 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a0b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0b8c:	b08f      	sub	sp, #60	; 0x3c
 80a0b8e:	9106      	str	r1, [sp, #24]
 80a0b90:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80a0b94:	4604      	mov	r4, r0
 80a0b96:	9107      	str	r1, [sp, #28]
 80a0b98:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80a0b9c:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80a0ba0:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
 80a0ba2:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80a0ba6:	9806      	ldr	r0, [sp, #24]
 80a0ba8:	4281      	cmp	r1, r0
 80a0baa:	dd7d      	ble.n	80a0ca8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
 80a0bac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a0bb0:	4291      	cmp	r1, r2
 80a0bb2:	dd79      	ble.n	80a0ca8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     (y >= _height)           || // Clip bottom
 80a0bb4:	2106      	movs	r1, #6
 80a0bb6:	fb01 0008 	mla	r0, r1, r8, r0
 80a0bba:	2800      	cmp	r0, #0
 80a0bbc:	dd74      	ble.n	80a0ca8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     ((x + 6 * size - 1) < 0) || // Clip left
 80a0bbe:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
 80a0bc2:	2800      	cmp	r0, #0
 80a0bc4:	dd70      	ble.n	80a0ca8 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a0bc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a0bca:	b295      	uxth	r5, r2
 80a0bcc:	930c      	str	r3, [sp, #48]	; 0x30
 80a0bce:	f105 0308 	add.w	r3, r5, #8
 80a0bd2:	b29b      	uxth	r3, r3
 80a0bd4:	9109      	str	r1, [sp, #36]	; 0x24
 80a0bd6:	2600      	movs	r6, #0
 80a0bd8:	930d      	str	r3, [sp, #52]	; 0x34
 80a0bda:	462f      	mov	r7, r5
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0bdc:	46a9      	mov	r9, r5
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
 80a0bde:	2e05      	cmp	r6, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a0be0:	bf1f      	itttt	ne
 80a0be2:	4b33      	ldrne	r3, [pc, #204]	; (80a0cb0 <_ZN12Adafruit_GFX8drawCharEsshtth+0x128>)
 80a0be4:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
 80a0be6:	199b      	addne	r3, r3, r6
 80a0be8:	f813 a002 	ldrbne.w	sl, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0bec:	fa1f f388 	uxth.w	r3, r8
 80a0bf0:	9304      	str	r3, [sp, #16]
 80a0bf2:	9904      	ldr	r1, [sp, #16]
 80a0bf4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a0bf8:	b2b2      	uxth	r2, r6
 80a0bfa:	fb01 3102 	mla	r1, r1, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0bfe:	4413      	add	r3, r2
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0c00:	b209      	sxth	r1, r1
 80a0c02:	910a      	str	r1, [sp, #40]	; 0x28
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0c04:	b21b      	sxth	r3, r3
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0c06:	fa0f f188 	sxth.w	r1, r8
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
 80a0c0a:	bf08      	it	eq
 80a0c0c:	f04f 0a00 	moveq.w	sl, #0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0c10:	9505      	str	r5, [sp, #20]
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0c12:	9103      	str	r1, [sp, #12]
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0c14:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
 80a0c16:	f01a 0f01 	tst.w	sl, #1
 80a0c1a:	d011      	beq.n	80a0c40 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
        if (size == 1) // default size
 80a0c1c:	f1b8 0f01 	cmp.w	r8, #1
 80a0c20:	6823      	ldr	r3, [r4, #0]
 80a0c22:	d103      	bne.n	80a0c2c <_ZN12Adafruit_GFX8drawCharEsshtth+0xa4>
          drawPixel(x+i, y+j, color);
 80a0c24:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0c28:	9b07      	ldr	r3, [sp, #28]
 80a0c2a:	e014      	b.n	80a0c56 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0c2c:	9a07      	ldr	r2, [sp, #28]
 80a0c2e:	9201      	str	r2, [sp, #4]
 80a0c30:	9a03      	ldr	r2, [sp, #12]
 80a0c32:	9200      	str	r2, [sp, #0]
 80a0c34:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a0c38:	4613      	mov	r3, r2
 80a0c3a:	fa0f f289 	sxth.w	r2, r9
 80a0c3e:	e018      	b.n	80a0c72 <_ZN12Adafruit_GFX8drawCharEsshtth+0xea>
        } 
      } else if (bg != color) {
 80a0c40:	9b07      	ldr	r3, [sp, #28]
 80a0c42:	9a08      	ldr	r2, [sp, #32]
 80a0c44:	4293      	cmp	r3, r2
 80a0c46:	d017      	beq.n	80a0c78 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        if (size == 1) // default size
 80a0c48:	f1b8 0f01 	cmp.w	r8, #1
 80a0c4c:	6823      	ldr	r3, [r4, #0]
 80a0c4e:	d107      	bne.n	80a0c60 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, bg);
 80a0c50:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0c54:	4613      	mov	r3, r2
 80a0c56:	b23a      	sxth	r2, r7
 80a0c58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a0c5a:	4620      	mov	r0, r4
 80a0c5c:	47d8      	blx	fp
 80a0c5e:	e00b      	b.n	80a0c78 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0c60:	9a08      	ldr	r2, [sp, #32]
 80a0c62:	9201      	str	r2, [sp, #4]
 80a0c64:	9a03      	ldr	r2, [sp, #12]
 80a0c66:	9200      	str	r2, [sp, #0]
 80a0c68:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a0c6c:	4613      	mov	r3, r2
 80a0c6e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80a0c72:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0c74:	4620      	mov	r0, r4
 80a0c76:	47d8      	blx	fp
 80a0c78:	9b04      	ldr	r3, [sp, #16]
 80a0c7a:	9a04      	ldr	r2, [sp, #16]
 80a0c7c:	4499      	add	r9, r3
 80a0c7e:	9b05      	ldr	r3, [sp, #20]
 80a0c80:	3701      	adds	r7, #1
 80a0c82:	4413      	add	r3, r2
 80a0c84:	b29b      	uxth	r3, r3
 80a0c86:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a0c88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a0c8a:	b2bf      	uxth	r7, r7
 80a0c8c:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
 80a0c8e:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80a0c92:	fa1f f989 	uxth.w	r9, r9
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a0c96:	d1be      	bne.n	80a0c16 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8e>
 80a0c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
 80a0c9a:	3601      	adds	r6, #1
 80a0c9c:	3b01      	subs	r3, #1
 80a0c9e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a0ca2:	b276      	sxtb	r6, r6
 80a0ca4:	9309      	str	r3, [sp, #36]	; 0x24
 80a0ca6:	d198      	bne.n	80a0bda <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
 80a0ca8:	b00f      	add	sp, #60	; 0x3c
 80a0caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0cae:	bf00      	nop
 80a0cb0:	080a2f48 	.word	0x080a2f48

080a0cb4 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0cb4:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
 80a0cb6:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0cb8:	b085      	sub	sp, #20
 80a0cba:	4604      	mov	r4, r0
 80a0cbc:	460b      	mov	r3, r1

  if (c == '\n') {
 80a0cbe:	d104      	bne.n	80a0cca <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
 80a0cc0:	7e02      	ldrb	r2, [r0, #24]
 80a0cc2:	8a43      	ldrh	r3, [r0, #18]
 80a0cc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a0cc8:	e023      	b.n	80a0d12 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
 80a0cca:	290d      	cmp	r1, #13
 80a0ccc:	d024      	beq.n	80a0d18 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a0cce:	7e05      	ldrb	r5, [r0, #24]
 80a0cd0:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80a0cd4:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80a0cd8:	9502      	str	r5, [sp, #8]
 80a0cda:	8ac5      	ldrh	r5, [r0, #22]
 80a0cdc:	9501      	str	r5, [sp, #4]
 80a0cde:	8a85      	ldrh	r5, [r0, #20]
 80a0ce0:	9500      	str	r5, [sp, #0]
 80a0ce2:	f7ff ff51 	bl	80a0b88 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 80a0ce6:	7e22      	ldrb	r2, [r4, #24]
 80a0ce8:	8a23      	ldrh	r3, [r4, #16]
 80a0cea:	b291      	uxth	r1, r2
 80a0cec:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80a0cf0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a0cf4:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
 80a0cf6:	b21b      	sxth	r3, r3
 80a0cf8:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a0cfa:	b168      	cbz	r0, 80a0d18 <_ZN12Adafruit_GFX5writeEh+0x64>
 80a0cfc:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a0d00:	f06f 0505 	mvn.w	r5, #5
 80a0d04:	fb05 0202 	mla	r2, r5, r2, r0
 80a0d08:	4293      	cmp	r3, r2
 80a0d0a:	dd05      	ble.n	80a0d18 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
 80a0d0c:	8a63      	ldrh	r3, [r4, #18]
 80a0d0e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80a0d12:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 80a0d14:	2300      	movs	r3, #0
 80a0d16:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
 80a0d18:	2001      	movs	r0, #1
 80a0d1a:	b005      	add	sp, #20
 80a0d1c:	bd30      	pop	{r4, r5, pc}

080a0d1e <_ZN12Adafruit_GFX9setCursorEss>:
    }
  }
}

void Adafruit_GFX::setCursor(int16_t x, int16_t y) {
  cursor_x = x;
 80a0d1e:	8201      	strh	r1, [r0, #16]
  cursor_y = y;
 80a0d20:	8242      	strh	r2, [r0, #18]
 80a0d22:	4770      	bx	lr

080a0d24 <_ZN12Adafruit_GFX11setTextSizeEh>:
}

void Adafruit_GFX::setTextSize(uint8_t s) {
  textsize = (s > 0) ? s : 1;
 80a0d24:	2900      	cmp	r1, #0
 80a0d26:	bf08      	it	eq
 80a0d28:	2101      	moveq	r1, #1
 80a0d2a:	7601      	strb	r1, [r0, #24]
 80a0d2c:	4770      	bx	lr

080a0d2e <_ZN12Adafruit_GFX12setTextColorEt>:
}

void Adafruit_GFX::setTextColor(uint16_t c) {
  // For 'transparent' background, we'll set the bg 
  // to the same as fg instead of using a flag
  textcolor = textbgcolor = c;
 80a0d2e:	82c1      	strh	r1, [r0, #22]
 80a0d30:	8281      	strh	r1, [r0, #20]
 80a0d32:	4770      	bx	lr

080a0d34 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
 80a0d34:	7e40      	ldrb	r0, [r0, #25]
 80a0d36:	4770      	bx	lr

080a0d38 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
 80a0d38:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80a0d3c:	4770      	bx	lr

080a0d3e <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
 80a0d3e:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a0d42:	4770      	bx	lr

080a0d44 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a0d44:	f000 bc1e 	b.w	80a1584 <HAL_Pin_Map>

080a0d48 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0d48:	b538      	push	{r3, r4, r5, lr}
 80a0d4a:	4b0b      	ldr	r3, [pc, #44]	; (80a0d78 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0d4c:	6984      	ldr	r4, [r0, #24]
 80a0d4e:	4605      	mov	r5, r0
 80a0d50:	6003      	str	r3, [r0, #0]
 80a0d52:	b17c      	cbz	r4, 80a0d74 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0d54:	6863      	ldr	r3, [r4, #4]
 80a0d56:	3b01      	subs	r3, #1
 80a0d58:	6063      	str	r3, [r4, #4]
 80a0d5a:	b95b      	cbnz	r3, 80a0d74 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a0d5c:	6823      	ldr	r3, [r4, #0]
 80a0d5e:	4620      	mov	r0, r4
 80a0d60:	689b      	ldr	r3, [r3, #8]
 80a0d62:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0d64:	68a3      	ldr	r3, [r4, #8]
 80a0d66:	3b01      	subs	r3, #1
 80a0d68:	60a3      	str	r3, [r4, #8]
 80a0d6a:	b91b      	cbnz	r3, 80a0d74 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0d6c:	6823      	ldr	r3, [r4, #0]
 80a0d6e:	4620      	mov	r0, r4
 80a0d70:	68db      	ldr	r3, [r3, #12]
 80a0d72:	4798      	blx	r3
 80a0d74:	4628      	mov	r0, r5
 80a0d76:	bd38      	pop	{r3, r4, r5, pc}
 80a0d78:	080a3490 	.word	0x080a3490

080a0d7c <_ZN9TCPClientD0Ev>:
 80a0d7c:	b510      	push	{r4, lr}
 80a0d7e:	4604      	mov	r4, r0
 80a0d80:	f7ff ffe2 	bl	80a0d48 <_ZN9TCPClientD1Ev>
 80a0d84:	4620      	mov	r0, r4
 80a0d86:	211c      	movs	r1, #28
 80a0d88:	f001 fecf 	bl	80a2b2a <_ZdlPvj>
 80a0d8c:	4620      	mov	r0, r4
 80a0d8e:	bd10      	pop	{r4, pc}

080a0d90 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0d90:	b538      	push	{r3, r4, r5, lr}
 80a0d92:	461d      	mov	r5, r3
    this->callback = callback;
 80a0d94:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0d96:	4604      	mov	r4, r0
    this->callback = callback;
 80a0d98:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a0d9a:	2300      	movs	r3, #0
 80a0d9c:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a0d9e:	b102      	cbz	r2, 80a0da2 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a0da0:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a0da2:	b119      	cbz	r1, 80a0dac <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a0da4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0da8:	f001 f9aa 	bl	80a2100 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0dac:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a0dae:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a0db0:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0db2:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a0db4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0db8:	2bff      	cmp	r3, #255	; 0xff
 80a0dba:	bfb8      	it	lt
 80a0dbc:	23ff      	movlt	r3, #255	; 0xff
 80a0dbe:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a0dc2:	b108      	cbz	r0, 80a0dc8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a0dc4:	f7ff f96f 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a0dc8:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a0dcc:	f7ff f967 	bl	80a009e <_Znaj>
 80a0dd0:	61e0      	str	r0, [r4, #28]
 80a0dd2:	bd38      	pop	{r3, r4, r5, pc}

080a0dd4 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0dd4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0dd8:	4604      	mov	r4, r0
 80a0dda:	4617      	mov	r7, r2
 80a0ddc:	4698      	mov	r8, r3
 80a0dde:	460e      	mov	r6, r1
 80a0de0:	2500      	movs	r5, #0
 80a0de2:	f001 f8c1 	bl	80a1f68 <_ZN9TCPClientC1Ev>
 80a0de6:	61e5      	str	r5, [r4, #28]
 80a0de8:	490a      	ldr	r1, [pc, #40]	; (80a0e14 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
 80a0dea:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0dee:	f001 f95a 	bl	80a20a6 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a0df2:	23ff      	movs	r3, #255	; 0xff
 80a0df4:	9302      	str	r3, [sp, #8]
 80a0df6:	230f      	movs	r3, #15
 80a0df8:	9300      	str	r3, [sp, #0]
 80a0dfa:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0dfc:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a0dfe:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0e02:	463b      	mov	r3, r7
 80a0e04:	462a      	mov	r2, r5
 80a0e06:	4631      	mov	r1, r6
 80a0e08:	f7ff ffc2 	bl	80a0d90 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a0e0c:	4620      	mov	r0, r4
 80a0e0e:	b004      	add	sp, #16
 80a0e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0e14:	080a3599 	.word	0x080a3599

080a0e18 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a0e18:	b510      	push	{r4, lr}
 80a0e1a:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0e1c:	4620      	mov	r0, r4
 80a0e1e:	f000 ff37 	bl	80a1c90 <_ZN9TCPClient9availableEv>
 80a0e22:	2800      	cmp	r0, #0
 80a0e24:	d0fa      	beq.n	80a0e1c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a0e26:	4620      	mov	r0, r4
 80a0e28:	f000 fee7 	bl	80a1bfa <_ZN9TCPClient4readEv>
}
 80a0e2c:	b2c0      	uxtb	r0, r0
 80a0e2e:	bd10      	pop	{r4, pc}

080a0e30 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0e34:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0e36:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0e38:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0e3a:	f7ff ffed 	bl	80a0e18 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a0e3e:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0e42:	4646      	mov	r6, r8
 80a0e44:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a0e46:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a0e48:	2700      	movs	r7, #0
 80a0e4a:	f893 9000 	ldrb.w	r9, [r3]
 80a0e4e:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a0e52:	4628      	mov	r0, r5
 80a0e54:	f7ff ffe0 	bl	80a0e18 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a0e58:	69eb      	ldr	r3, [r5, #28]
 80a0e5a:	1c74      	adds	r4, r6, #1
 80a0e5c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0e5e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a0e62:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a0e66:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0e68:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0e6a:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a0e6c:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a0e70:	d501      	bpl.n	80a0e76 <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0e72:	4626      	mov	r6, r4
 80a0e74:	e7ed      	b.n	80a0e52 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0e76:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a0e78:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0e7c:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a0e80:	d113      	bne.n	80a0eaa <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a0e82:	4628      	mov	r0, r5
 80a0e84:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a0e88:	f7ff ffc6 	bl	80a0e18 <_ZN4MQTT8readByteEv>
 80a0e8c:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a0e90:	4628      	mov	r0, r5
 80a0e92:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a0e96:	f7ff ffbf 	bl	80a0e18 <_ZN4MQTT8readByteEv>
 80a0e9a:	1cf4      	adds	r4, r6, #3
 80a0e9c:	3602      	adds	r6, #2
 80a0e9e:	b2b6      	uxth	r6, r6
 80a0ea0:	b2a4      	uxth	r4, r4
 80a0ea2:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a0ea6:	2302      	movs	r3, #2
 80a0ea8:	e000      	b.n	80a0eac <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a0eaa:	2300      	movs	r3, #0
 80a0eac:	1b1b      	subs	r3, r3, r4
 80a0eae:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0eb0:	19a3      	adds	r3, r4, r6
 80a0eb2:	b29b      	uxth	r3, r3
 80a0eb4:	429f      	cmp	r7, r3
 80a0eb6:	d90b      	bls.n	80a0ed0 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a0eb8:	4628      	mov	r0, r5
 80a0eba:	f7ff ffad 	bl	80a0e18 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a0ebe:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a0ec2:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a0ec4:	bf84      	itt	hi
 80a0ec6:	69eb      	ldrhi	r3, [r5, #28]
 80a0ec8:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a0eca:	3401      	adds	r4, #1
 80a0ecc:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0ece:	e7ef      	b.n	80a0eb0 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a0ed0:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a0ed4:	42a0      	cmp	r0, r4
 80a0ed6:	bf2c      	ite	cs
 80a0ed8:	4620      	movcs	r0, r4
 80a0eda:	2000      	movcc	r0, #0
 80a0edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0ee0 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0ee2:	4607      	mov	r7, r0
 80a0ee4:	468e      	mov	lr, r1
 80a0ee6:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a0ee8:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a0eea:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a0eec:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0ef0:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a0ef2:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0ef4:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a0ef6:	bf18      	it	ne
 80a0ef8:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a0efc:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0efe:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a0f02:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a0f04:	2d00      	cmp	r5, #0
 80a0f06:	d1f1      	bne.n	80a0eec <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a0f08:	f1c4 0304 	rsb	r3, r4, #4
 80a0f0c:	18d1      	adds	r1, r2, r3
 80a0f0e:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a0f12:	42a5      	cmp	r5, r4
 80a0f14:	da06      	bge.n	80a0f24 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a0f16:	a801      	add	r0, sp, #4
 80a0f18:	1b2b      	subs	r3, r5, r4
 80a0f1a:	5c28      	ldrb	r0, [r5, r0]
 80a0f1c:	4413      	add	r3, r2
 80a0f1e:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a0f20:	3501      	adds	r5, #1
 80a0f22:	e7f6      	b.n	80a0f12 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a0f24:	1c72      	adds	r2, r6, #1
 80a0f26:	4422      	add	r2, r4
 80a0f28:	4638      	mov	r0, r7
 80a0f2a:	f000 fe0e 	bl	80a1b4a <_ZN9TCPClient5writeEPKhj>
 80a0f2e:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0f30:	f000 fb98 	bl	80a1664 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0f34:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a0f36:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0f38:	4434      	add	r4, r6
 80a0f3a:	b2a8      	uxth	r0, r5
}
 80a0f3c:	1a23      	subs	r3, r4, r0
 80a0f3e:	4258      	negs	r0, r3
 80a0f40:	4158      	adcs	r0, r3
 80a0f42:	b003      	add	sp, #12
 80a0f44:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0f46 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a0f46:	b510      	push	{r4, lr}
 80a0f48:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a0f4a:	69c3      	ldr	r3, [r0, #28]
 80a0f4c:	22e0      	movs	r2, #224	; 0xe0
 80a0f4e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a0f50:	69c3      	ldr	r3, [r0, #28]
 80a0f52:	2200      	movs	r2, #0
 80a0f54:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a0f56:	69c1      	ldr	r1, [r0, #28]
 80a0f58:	2202      	movs	r2, #2
 80a0f5a:	f000 fdf6 	bl	80a1b4a <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a0f5e:	4620      	mov	r0, r4
 80a0f60:	f000 fed2 	bl	80a1d08 <_ZN9TCPClient4stopEv>
 80a0f64:	f000 fb7e 	bl	80a1664 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a0f68:	6260      	str	r0, [r4, #36]	; 0x24
 80a0f6a:	62a0      	str	r0, [r4, #40]	; 0x28
 80a0f6c:	bd10      	pop	{r4, pc}

080a0f6e <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0f6e:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a0f70:	460d      	mov	r5, r1
 80a0f72:	3302      	adds	r3, #2
 80a0f74:	b29b      	uxth	r3, r3
 80a0f76:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a0f78:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a0f7c:	b2a4      	uxth	r4, r4
 80a0f7e:	b13e      	cbz	r6, 80a0f90 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a0f80:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a0f84:	429f      	cmp	r7, r3
 80a0f86:	d903      	bls.n	80a0f90 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a0f88:	1c5c      	adds	r4, r3, #1
 80a0f8a:	54d6      	strb	r6, [r2, r3]
 80a0f8c:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a0f8e:	e7f2      	b.n	80a0f76 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a0f90:	1b19      	subs	r1, r3, r4
 80a0f92:	440a      	add	r2, r1
 80a0f94:	1221      	asrs	r1, r4, #8
 80a0f96:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a0f9a:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a0f9e:	4618      	mov	r0, r3
 80a0fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0fa2 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a0fa2:	b538      	push	{r3, r4, r5, lr}
 80a0fa4:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a0fa6:	f000 ff70 	bl	80a1e8a <_ZN9TCPClient9connectedEv>
 80a0faa:	2800      	cmp	r0, #0
 80a0fac:	bf14      	ite	ne
 80a0fae:	2401      	movne	r4, #1
 80a0fb0:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a0fb2:	d102      	bne.n	80a0fba <_ZN4MQTT11isConnectedEv+0x18>
 80a0fb4:	4628      	mov	r0, r5
 80a0fb6:	f000 fea7 	bl	80a1d08 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a0fba:	4620      	mov	r0, r4
 80a0fbc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0fc0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a0fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0fc4:	b087      	sub	sp, #28
 80a0fc6:	4604      	mov	r4, r0
 80a0fc8:	4689      	mov	r9, r1
 80a0fca:	4617      	mov	r7, r2
 80a0fcc:	461e      	mov	r6, r3
 80a0fce:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a0fd2:	f7ff ffe6 	bl	80a0fa2 <_ZN4MQTT11isConnectedEv>
 80a0fd6:	4605      	mov	r5, r0
 80a0fd8:	2800      	cmp	r0, #0
 80a0fda:	f040 80bd 	bne.w	80a1158 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a0fde:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0fe0:	b939      	cbnz	r1, 80a0ff2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0fe2:	4603      	mov	r3, r0
 80a0fe4:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0fe8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0fea:	4620      	mov	r0, r4
 80a0fec:	f000 ffde 	bl	80a1fac <_ZN9TCPClient7connectEPKctm>
 80a0ff0:	e009      	b.n	80a1006 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a0ff2:	4668      	mov	r0, sp
 80a0ff4:	f001 fa48 	bl	80a2488 <_ZN9IPAddressC1EPKh>
 80a0ff8:	462b      	mov	r3, r5
 80a0ffa:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0ffe:	4669      	mov	r1, sp
 80a1000:	4620      	mov	r0, r4
 80a1002:	f000 fe9b 	bl	80a1d3c <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a1006:	2800      	cmp	r0, #0
 80a1008:	f000 80a2 	beq.w	80a1150 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a100c:	2301      	movs	r3, #1
 80a100e:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a1010:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a1014:	2b04      	cmp	r3, #4
 80a1016:	d115      	bne.n	80a1044 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a1018:	4b52      	ldr	r3, [pc, #328]	; (80a1164 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a101a:	6818      	ldr	r0, [r3, #0]
 80a101c:	889a      	ldrh	r2, [r3, #4]
 80a101e:	9000      	str	r0, [sp, #0]
 80a1020:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a1024:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a1026:	69e2      	ldr	r2, [r4, #28]
 80a1028:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a102a:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a102e:	f8c2 0005 	str.w	r0, [r2, #5]
 80a1032:	1d53      	adds	r3, r2, #5
 80a1034:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a1038:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a103c:	8099      	strh	r1, [r3, #4]
 80a103e:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a1040:	230c      	movs	r3, #12
 80a1042:	e012      	b.n	80a106a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a1044:	466a      	mov	r2, sp
 80a1046:	4b48      	ldr	r3, [pc, #288]	; (80a1168 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a1048:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a104c:	6818      	ldr	r0, [r3, #0]
 80a104e:	6859      	ldr	r1, [r3, #4]
 80a1050:	7a1b      	ldrb	r3, [r3, #8]
 80a1052:	c203      	stmia	r2!, {r0, r1}
 80a1054:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a1056:	466b      	mov	r3, sp
 80a1058:	cb03      	ldmia	r3!, {r0, r1}
 80a105a:	f8cc 0005 	str.w	r0, [ip, #5]
 80a105e:	f8cc 1009 	str.w	r1, [ip, #9]
 80a1062:	7813      	ldrb	r3, [r2, #0]
 80a1064:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a1068:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a106a:	f1b8 0f00 	cmp.w	r8, #0
 80a106e:	d00a      	beq.n	80a1086 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a1070:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a1074:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a1078:	0152      	lsls	r2, r2, #5
 80a107a:	f042 0206 	orr.w	r2, r2, #6
 80a107e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a1082:	b2d2      	uxtb	r2, r2
 80a1084:	e000      	b.n	80a1088 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a1086:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a1088:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a108c:	b909      	cbnz	r1, 80a1092 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a108e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a1092:	b12f      	cbz	r7, 80a10a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a1094:	b916      	cbnz	r6, 80a109c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a1096:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a109a:	e001      	b.n	80a10a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a109c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a10a0:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a10a2:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a10a4:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a10a6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a10a8:	69e1      	ldr	r1, [r4, #28]
 80a10aa:	1212      	asrs	r2, r2, #8
 80a10ac:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a10ae:	69e1      	ldr	r1, [r4, #28]
 80a10b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a10b2:	1c9a      	adds	r2, r3, #2
 80a10b4:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a10b6:	3303      	adds	r3, #3
 80a10b8:	69e2      	ldr	r2, [r4, #28]
 80a10ba:	4649      	mov	r1, r9
 80a10bc:	4620      	mov	r0, r4
 80a10be:	f7ff ff56 	bl	80a0f6e <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a10c2:	f1b8 0f00 	cmp.w	r8, #0
 80a10c6:	d00b      	beq.n	80a10e0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a10c8:	4603      	mov	r3, r0
 80a10ca:	69e2      	ldr	r2, [r4, #28]
 80a10cc:	4641      	mov	r1, r8
 80a10ce:	4620      	mov	r0, r4
 80a10d0:	f7ff ff4d 	bl	80a0f6e <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a10d4:	69e2      	ldr	r2, [r4, #28]
 80a10d6:	4603      	mov	r3, r0
 80a10d8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a10da:	4620      	mov	r0, r4
 80a10dc:	f7ff ff47 	bl	80a0f6e <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a10e0:	b167      	cbz	r7, 80a10fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a10e2:	4603      	mov	r3, r0
 80a10e4:	69e2      	ldr	r2, [r4, #28]
 80a10e6:	4639      	mov	r1, r7
 80a10e8:	4620      	mov	r0, r4
 80a10ea:	f7ff ff40 	bl	80a0f6e <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a10ee:	b12e      	cbz	r6, 80a10fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a10f0:	4603      	mov	r3, r0
 80a10f2:	69e2      	ldr	r2, [r4, #28]
 80a10f4:	4631      	mov	r1, r6
 80a10f6:	4620      	mov	r0, r4
 80a10f8:	f7ff ff39 	bl	80a0f6e <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a10fc:	1f43      	subs	r3, r0, #5
 80a10fe:	b29b      	uxth	r3, r3
 80a1100:	69e2      	ldr	r2, [r4, #28]
 80a1102:	2110      	movs	r1, #16
 80a1104:	4620      	mov	r0, r4
 80a1106:	f7ff feeb 	bl	80a0ee0 <_ZN4MQTT5writeEhPht>
 80a110a:	f000 faab 	bl	80a1664 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a110e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a1112:	6260      	str	r0, [r4, #36]	; 0x24
 80a1114:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a1116:	4620      	mov	r0, r4
 80a1118:	f000 fdba 	bl	80a1c90 <_ZN9TCPClient9availableEv>
 80a111c:	b940      	cbnz	r0, 80a1130 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a111e:	f000 faa1 	bl	80a1664 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a1122:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a1124:	1ac0      	subs	r0, r0, r3
 80a1126:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a1128:	4373      	muls	r3, r6
 80a112a:	4298      	cmp	r0, r3
 80a112c:	d9f3      	bls.n	80a1116 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a112e:	e00f      	b.n	80a1150 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a1130:	4669      	mov	r1, sp
 80a1132:	4620      	mov	r0, r4
 80a1134:	f7ff fe7c 	bl	80a0e30 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a1138:	2804      	cmp	r0, #4
 80a113a:	d109      	bne.n	80a1150 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a113c:	69e3      	ldr	r3, [r4, #28]
 80a113e:	78de      	ldrb	r6, [r3, #3]
 80a1140:	b936      	cbnz	r6, 80a1150 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a1142:	f000 fa8f 	bl	80a1664 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a1146:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a1148:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a114a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a114e:	e004      	b.n	80a115a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a1150:	4620      	mov	r0, r4
 80a1152:	f000 fdd9 	bl	80a1d08 <_ZN9TCPClient4stopEv>
 80a1156:	e000      	b.n	80a115a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a1158:	2500      	movs	r5, #0
}
 80a115a:	4628      	mov	r0, r5
 80a115c:	b007      	add	sp, #28
 80a115e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a1162:	bf00      	nop
 80a1164:	080a3443 	.word	0x080a3443
 80a1168:	080a344a 	.word	0x080a344a

080a116c <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a116c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a116e:	2304      	movs	r3, #4
 80a1170:	9305      	str	r3, [sp, #20]
 80a1172:	2301      	movs	r3, #1
 80a1174:	9304      	str	r3, [sp, #16]
 80a1176:	2300      	movs	r3, #0
 80a1178:	9303      	str	r3, [sp, #12]
 80a117a:	9302      	str	r3, [sp, #8]
 80a117c:	9301      	str	r3, [sp, #4]
 80a117e:	9300      	str	r3, [sp, #0]
 80a1180:	461a      	mov	r2, r3
 80a1182:	f7ff ff1d 	bl	80a0fc0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a1186:	b007      	add	sp, #28
 80a1188:	f85d fb04 	ldr.w	pc, [sp], #4

080a118c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a118c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1190:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a1192:	4604      	mov	r4, r0
 80a1194:	468b      	mov	fp, r1
 80a1196:	4691      	mov	r9, r2
 80a1198:	469a      	mov	sl, r3
 80a119a:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a119e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a11a2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a11a6:	f7ff fefc 	bl	80a0fa2 <_ZN4MQTT11isConnectedEv>
 80a11aa:	2800      	cmp	r0, #0
 80a11ac:	d04b      	beq.n	80a1246 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a11ae:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a11b2:	2100      	movs	r1, #0
 80a11b4:	69e0      	ldr	r0, [r4, #28]
 80a11b6:	f001 fe1c 	bl	80a2df2 <memset>

        length = writeString(topic, buffer, length);
 80a11ba:	2305      	movs	r3, #5
 80a11bc:	69e2      	ldr	r2, [r4, #28]
 80a11be:	4659      	mov	r1, fp
 80a11c0:	4620      	mov	r0, r4
 80a11c2:	f7ff fed4 	bl	80a0f6e <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a11c6:	1e6b      	subs	r3, r5, #1
 80a11c8:	2b01      	cmp	r3, #1
 80a11ca:	d812      	bhi.n	80a11f2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a11cc:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a11ce:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a11d0:	3301      	adds	r3, #1
 80a11d2:	b29b      	uxth	r3, r3
 80a11d4:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a11d6:	121b      	asrs	r3, r3, #8
 80a11d8:	5413      	strb	r3, [r2, r0]
 80a11da:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a11dc:	69e3      	ldr	r3, [r4, #28]
 80a11de:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a11e0:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a11e2:	3002      	adds	r0, #2
 80a11e4:	b280      	uxth	r0, r0
 80a11e6:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a11e8:	b11e      	cbz	r6, 80a11f2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a11ea:	8c23      	ldrh	r3, [r4, #32]
 80a11ec:	1c5a      	adds	r2, r3, #1
 80a11ee:	8422      	strh	r2, [r4, #32]
 80a11f0:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a11f2:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a11f4:	b291      	uxth	r1, r2
 80a11f6:	1883      	adds	r3, r0, r2
 80a11f8:	458a      	cmp	sl, r1
 80a11fa:	b29b      	uxth	r3, r3
 80a11fc:	d909      	bls.n	80a1212 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a11fe:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a1202:	3201      	adds	r2, #1
 80a1204:	429e      	cmp	r6, r3
 80a1206:	d904      	bls.n	80a1212 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a1208:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a120c:	69e1      	ldr	r1, [r4, #28]
 80a120e:	54ce      	strb	r6, [r1, r3]
 80a1210:	e7f0      	b.n	80a11f4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a1212:	f1b8 0f00 	cmp.w	r8, #0
 80a1216:	bf0c      	ite	eq
 80a1218:	2130      	moveq	r1, #48	; 0x30
 80a121a:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a121c:	b10f      	cbz	r7, 80a1222 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a121e:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a1222:	2d02      	cmp	r5, #2
 80a1224:	d102      	bne.n	80a122c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a1226:	f041 0104 	orr.w	r1, r1, #4
 80a122a:	e003      	b.n	80a1234 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a122c:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a122e:	bf08      	it	eq
 80a1230:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a1234:	4620      	mov	r0, r4
 80a1236:	3b05      	subs	r3, #5
 80a1238:	69e2      	ldr	r2, [r4, #28]
 80a123a:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a123c:	b001      	add	sp, #4
 80a123e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a1242:	f7ff be4d 	b.w	80a0ee0 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a1246:	b001      	add	sp, #4
 80a1248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a124c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a124c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a124e:	9c08      	ldr	r4, [sp, #32]
 80a1250:	9403      	str	r4, [sp, #12]
 80a1252:	2400      	movs	r4, #0
 80a1254:	9402      	str	r4, [sp, #8]
 80a1256:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a125a:	9401      	str	r4, [sp, #4]
 80a125c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a1260:	9400      	str	r4, [sp, #0]
 80a1262:	f7ff ff93 	bl	80a118c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a1266:	b004      	add	sp, #16
 80a1268:	bd10      	pop	{r4, pc}

080a126a <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a126a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a126c:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a126e:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a1270:	460e      	mov	r6, r1
 80a1272:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a1274:	f001 fdf8 	bl	80a2e68 <strlen>
 80a1278:	2300      	movs	r3, #0
 80a127a:	9302      	str	r3, [sp, #8]
 80a127c:	9301      	str	r3, [sp, #4]
 80a127e:	9300      	str	r3, [sp, #0]
 80a1280:	4622      	mov	r2, r4
 80a1282:	4603      	mov	r3, r0
 80a1284:	4631      	mov	r1, r6
 80a1286:	4628      	mov	r0, r5
 80a1288:	f7ff ffe0 	bl	80a124c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a128c:	b004      	add	sp, #16
 80a128e:	bd70      	pop	{r4, r5, r6, pc}

080a1290 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
 80a1290:	b538      	push	{r3, r4, r5, lr}
 80a1292:	4604      	mov	r4, r0
 80a1294:	460d      	mov	r5, r1
    if (isConnected()) {
 80a1296:	f7ff fe84 	bl	80a0fa2 <_ZN4MQTT11isConnectedEv>
 80a129a:	b190      	cbz	r0, 80a12c2 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a129c:	69e3      	ldr	r3, [r4, #28]
 80a129e:	2262      	movs	r2, #98	; 0x62
 80a12a0:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a12a2:	69e3      	ldr	r3, [r4, #28]
 80a12a4:	2202      	movs	r2, #2
 80a12a6:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a12a8:	69e3      	ldr	r3, [r4, #28]
 80a12aa:	122a      	asrs	r2, r5, #8
 80a12ac:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a12ae:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a12b0:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a12b2:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a12b4:	69e1      	ldr	r1, [r4, #28]
 80a12b6:	4620      	mov	r0, r4
 80a12b8:	f000 fc47 	bl	80a1b4a <_ZN9TCPClient5writeEPKhj>
 80a12bc:	3000      	adds	r0, #0
 80a12be:	bf18      	it	ne
 80a12c0:	2001      	movne	r0, #1
    }
    return false;
}
 80a12c2:	bd38      	pop	{r3, r4, r5, pc}

080a12c4 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 80a12c4:	b538      	push	{r3, r4, r5, lr}
 80a12c6:	4604      	mov	r4, r0
 80a12c8:	460d      	mov	r5, r1
    if (isConnected()) {
 80a12ca:	f7ff fe6a 	bl	80a0fa2 <_ZN4MQTT11isConnectedEv>
 80a12ce:	b190      	cbz	r0, 80a12f6 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a12d0:	69e3      	ldr	r3, [r4, #28]
 80a12d2:	2272      	movs	r2, #114	; 0x72
 80a12d4:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a12d6:	69e3      	ldr	r3, [r4, #28]
 80a12d8:	2202      	movs	r2, #2
 80a12da:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a12dc:	69e3      	ldr	r3, [r4, #28]
 80a12de:	122a      	asrs	r2, r5, #8
 80a12e0:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a12e2:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a12e4:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a12e6:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a12e8:	69e1      	ldr	r1, [r4, #28]
 80a12ea:	4620      	mov	r0, r4
 80a12ec:	f000 fc2d 	bl	80a1b4a <_ZN9TCPClient5writeEPKhj>
 80a12f0:	3000      	adds	r0, #0
 80a12f2:	bf18      	it	ne
 80a12f4:	2001      	movne	r0, #1
    }
    return false;
}
 80a12f6:	bd38      	pop	{r3, r4, r5, pc}

080a12f8 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a12f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a12fc:	b083      	sub	sp, #12
 80a12fe:	af00      	add	r7, sp, #0
 80a1300:	4604      	mov	r4, r0
    if (isConnected()) {
 80a1302:	f7ff fe4e 	bl	80a0fa2 <_ZN4MQTT11isConnectedEv>
 80a1306:	4681      	mov	r9, r0
 80a1308:	2800      	cmp	r0, #0
 80a130a:	f000 80f6 	beq.w	80a14fa <_ZN4MQTT4loopEv+0x202>
 80a130e:	f000 f9a9 	bl	80a1664 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a1312:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a1314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1318:	4353      	muls	r3, r2
 80a131a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a131c:	4605      	mov	r5, r0
 80a131e:	1a82      	subs	r2, r0, r2
 80a1320:	429a      	cmp	r2, r3
 80a1322:	d803      	bhi.n	80a132c <_ZN4MQTT4loopEv+0x34>
 80a1324:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a1326:	1a82      	subs	r2, r0, r2
 80a1328:	4293      	cmp	r3, r2
 80a132a:	d217      	bcs.n	80a135c <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a132c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a1330:	b12b      	cbz	r3, 80a133e <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a1332:	4620      	mov	r0, r4
 80a1334:	f000 fce8 	bl	80a1d08 <_ZN9TCPClient4stopEv>
                return false;
 80a1338:	f04f 0900 	mov.w	r9, #0
 80a133c:	e0dd      	b.n	80a14fa <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a133e:	69e2      	ldr	r2, [r4, #28]
 80a1340:	21c0      	movs	r1, #192	; 0xc0
 80a1342:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a1344:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a1346:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a1348:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a134a:	69e1      	ldr	r1, [r4, #28]
 80a134c:	2202      	movs	r2, #2
 80a134e:	f000 fbfc 	bl	80a1b4a <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a1352:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a1354:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a1356:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a1358:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a135c:	4620      	mov	r0, r4
 80a135e:	f000 fc97 	bl	80a1c90 <_ZN9TCPClient9availableEv>
 80a1362:	2800      	cmp	r0, #0
 80a1364:	f000 80c9 	beq.w	80a14fa <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a1368:	1df9      	adds	r1, r7, #7
 80a136a:	4620      	mov	r0, r4
 80a136c:	f7ff fd60 	bl	80a0e30 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a1370:	4602      	mov	r2, r0
 80a1372:	2800      	cmp	r0, #0
 80a1374:	f000 80c1 	beq.w	80a14fa <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a1378:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a137a:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a137c:	7818      	ldrb	r0, [r3, #0]
 80a137e:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a1382:	2930      	cmp	r1, #48	; 0x30
 80a1384:	d17d      	bne.n	80a1482 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 80a1386:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a138a:	f1bb 0f00 	cmp.w	fp, #0
 80a138e:	f000 80b4 	beq.w	80a14fa <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a1392:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a1396:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a1398:	eb03 000c 	add.w	r0, r3, ip
 80a139c:	7881      	ldrb	r1, [r0, #2]
 80a139e:	f890 e001 	ldrb.w	lr, [r0, #1]
 80a13a2:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 80a13a6:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 80a13aa:	f10e 0108 	add.w	r1, lr, #8
 80a13ae:	f021 0107 	bic.w	r1, r1, #7
 80a13b2:	ebad 0d01 	sub.w	sp, sp, r1
 80a13b6:	4668      	mov	r0, sp
 80a13b8:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a13ba:	b28e      	uxth	r6, r1
 80a13bc:	45b6      	cmp	lr, r6
 80a13be:	d906      	bls.n	80a13ce <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a13c0:	eb0c 0601 	add.w	r6, ip, r1
 80a13c4:	441e      	add	r6, r3
 80a13c6:	78f6      	ldrb	r6, [r6, #3]
 80a13c8:	5446      	strb	r6, [r0, r1]
 80a13ca:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a13cc:	e7f5      	b.n	80a13ba <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a13ce:	2100      	movs	r1, #0
 80a13d0:	f800 100e 	strb.w	r1, [r0, lr]
 80a13d4:	781e      	ldrb	r6, [r3, #0]
 80a13d6:	f10c 0103 	add.w	r1, ip, #3
 80a13da:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a13de:	2e02      	cmp	r6, #2
 80a13e0:	ebcc 0202 	rsb	r2, ip, r2
 80a13e4:	d11e      	bne.n	80a1424 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a13e6:	4471      	add	r1, lr
 80a13e8:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a13ec:	4419      	add	r1, r3
 80a13ee:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a13f0:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a13f4:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a13f8:	f10c 0105 	add.w	r1, ip, #5
 80a13fc:	4471      	add	r1, lr
 80a13fe:	3a05      	subs	r2, #5
 80a1400:	4419      	add	r1, r3
 80a1402:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a1404:	69e3      	ldr	r3, [r4, #28]
 80a1406:	2240      	movs	r2, #64	; 0x40
 80a1408:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a140a:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a140c:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 80a1410:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a1412:	69e3      	ldr	r3, [r4, #28]
 80a1414:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a1418:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a141a:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a141c:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a141e:	f883 8003 	strb.w	r8, [r3, #3]
 80a1422:	e020      	b.n	80a1466 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a1424:	2e04      	cmp	r6, #4
 80a1426:	d124      	bne.n	80a1472 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1428:	4471      	add	r1, lr
 80a142a:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a142e:	4419      	add	r1, r3
 80a1430:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a1432:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1436:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a143a:	f10c 0105 	add.w	r1, ip, #5
 80a143e:	4471      	add	r1, lr
 80a1440:	3a05      	subs	r2, #5
 80a1442:	4419      	add	r1, r3
 80a1444:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a1446:	69e3      	ldr	r3, [r4, #28]
 80a1448:	2250      	movs	r2, #80	; 0x50
 80a144a:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a144c:	69e3      	ldr	r3, [r4, #28]
 80a144e:	2202      	movs	r2, #2
 80a1450:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a1452:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1454:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 80a1458:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a145c:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 80a145e:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 80a1460:	69e3      	ldr	r3, [r4, #28]
 80a1462:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 80a1466:	69e1      	ldr	r1, [r4, #28]
 80a1468:	4620      	mov	r0, r4
 80a146a:	f000 fb6e 	bl	80a1b4a <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 80a146e:	6265      	str	r5, [r4, #36]	; 0x24
 80a1470:	e005      	b.n	80a147e <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a1472:	3a03      	subs	r2, #3
 80a1474:	4471      	add	r1, lr
 80a1476:	ebce 0202 	rsb	r2, lr, r2
 80a147a:	4419      	add	r1, r3
 80a147c:	47d8      	blx	fp
 80a147e:	46d5      	mov	sp, sl
 80a1480:	e03b      	b.n	80a14fa <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 80a1482:	2950      	cmp	r1, #80	; 0x50
 80a1484:	d108      	bne.n	80a1498 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 80a1486:	7899      	ldrb	r1, [r3, #2]
 80a1488:	78db      	ldrb	r3, [r3, #3]
 80a148a:	4620      	mov	r0, r4
 80a148c:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a1490:	b289      	uxth	r1, r1
 80a1492:	f7ff fefd 	bl	80a1290 <_ZN4MQTT14publishReleaseEt>
 80a1496:	e030      	b.n	80a14fa <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 80a1498:	2940      	cmp	r1, #64	; 0x40
 80a149a:	d00c      	beq.n	80a14b6 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 80a149c:	2960      	cmp	r1, #96	; 0x60
 80a149e:	d108      	bne.n	80a14b2 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 80a14a0:	7899      	ldrb	r1, [r3, #2]
 80a14a2:	78db      	ldrb	r3, [r3, #3]
 80a14a4:	4620      	mov	r0, r4
 80a14a6:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a14aa:	b289      	uxth	r1, r1
 80a14ac:	f7ff ff0a 	bl	80a12c4 <_ZN4MQTT15publishCompleteEt>
 80a14b0:	e023      	b.n	80a14fa <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 80a14b2:	2970      	cmp	r1, #112	; 0x70
 80a14b4:	d10d      	bne.n	80a14d2 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 80a14b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a14b8:	b1f9      	cbz	r1, 80a14fa <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a14ba:	2a04      	cmp	r2, #4
 80a14bc:	d11d      	bne.n	80a14fa <_ZN4MQTT4loopEv+0x202>
 80a14be:	f010 0f06 	tst.w	r0, #6
 80a14c2:	d11a      	bne.n	80a14fa <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 80a14c4:	7898      	ldrb	r0, [r3, #2]
 80a14c6:	78db      	ldrb	r3, [r3, #3]
 80a14c8:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a14cc:	b280      	uxth	r0, r0
 80a14ce:	4788      	blx	r1
 80a14d0:	e013      	b.n	80a14fa <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 80a14d2:	2990      	cmp	r1, #144	; 0x90
 80a14d4:	d011      	beq.n	80a14fa <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a14d6:	29c0      	cmp	r1, #192	; 0xc0
 80a14d8:	d10a      	bne.n	80a14f0 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 80a14da:	22d0      	movs	r2, #208	; 0xd0
 80a14dc:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a14de:	69e3      	ldr	r3, [r4, #28]
 80a14e0:	2200      	movs	r2, #0
 80a14e2:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a14e4:	69e1      	ldr	r1, [r4, #28]
 80a14e6:	2202      	movs	r2, #2
 80a14e8:	4620      	mov	r0, r4
 80a14ea:	f000 fb2e 	bl	80a1b4a <_ZN9TCPClient5writeEPKhj>
 80a14ee:	e004      	b.n	80a14fa <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 80a14f0:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 80a14f2:	bf04      	itt	eq
 80a14f4:	2300      	moveq	r3, #0
 80a14f6:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a14fa:	4648      	mov	r0, r9
 80a14fc:	370c      	adds	r7, #12
 80a14fe:	46bd      	mov	sp, r7
 80a1500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1504 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a1504:	b570      	push	{r4, r5, r6, lr}
 80a1506:	4604      	mov	r4, r0
 80a1508:	460e      	mov	r6, r1
 80a150a:	4615      	mov	r5, r2

    if (isConnected()) {
 80a150c:	f7ff fd49 	bl	80a0fa2 <_ZN4MQTT11isConnectedEv>
 80a1510:	b1e8      	cbz	r0, 80a154e <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 80a1512:	8c23      	ldrh	r3, [r4, #32]
 80a1514:	3301      	adds	r3, #1
 80a1516:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a1518:	b903      	cbnz	r3, 80a151c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
 80a151a:	2301      	movs	r3, #1
 80a151c:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 80a151e:	8c23      	ldrh	r3, [r4, #32]
 80a1520:	69e2      	ldr	r2, [r4, #28]
 80a1522:	121b      	asrs	r3, r3, #8
 80a1524:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a1526:	69e3      	ldr	r3, [r4, #28]
 80a1528:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a152a:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 80a152c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a152e:	69e2      	ldr	r2, [r4, #28]
 80a1530:	2307      	movs	r3, #7
 80a1532:	4620      	mov	r0, r4
 80a1534:	f7ff fd1b 	bl	80a0f6e <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a1538:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a153a:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 80a153c:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a153e:	1f03      	subs	r3, r0, #4
 80a1540:	69e2      	ldr	r2, [r4, #28]
 80a1542:	4620      	mov	r0, r4
    }
    return false;
}
 80a1544:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a1548:	b29b      	uxth	r3, r3
 80a154a:	f7ff bcc9 	b.w	80a0ee0 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a154e:	bd70      	pop	{r4, r5, r6, pc}

080a1550 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
 80a1550:	2200      	movs	r2, #0
 80a1552:	f7ff bfd7 	b.w	80a1504 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

080a1556 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a1556:	b510      	push	{r4, lr}
 80a1558:	4604      	mov	r4, r0
    if (isConnected()) {
 80a155a:	f7ff fd22 	bl	80a0fa2 <_ZN4MQTT11isConnectedEv>
 80a155e:	b110      	cbz	r0, 80a1566 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a1560:	4620      	mov	r0, r4
 80a1562:	f7ff fcf0 	bl	80a0f46 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a1566:	69e0      	ldr	r0, [r4, #28]
 80a1568:	b108      	cbz	r0, 80a156e <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a156a:	f7fe fd9c 	bl	80a00a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a156e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a1572:	f000 fd51 	bl	80a2018 <_ZN6StringD1Ev>
 80a1576:	4620      	mov	r0, r4
 80a1578:	f7ff fbe6 	bl	80a0d48 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a157c:	4620      	mov	r0, r4
 80a157e:	bd10      	pop	{r4, pc}

080a1580 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a1580:	f000 b800 	b.w	80a1584 <HAL_Pin_Map>

080a1584 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1584:	b508      	push	{r3, lr}
 80a1586:	4b02      	ldr	r3, [pc, #8]	; (80a1590 <HAL_Pin_Map+0xc>)
 80a1588:	681b      	ldr	r3, [r3, #0]
 80a158a:	681b      	ldr	r3, [r3, #0]
 80a158c:	9301      	str	r3, [sp, #4]
 80a158e:	bd08      	pop	{r3, pc}
 80a1590:	080601b0 	.word	0x080601b0

080a1594 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1594:	b508      	push	{r3, lr}
 80a1596:	4b02      	ldr	r3, [pc, #8]	; (80a15a0 <HAL_Pin_Mode+0xc>)
 80a1598:	681b      	ldr	r3, [r3, #0]
 80a159a:	689b      	ldr	r3, [r3, #8]
 80a159c:	9301      	str	r3, [sp, #4]
 80a159e:	bd08      	pop	{r3, pc}
 80a15a0:	080601b0 	.word	0x080601b0

080a15a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a15a4:	b508      	push	{r3, lr}
 80a15a6:	4b02      	ldr	r3, [pc, #8]	; (80a15b0 <HAL_Get_Pin_Mode+0xc>)
 80a15a8:	681b      	ldr	r3, [r3, #0]
 80a15aa:	68db      	ldr	r3, [r3, #12]
 80a15ac:	9301      	str	r3, [sp, #4]
 80a15ae:	bd08      	pop	{r3, pc}
 80a15b0:	080601b0 	.word	0x080601b0

080a15b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a15b4:	b508      	push	{r3, lr}
 80a15b6:	4b02      	ldr	r3, [pc, #8]	; (80a15c0 <HAL_GPIO_Write+0xc>)
 80a15b8:	681b      	ldr	r3, [r3, #0]
 80a15ba:	691b      	ldr	r3, [r3, #16]
 80a15bc:	9301      	str	r3, [sp, #4]
 80a15be:	bd08      	pop	{r3, pc}
 80a15c0:	080601b0 	.word	0x080601b0

080a15c4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a15c4:	b508      	push	{r3, lr}
 80a15c6:	4b02      	ldr	r3, [pc, #8]	; (80a15d0 <HAL_SPI_Begin+0xc>)
 80a15c8:	681b      	ldr	r3, [r3, #0]
 80a15ca:	681b      	ldr	r3, [r3, #0]
 80a15cc:	9301      	str	r3, [sp, #4]
 80a15ce:	bd08      	pop	{r3, pc}
 80a15d0:	080601b4 	.word	0x080601b4

080a15d4 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 80a15d4:	b508      	push	{r3, lr}
 80a15d6:	4b02      	ldr	r3, [pc, #8]	; (80a15e0 <HAL_SPI_Set_Bit_Order+0xc>)
 80a15d8:	681b      	ldr	r3, [r3, #0]
 80a15da:	689b      	ldr	r3, [r3, #8]
 80a15dc:	9301      	str	r3, [sp, #4]
 80a15de:	bd08      	pop	{r3, pc}
 80a15e0:	080601b4 	.word	0x080601b4

080a15e4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 80a15e4:	b508      	push	{r3, lr}
 80a15e6:	4b02      	ldr	r3, [pc, #8]	; (80a15f0 <HAL_SPI_Set_Data_Mode+0xc>)
 80a15e8:	681b      	ldr	r3, [r3, #0]
 80a15ea:	68db      	ldr	r3, [r3, #12]
 80a15ec:	9301      	str	r3, [sp, #4]
 80a15ee:	bd08      	pop	{r3, pc}
 80a15f0:	080601b4 	.word	0x080601b4

080a15f4 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80a15f4:	b508      	push	{r3, lr}
 80a15f6:	4b02      	ldr	r3, [pc, #8]	; (80a1600 <HAL_SPI_Set_Clock_Divider+0xc>)
 80a15f8:	681b      	ldr	r3, [r3, #0]
 80a15fa:	691b      	ldr	r3, [r3, #16]
 80a15fc:	9301      	str	r3, [sp, #4]
 80a15fe:	bd08      	pop	{r3, pc}
 80a1600:	080601b4 	.word	0x080601b4

080a1604 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a1604:	b508      	push	{r3, lr}
 80a1606:	4b02      	ldr	r3, [pc, #8]	; (80a1610 <HAL_SPI_Send_Receive_Data+0xc>)
 80a1608:	681b      	ldr	r3, [r3, #0]
 80a160a:	695b      	ldr	r3, [r3, #20]
 80a160c:	9301      	str	r3, [sp, #4]
 80a160e:	bd08      	pop	{r3, pc}
 80a1610:	080601b4 	.word	0x080601b4

080a1614 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1614:	b508      	push	{r3, lr}
 80a1616:	4b02      	ldr	r3, [pc, #8]	; (80a1620 <HAL_SPI_Init+0xc>)
 80a1618:	681b      	ldr	r3, [r3, #0]
 80a161a:	69db      	ldr	r3, [r3, #28]
 80a161c:	9301      	str	r3, [sp, #4]
 80a161e:	bd08      	pop	{r3, pc}
 80a1620:	080601b4 	.word	0x080601b4

080a1624 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1624:	b508      	push	{r3, lr}
 80a1626:	4b02      	ldr	r3, [pc, #8]	; (80a1630 <HAL_SPI_Is_Enabled+0xc>)
 80a1628:	681b      	ldr	r3, [r3, #0]
 80a162a:	6a1b      	ldr	r3, [r3, #32]
 80a162c:	9301      	str	r3, [sp, #4]
 80a162e:	bd08      	pop	{r3, pc}
 80a1630:	080601b4 	.word	0x080601b4

080a1634 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a1634:	b508      	push	{r3, lr}
 80a1636:	4b02      	ldr	r3, [pc, #8]	; (80a1640 <HAL_SPI_Info+0xc>)
 80a1638:	681b      	ldr	r3, [r3, #0]
 80a163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a163c:	9301      	str	r3, [sp, #4]
 80a163e:	bd08      	pop	{r3, pc}
 80a1640:	080601b4 	.word	0x080601b4

080a1644 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1644:	b508      	push	{r3, lr}
 80a1646:	4b02      	ldr	r3, [pc, #8]	; (80a1650 <HAL_RNG_GetRandomNumber+0xc>)
 80a1648:	681b      	ldr	r3, [r3, #0]
 80a164a:	685b      	ldr	r3, [r3, #4]
 80a164c:	9301      	str	r3, [sp, #4]
 80a164e:	bd08      	pop	{r3, pc}
 80a1650:	0806019c 	.word	0x0806019c

080a1654 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1654:	b508      	push	{r3, lr}
 80a1656:	4b02      	ldr	r3, [pc, #8]	; (80a1660 <HAL_Delay_Microseconds+0xc>)
 80a1658:	681b      	ldr	r3, [r3, #0]
 80a165a:	68db      	ldr	r3, [r3, #12]
 80a165c:	9301      	str	r3, [sp, #4]
 80a165e:	bd08      	pop	{r3, pc}
 80a1660:	0806019c 	.word	0x0806019c

080a1664 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1664:	b508      	push	{r3, lr}
 80a1666:	4b02      	ldr	r3, [pc, #8]	; (80a1670 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1668:	681b      	ldr	r3, [r3, #0]
 80a166a:	695b      	ldr	r3, [r3, #20]
 80a166c:	9301      	str	r3, [sp, #4]
 80a166e:	bd08      	pop	{r3, pc}
 80a1670:	0806019c 	.word	0x0806019c

080a1674 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1674:	b508      	push	{r3, lr}
 80a1676:	4b02      	ldr	r3, [pc, #8]	; (80a1680 <os_mutex_create+0xc>)
 80a1678:	681b      	ldr	r3, [r3, #0]
 80a167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a167c:	9301      	str	r3, [sp, #4]
 80a167e:	bd08      	pop	{r3, pc}
 80a1680:	080601d0 	.word	0x080601d0

080a1684 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1684:	b508      	push	{r3, lr}
 80a1686:	4b02      	ldr	r3, [pc, #8]	; (80a1690 <HAL_USART_Init+0xc>)
 80a1688:	681b      	ldr	r3, [r3, #0]
 80a168a:	699b      	ldr	r3, [r3, #24]
 80a168c:	9301      	str	r3, [sp, #4]
 80a168e:	bd08      	pop	{r3, pc}
 80a1690:	080601c4 	.word	0x080601c4

080a1694 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1694:	b508      	push	{r3, lr}
 80a1696:	4b02      	ldr	r3, [pc, #8]	; (80a16a0 <HAL_USART_Write_Data+0xc>)
 80a1698:	681b      	ldr	r3, [r3, #0]
 80a169a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a169c:	9301      	str	r3, [sp, #4]
 80a169e:	bd08      	pop	{r3, pc}
 80a16a0:	080601c4 	.word	0x080601c4

080a16a4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a16a4:	b508      	push	{r3, lr}
 80a16a6:	4b02      	ldr	r3, [pc, #8]	; (80a16b0 <HAL_USART_Available_Data+0xc>)
 80a16a8:	681b      	ldr	r3, [r3, #0]
 80a16aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a16ac:	9301      	str	r3, [sp, #4]
 80a16ae:	bd08      	pop	{r3, pc}
 80a16b0:	080601c4 	.word	0x080601c4

080a16b4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a16b4:	b508      	push	{r3, lr}
 80a16b6:	4b02      	ldr	r3, [pc, #8]	; (80a16c0 <HAL_USART_Read_Data+0xc>)
 80a16b8:	681b      	ldr	r3, [r3, #0]
 80a16ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a16bc:	9301      	str	r3, [sp, #4]
 80a16be:	bd08      	pop	{r3, pc}
 80a16c0:	080601c4 	.word	0x080601c4

080a16c4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a16c4:	b508      	push	{r3, lr}
 80a16c6:	4b02      	ldr	r3, [pc, #8]	; (80a16d0 <HAL_USART_Peek_Data+0xc>)
 80a16c8:	681b      	ldr	r3, [r3, #0]
 80a16ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a16cc:	9301      	str	r3, [sp, #4]
 80a16ce:	bd08      	pop	{r3, pc}
 80a16d0:	080601c4 	.word	0x080601c4

080a16d4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a16d4:	b508      	push	{r3, lr}
 80a16d6:	4b02      	ldr	r3, [pc, #8]	; (80a16e0 <HAL_USART_Flush_Data+0xc>)
 80a16d8:	681b      	ldr	r3, [r3, #0]
 80a16da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a16dc:	9301      	str	r3, [sp, #4]
 80a16de:	bd08      	pop	{r3, pc}
 80a16e0:	080601c4 	.word	0x080601c4

080a16e4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a16e4:	b508      	push	{r3, lr}
 80a16e6:	4b02      	ldr	r3, [pc, #8]	; (80a16f0 <HAL_USART_Is_Enabled+0xc>)
 80a16e8:	681b      	ldr	r3, [r3, #0]
 80a16ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a16ec:	9301      	str	r3, [sp, #4]
 80a16ee:	bd08      	pop	{r3, pc}
 80a16f0:	080601c4 	.word	0x080601c4

080a16f4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a16f4:	b508      	push	{r3, lr}
 80a16f6:	4b02      	ldr	r3, [pc, #8]	; (80a1700 <HAL_USART_Available_Data_For_Write+0xc>)
 80a16f8:	681b      	ldr	r3, [r3, #0]
 80a16fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a16fc:	9301      	str	r3, [sp, #4]
 80a16fe:	bd08      	pop	{r3, pc}
 80a1700:	080601c4 	.word	0x080601c4

080a1704 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1704:	b508      	push	{r3, lr}
 80a1706:	4b02      	ldr	r3, [pc, #8]	; (80a1710 <HAL_I2C_Begin+0xc>)
 80a1708:	681b      	ldr	r3, [r3, #0]
 80a170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a170c:	9301      	str	r3, [sp, #4]
 80a170e:	bd08      	pop	{r3, pc}
 80a1710:	080601ac 	.word	0x080601ac

080a1714 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1714:	b508      	push	{r3, lr}
 80a1716:	4b02      	ldr	r3, [pc, #8]	; (80a1720 <HAL_I2C_Begin_Transmission+0xc>)
 80a1718:	681b      	ldr	r3, [r3, #0]
 80a171a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a171c:	9301      	str	r3, [sp, #4]
 80a171e:	bd08      	pop	{r3, pc}
 80a1720:	080601ac 	.word	0x080601ac

080a1724 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1724:	b508      	push	{r3, lr}
 80a1726:	4b02      	ldr	r3, [pc, #8]	; (80a1730 <HAL_I2C_End_Transmission+0xc>)
 80a1728:	681b      	ldr	r3, [r3, #0]
 80a172a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a172c:	9301      	str	r3, [sp, #4]
 80a172e:	bd08      	pop	{r3, pc}
 80a1730:	080601ac 	.word	0x080601ac

080a1734 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1734:	b508      	push	{r3, lr}
 80a1736:	4b02      	ldr	r3, [pc, #8]	; (80a1740 <HAL_I2C_Write_Data+0xc>)
 80a1738:	681b      	ldr	r3, [r3, #0]
 80a173a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a173c:	9301      	str	r3, [sp, #4]
 80a173e:	bd08      	pop	{r3, pc}
 80a1740:	080601ac 	.word	0x080601ac

080a1744 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1744:	b508      	push	{r3, lr}
 80a1746:	4b02      	ldr	r3, [pc, #8]	; (80a1750 <HAL_I2C_Available_Data+0xc>)
 80a1748:	681b      	ldr	r3, [r3, #0]
 80a174a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a174c:	9301      	str	r3, [sp, #4]
 80a174e:	bd08      	pop	{r3, pc}
 80a1750:	080601ac 	.word	0x080601ac

080a1754 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1754:	b508      	push	{r3, lr}
 80a1756:	4b02      	ldr	r3, [pc, #8]	; (80a1760 <HAL_I2C_Read_Data+0xc>)
 80a1758:	681b      	ldr	r3, [r3, #0]
 80a175a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a175c:	9301      	str	r3, [sp, #4]
 80a175e:	bd08      	pop	{r3, pc}
 80a1760:	080601ac 	.word	0x080601ac

080a1764 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1764:	b508      	push	{r3, lr}
 80a1766:	4b02      	ldr	r3, [pc, #8]	; (80a1770 <HAL_I2C_Peek_Data+0xc>)
 80a1768:	681b      	ldr	r3, [r3, #0]
 80a176a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a176c:	9301      	str	r3, [sp, #4]
 80a176e:	bd08      	pop	{r3, pc}
 80a1770:	080601ac 	.word	0x080601ac

080a1774 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1774:	b508      	push	{r3, lr}
 80a1776:	4b02      	ldr	r3, [pc, #8]	; (80a1780 <HAL_I2C_Flush_Data+0xc>)
 80a1778:	681b      	ldr	r3, [r3, #0]
 80a177a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a177c:	9301      	str	r3, [sp, #4]
 80a177e:	bd08      	pop	{r3, pc}
 80a1780:	080601ac 	.word	0x080601ac

080a1784 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1784:	b508      	push	{r3, lr}
 80a1786:	4b02      	ldr	r3, [pc, #8]	; (80a1790 <HAL_I2C_Is_Enabled+0xc>)
 80a1788:	681b      	ldr	r3, [r3, #0]
 80a178a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a178c:	9301      	str	r3, [sp, #4]
 80a178e:	bd08      	pop	{r3, pc}
 80a1790:	080601ac 	.word	0x080601ac

080a1794 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1794:	b508      	push	{r3, lr}
 80a1796:	4b03      	ldr	r3, [pc, #12]	; (80a17a4 <HAL_I2C_Init+0x10>)
 80a1798:	681b      	ldr	r3, [r3, #0]
 80a179a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a179e:	9301      	str	r3, [sp, #4]
 80a17a0:	bd08      	pop	{r3, pc}
 80a17a2:	0000      	.short	0x0000
 80a17a4:	080601ac 	.word	0x080601ac

080a17a8 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a17a8:	b508      	push	{r3, lr}
 80a17aa:	4b02      	ldr	r3, [pc, #8]	; (80a17b4 <socket_active_status+0xc>)
 80a17ac:	681b      	ldr	r3, [r3, #0]
 80a17ae:	681b      	ldr	r3, [r3, #0]
 80a17b0:	9301      	str	r3, [sp, #4]
 80a17b2:	bd08      	pop	{r3, pc}
 80a17b4:	080601bc 	.word	0x080601bc

080a17b8 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a17b8:	b508      	push	{r3, lr}
 80a17ba:	4b02      	ldr	r3, [pc, #8]	; (80a17c4 <socket_handle_valid+0xc>)
 80a17bc:	681b      	ldr	r3, [r3, #0]
 80a17be:	685b      	ldr	r3, [r3, #4]
 80a17c0:	9301      	str	r3, [sp, #4]
 80a17c2:	bd08      	pop	{r3, pc}
 80a17c4:	080601bc 	.word	0x080601bc

080a17c8 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a17c8:	b508      	push	{r3, lr}
 80a17ca:	4b02      	ldr	r3, [pc, #8]	; (80a17d4 <socket_create+0xc>)
 80a17cc:	681b      	ldr	r3, [r3, #0]
 80a17ce:	689b      	ldr	r3, [r3, #8]
 80a17d0:	9301      	str	r3, [sp, #4]
 80a17d2:	bd08      	pop	{r3, pc}
 80a17d4:	080601bc 	.word	0x080601bc

080a17d8 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a17d8:	b508      	push	{r3, lr}
 80a17da:	4b02      	ldr	r3, [pc, #8]	; (80a17e4 <socket_connect+0xc>)
 80a17dc:	681b      	ldr	r3, [r3, #0]
 80a17de:	68db      	ldr	r3, [r3, #12]
 80a17e0:	9301      	str	r3, [sp, #4]
 80a17e2:	bd08      	pop	{r3, pc}
 80a17e4:	080601bc 	.word	0x080601bc

080a17e8 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a17e8:	b508      	push	{r3, lr}
 80a17ea:	4b02      	ldr	r3, [pc, #8]	; (80a17f4 <socket_receive+0xc>)
 80a17ec:	681b      	ldr	r3, [r3, #0]
 80a17ee:	691b      	ldr	r3, [r3, #16]
 80a17f0:	9301      	str	r3, [sp, #4]
 80a17f2:	bd08      	pop	{r3, pc}
 80a17f4:	080601bc 	.word	0x080601bc

080a17f8 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a17f8:	b508      	push	{r3, lr}
 80a17fa:	4b02      	ldr	r3, [pc, #8]	; (80a1804 <socket_close+0xc>)
 80a17fc:	681b      	ldr	r3, [r3, #0]
 80a17fe:	6a1b      	ldr	r3, [r3, #32]
 80a1800:	9301      	str	r3, [sp, #4]
 80a1802:	bd08      	pop	{r3, pc}
 80a1804:	080601bc 	.word	0x080601bc

080a1808 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1808:	b508      	push	{r3, lr}
 80a180a:	4b02      	ldr	r3, [pc, #8]	; (80a1814 <socket_handle_invalid+0xc>)
 80a180c:	681b      	ldr	r3, [r3, #0]
 80a180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1810:	9301      	str	r3, [sp, #4]
 80a1812:	bd08      	pop	{r3, pc}
 80a1814:	080601bc 	.word	0x080601bc

080a1818 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a1818:	b508      	push	{r3, lr}
 80a181a:	4b02      	ldr	r3, [pc, #8]	; (80a1824 <socket_send_ex+0xc>)
 80a181c:	681b      	ldr	r3, [r3, #0]
 80a181e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1820:	9301      	str	r3, [sp, #4]
 80a1822:	bd08      	pop	{r3, pc}
 80a1824:	080601bc 	.word	0x080601bc

080a1828 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1828:	b508      	push	{r3, lr}
 80a182a:	4b02      	ldr	r3, [pc, #8]	; (80a1834 <HAL_USB_USART_Init+0xc>)
 80a182c:	681b      	ldr	r3, [r3, #0]
 80a182e:	681b      	ldr	r3, [r3, #0]
 80a1830:	9301      	str	r3, [sp, #4]
 80a1832:	bd08      	pop	{r3, pc}
 80a1834:	080601d8 	.word	0x080601d8

080a1838 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1838:	b508      	push	{r3, lr}
 80a183a:	4b02      	ldr	r3, [pc, #8]	; (80a1844 <HAL_USB_USART_Begin+0xc>)
 80a183c:	681b      	ldr	r3, [r3, #0]
 80a183e:	685b      	ldr	r3, [r3, #4]
 80a1840:	9301      	str	r3, [sp, #4]
 80a1842:	bd08      	pop	{r3, pc}
 80a1844:	080601d8 	.word	0x080601d8

080a1848 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1848:	b508      	push	{r3, lr}
 80a184a:	4b02      	ldr	r3, [pc, #8]	; (80a1854 <HAL_USB_USART_Available_Data+0xc>)
 80a184c:	681b      	ldr	r3, [r3, #0]
 80a184e:	691b      	ldr	r3, [r3, #16]
 80a1850:	9301      	str	r3, [sp, #4]
 80a1852:	bd08      	pop	{r3, pc}
 80a1854:	080601d8 	.word	0x080601d8

080a1858 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1858:	b508      	push	{r3, lr}
 80a185a:	4b02      	ldr	r3, [pc, #8]	; (80a1864 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a185c:	681b      	ldr	r3, [r3, #0]
 80a185e:	695b      	ldr	r3, [r3, #20]
 80a1860:	9301      	str	r3, [sp, #4]
 80a1862:	bd08      	pop	{r3, pc}
 80a1864:	080601d8 	.word	0x080601d8

080a1868 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1868:	b508      	push	{r3, lr}
 80a186a:	4b02      	ldr	r3, [pc, #8]	; (80a1874 <HAL_USB_USART_Receive_Data+0xc>)
 80a186c:	681b      	ldr	r3, [r3, #0]
 80a186e:	699b      	ldr	r3, [r3, #24]
 80a1870:	9301      	str	r3, [sp, #4]
 80a1872:	bd08      	pop	{r3, pc}
 80a1874:	080601d8 	.word	0x080601d8

080a1878 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1878:	b508      	push	{r3, lr}
 80a187a:	4b02      	ldr	r3, [pc, #8]	; (80a1884 <HAL_USB_USART_Send_Data+0xc>)
 80a187c:	681b      	ldr	r3, [r3, #0]
 80a187e:	69db      	ldr	r3, [r3, #28]
 80a1880:	9301      	str	r3, [sp, #4]
 80a1882:	bd08      	pop	{r3, pc}
 80a1884:	080601d8 	.word	0x080601d8

080a1888 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1888:	b508      	push	{r3, lr}
 80a188a:	4b02      	ldr	r3, [pc, #8]	; (80a1894 <HAL_USB_USART_Flush_Data+0xc>)
 80a188c:	681b      	ldr	r3, [r3, #0]
 80a188e:	6a1b      	ldr	r3, [r3, #32]
 80a1890:	9301      	str	r3, [sp, #4]
 80a1892:	bd08      	pop	{r3, pc}
 80a1894:	080601d8 	.word	0x080601d8

080a1898 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1898:	b508      	push	{r3, lr}
 80a189a:	4b02      	ldr	r3, [pc, #8]	; (80a18a4 <HAL_NET_SetNetWatchDog+0xc>)
 80a189c:	681b      	ldr	r3, [r3, #0]
 80a189e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a18a0:	9301      	str	r3, [sp, #4]
 80a18a2:	bd08      	pop	{r3, pc}
 80a18a4:	080601c0 	.word	0x080601c0

080a18a8 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a18a8:	b508      	push	{r3, lr}
 80a18aa:	4b02      	ldr	r3, [pc, #8]	; (80a18b4 <inet_gethostbyname+0xc>)
 80a18ac:	681b      	ldr	r3, [r3, #0]
 80a18ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a18b0:	9301      	str	r3, [sp, #4]
 80a18b2:	bd08      	pop	{r3, pc}
 80a18b4:	080601c0 	.word	0x080601c0

080a18b8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a18b8:	b508      	push	{r3, lr}
 80a18ba:	4b02      	ldr	r3, [pc, #8]	; (80a18c4 <panic_+0xc>)
 80a18bc:	681b      	ldr	r3, [r3, #0]
 80a18be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a18c0:	9301      	str	r3, [sp, #4]
 80a18c2:	bd08      	pop	{r3, pc}
 80a18c4:	080201a8 	.word	0x080201a8

080a18c8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a18c8:	b508      	push	{r3, lr}
 80a18ca:	4b02      	ldr	r3, [pc, #8]	; (80a18d4 <log_message+0xc>)
 80a18cc:	681b      	ldr	r3, [r3, #0]
 80a18ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a18d0:	9301      	str	r3, [sp, #4]
 80a18d2:	bd08      	pop	{r3, pc}
 80a18d4:	080201a8 	.word	0x080201a8

080a18d8 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a18d8:	b508      	push	{r3, lr}
 80a18da:	4b02      	ldr	r3, [pc, #8]	; (80a18e4 <set_system_mode+0xc>)
 80a18dc:	681b      	ldr	r3, [r3, #0]
 80a18de:	685b      	ldr	r3, [r3, #4]
 80a18e0:	9301      	str	r3, [sp, #4]
 80a18e2:	bd08      	pop	{r3, pc}
 80a18e4:	080601a4 	.word	0x080601a4

080a18e8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a18e8:	b508      	push	{r3, lr}
 80a18ea:	4b02      	ldr	r3, [pc, #8]	; (80a18f4 <system_delay_ms+0xc>)
 80a18ec:	681b      	ldr	r3, [r3, #0]
 80a18ee:	695b      	ldr	r3, [r3, #20]
 80a18f0:	9301      	str	r3, [sp, #4]
 80a18f2:	bd08      	pop	{r3, pc}
 80a18f4:	080601a4 	.word	0x080601a4

080a18f8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a18f8:	b508      	push	{r3, lr}
 80a18fa:	4b03      	ldr	r3, [pc, #12]	; (80a1908 <system_ctrl_set_app_request_handler+0x10>)
 80a18fc:	681b      	ldr	r3, [r3, #0]
 80a18fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1902:	9301      	str	r3, [sp, #4]
 80a1904:	bd08      	pop	{r3, pc}
 80a1906:	0000      	.short	0x0000
 80a1908:	080601a4 	.word	0x080601a4

080a190c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a190c:	b508      	push	{r3, lr}
 80a190e:	4b03      	ldr	r3, [pc, #12]	; (80a191c <system_ctrl_set_result+0x10>)
 80a1910:	681b      	ldr	r3, [r3, #0]
 80a1912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1916:	9301      	str	r3, [sp, #4]
 80a1918:	bd08      	pop	{r3, pc}
 80a191a:	0000      	.short	0x0000
 80a191c:	080601a4 	.word	0x080601a4

080a1920 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1920:	b508      	push	{r3, lr}
 80a1922:	4b02      	ldr	r3, [pc, #8]	; (80a192c <network_connect+0xc>)
 80a1924:	681b      	ldr	r3, [r3, #0]
 80a1926:	685b      	ldr	r3, [r3, #4]
 80a1928:	9301      	str	r3, [sp, #4]
 80a192a:	bd08      	pop	{r3, pc}
 80a192c:	080601c8 	.word	0x080601c8

080a1930 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1930:	b508      	push	{r3, lr}
 80a1932:	4b02      	ldr	r3, [pc, #8]	; (80a193c <network_connecting+0xc>)
 80a1934:	681b      	ldr	r3, [r3, #0]
 80a1936:	689b      	ldr	r3, [r3, #8]
 80a1938:	9301      	str	r3, [sp, #4]
 80a193a:	bd08      	pop	{r3, pc}
 80a193c:	080601c8 	.word	0x080601c8

080a1940 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1940:	b508      	push	{r3, lr}
 80a1942:	4b02      	ldr	r3, [pc, #8]	; (80a194c <network_disconnect+0xc>)
 80a1944:	681b      	ldr	r3, [r3, #0]
 80a1946:	68db      	ldr	r3, [r3, #12]
 80a1948:	9301      	str	r3, [sp, #4]
 80a194a:	bd08      	pop	{r3, pc}
 80a194c:	080601c8 	.word	0x080601c8

080a1950 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1950:	b508      	push	{r3, lr}
 80a1952:	4b02      	ldr	r3, [pc, #8]	; (80a195c <network_ready+0xc>)
 80a1954:	681b      	ldr	r3, [r3, #0]
 80a1956:	691b      	ldr	r3, [r3, #16]
 80a1958:	9301      	str	r3, [sp, #4]
 80a195a:	bd08      	pop	{r3, pc}
 80a195c:	080601c8 	.word	0x080601c8

080a1960 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1960:	b508      	push	{r3, lr}
 80a1962:	4b02      	ldr	r3, [pc, #8]	; (80a196c <network_on+0xc>)
 80a1964:	681b      	ldr	r3, [r3, #0]
 80a1966:	695b      	ldr	r3, [r3, #20]
 80a1968:	9301      	str	r3, [sp, #4]
 80a196a:	bd08      	pop	{r3, pc}
 80a196c:	080601c8 	.word	0x080601c8

080a1970 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1970:	b508      	push	{r3, lr}
 80a1972:	4b02      	ldr	r3, [pc, #8]	; (80a197c <network_off+0xc>)
 80a1974:	681b      	ldr	r3, [r3, #0]
 80a1976:	699b      	ldr	r3, [r3, #24]
 80a1978:	9301      	str	r3, [sp, #4]
 80a197a:	bd08      	pop	{r3, pc}
 80a197c:	080601c8 	.word	0x080601c8

080a1980 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1980:	b508      	push	{r3, lr}
 80a1982:	4b02      	ldr	r3, [pc, #8]	; (80a198c <network_listen+0xc>)
 80a1984:	681b      	ldr	r3, [r3, #0]
 80a1986:	69db      	ldr	r3, [r3, #28]
 80a1988:	9301      	str	r3, [sp, #4]
 80a198a:	bd08      	pop	{r3, pc}
 80a198c:	080601c8 	.word	0x080601c8

080a1990 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1990:	b508      	push	{r3, lr}
 80a1992:	4b02      	ldr	r3, [pc, #8]	; (80a199c <network_listening+0xc>)
 80a1994:	681b      	ldr	r3, [r3, #0]
 80a1996:	6a1b      	ldr	r3, [r3, #32]
 80a1998:	9301      	str	r3, [sp, #4]
 80a199a:	bd08      	pop	{r3, pc}
 80a199c:	080601c8 	.word	0x080601c8

080a19a0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a19a0:	b508      	push	{r3, lr}
 80a19a2:	4b02      	ldr	r3, [pc, #8]	; (80a19ac <network_set_listen_timeout+0xc>)
 80a19a4:	681b      	ldr	r3, [r3, #0]
 80a19a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a19a8:	9301      	str	r3, [sp, #4]
 80a19aa:	bd08      	pop	{r3, pc}
 80a19ac:	080601c8 	.word	0x080601c8

080a19b0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a19b0:	b508      	push	{r3, lr}
 80a19b2:	4b02      	ldr	r3, [pc, #8]	; (80a19bc <network_get_listen_timeout+0xc>)
 80a19b4:	681b      	ldr	r3, [r3, #0]
 80a19b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a19b8:	9301      	str	r3, [sp, #4]
 80a19ba:	bd08      	pop	{r3, pc}
 80a19bc:	080601c8 	.word	0x080601c8

080a19c0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a19c0:	b508      	push	{r3, lr}
 80a19c2:	4b02      	ldr	r3, [pc, #8]	; (80a19cc <spark_set_random_seed_from_cloud_handler+0xc>)
 80a19c4:	681b      	ldr	r3, [r3, #0]
 80a19c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a19c8:	9301      	str	r3, [sp, #4]
 80a19ca:	bd08      	pop	{r3, pc}
 80a19cc:	080601cc 	.word	0x080601cc

080a19d0 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a19d0:	b508      	push	{r3, lr}
 80a19d2:	4b02      	ldr	r3, [pc, #8]	; (80a19dc <malloc+0xc>)
 80a19d4:	681b      	ldr	r3, [r3, #0]
 80a19d6:	681b      	ldr	r3, [r3, #0]
 80a19d8:	9301      	str	r3, [sp, #4]
 80a19da:	bd08      	pop	{r3, pc}
 80a19dc:	080601a0 	.word	0x080601a0

080a19e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a19e0:	b508      	push	{r3, lr}
 80a19e2:	4b02      	ldr	r3, [pc, #8]	; (80a19ec <free+0xc>)
 80a19e4:	681b      	ldr	r3, [r3, #0]
 80a19e6:	685b      	ldr	r3, [r3, #4]
 80a19e8:	9301      	str	r3, [sp, #4]
 80a19ea:	bd08      	pop	{r3, pc}
 80a19ec:	080601a0 	.word	0x080601a0

080a19f0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a19f0:	b508      	push	{r3, lr}
 80a19f2:	4b02      	ldr	r3, [pc, #8]	; (80a19fc <realloc+0xc>)
 80a19f4:	681b      	ldr	r3, [r3, #0]
 80a19f6:	689b      	ldr	r3, [r3, #8]
 80a19f8:	9301      	str	r3, [sp, #4]
 80a19fa:	bd08      	pop	{r3, pc}
 80a19fc:	080601a0 	.word	0x080601a0

080a1a00 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1a00:	4770      	bx	lr

080a1a02 <_ZN8SPIClassD0Ev>:
 80a1a02:	b510      	push	{r4, lr}
 80a1a04:	4604      	mov	r4, r0
 80a1a06:	2110      	movs	r1, #16
 80a1a08:	f001 f88f 	bl	80a2b2a <_ZdlPvj>
 80a1a0c:	4620      	mov	r0, r4
 80a1a0e:	bd10      	pop	{r4, pc}

080a1a10 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1a10:	b570      	push	{r4, r5, r6, lr}
 80a1a12:	4604      	mov	r4, r0
 80a1a14:	460e      	mov	r6, r1
 80a1a16:	4b07      	ldr	r3, [pc, #28]	; (80a1a34 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1a18:	2500      	movs	r5, #0
 80a1a1a:	6003      	str	r3, [r0, #0]
 80a1a1c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1a20:	f7ff fe28 	bl	80a1674 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1a24:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1a26:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1a28:	f7ff fdf4 	bl	80a1614 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1a2c:	60a5      	str	r5, [r4, #8]
}
 80a1a2e:	4620      	mov	r0, r4
 80a1a30:	bd70      	pop	{r4, r5, r6, pc}
 80a1a32:	bf00      	nop
 80a1a34:	080a345c 	.word	0x080a345c

080a1a38 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a1a38:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a1a3c:	7900      	ldrb	r0, [r0, #4]
 80a1a3e:	f7ff bdc1 	b.w	80a15c4 <HAL_SPI_Begin>

080a1a42 <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 80a1a42:	7900      	ldrb	r0, [r0, #4]
 80a1a44:	f7ff bdc6 	b.w	80a15d4 <HAL_SPI_Set_Bit_Order>

080a1a48 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 80a1a48:	7900      	ldrb	r0, [r0, #4]
 80a1a4a:	f7ff bdcb 	b.w	80a15e4 <HAL_SPI_Set_Data_Mode>
	...

080a1a50 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a1a50:	4a05      	ldr	r2, [pc, #20]	; (80a1a68 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 80a1a52:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 80a1a54:	5c99      	ldrb	r1, [r3, r2]
 80a1a56:	4281      	cmp	r1, r0
 80a1a58:	d002      	beq.n	80a1a60 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 80a1a5a:	3301      	adds	r3, #1
 80a1a5c:	2b08      	cmp	r3, #8
 80a1a5e:	d1f9      	bne.n	80a1a54 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 80a1a60:	1c58      	adds	r0, r3, #1
}
 80a1a62:	b2c0      	uxtb	r0, r0
 80a1a64:	4770      	bx	lr
 80a1a66:	bf00      	nop
 80a1a68:	080a3464 	.word	0x080a3464

080a1a6c <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1a6c:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a1a6e:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a1a70:	6018      	str	r0, [r3, #0]
 80a1a72:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a1a74:	6818      	ldr	r0, [r3, #0]
 80a1a76:	b2e5      	uxtb	r5, r4
 80a1a78:	4288      	cmp	r0, r1
 80a1a7a:	d906      	bls.n	80a1a8a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a1a7c:	3401      	adds	r4, #1
 80a1a7e:	2c08      	cmp	r4, #8
 80a1a80:	d002      	beq.n	80a1a88 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a1a82:	0840      	lsrs	r0, r0, #1
 80a1a84:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a1a86:	e7f5      	b.n	80a1a74 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a1a88:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a1a8a:	4b02      	ldr	r3, [pc, #8]	; (80a1a94 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a1a8c:	5d5b      	ldrb	r3, [r3, r5]
 80a1a8e:	7013      	strb	r3, [r2, #0]
 80a1a90:	bd30      	pop	{r4, r5, pc}
 80a1a92:	bf00      	nop
 80a1a94:	080a3464 	.word	0x080a3464

080a1a98 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1a98:	b570      	push	{r4, r5, r6, lr}
 80a1a9a:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80a1a9c:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80a1aa0:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80a1aa2:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a1aa4:	2214      	movs	r2, #20
 80a1aa6:	2100      	movs	r1, #0
 80a1aa8:	a803      	add	r0, sp, #12
 80a1aaa:	f001 f9a2 	bl	80a2df2 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a1aae:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a1ab0:	a903      	add	r1, sp, #12
 80a1ab2:	4630      	mov	r0, r6
 80a1ab4:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a1ab6:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80a1aba:	f7ff fdbb 	bl	80a1634 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80a1abe:	ab02      	add	r3, sp, #8
 80a1ac0:	f10d 0207 	add.w	r2, sp, #7
 80a1ac4:	4629      	mov	r1, r5
 80a1ac6:	9804      	ldr	r0, [sp, #16]
 80a1ac8:	f7ff ffd0 	bl	80a1a6c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1acc:	7920      	ldrb	r0, [r4, #4]
 80a1ace:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80a1ad2:	f7ff fd8f 	bl	80a15f4 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80a1ad6:	9802      	ldr	r0, [sp, #8]
 80a1ad8:	b008      	add	sp, #32
 80a1ada:	bd70      	pop	{r4, r5, r6, pc}

080a1adc <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a1adc:	b538      	push	{r3, r4, r5, lr}
 80a1ade:	4604      	mov	r4, r0
    if (dividerReference)
 80a1ae0:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80a1ae2:	4608      	mov	r0, r1
    if (dividerReference)
 80a1ae4:	b14d      	cbz	r5, 80a1afa <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80a1ae6:	f7ff ffb3 	bl	80a1a50 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1aea:	2201      	movs	r2, #1
 80a1aec:	fa25 f100 	lsr.w	r1, r5, r0
 80a1af0:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80a1af2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80a1af6:	f7ff bfcf 	b.w	80a1a98 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1afa:	7920      	ldrb	r0, [r4, #4]
    }
}
 80a1afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 80a1b00:	f7ff bd78 	b.w	80a15f4 <HAL_SPI_Set_Clock_Divider>

080a1b04 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a1b04:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a1b06:	7900      	ldrb	r0, [r0, #4]
 80a1b08:	f7ff fd7c 	bl	80a1604 <HAL_SPI_Send_Receive_Data>
}
 80a1b0c:	b2c0      	uxtb	r0, r0
 80a1b0e:	bd08      	pop	{r3, pc}

080a1b10 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1b10:	7900      	ldrb	r0, [r0, #4]
 80a1b12:	f7ff bd87 	b.w	80a1624 <HAL_SPI_Is_Enabled>
	...

080a1b18 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1b1c:	4b03      	ldr	r3, [pc, #12]	; (80a1b2c <_GLOBAL__sub_I_System+0x14>)
 80a1b1e:	2000      	movs	r0, #0
 80a1b20:	7018      	strb	r0, [r3, #0]
 80a1b22:	8058      	strh	r0, [r3, #2]
 80a1b24:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1b26:	f7ff bed7 	b.w	80a18d8 <set_system_mode>
 80a1b2a:	bf00      	nop
 80a1b2c:	2000050c 	.word	0x2000050c

080a1b30 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1b32:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1b34:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a1b36:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1b3a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1b3c:	2201      	movs	r2, #1
 80a1b3e:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1b42:	4621      	mov	r1, r4
 80a1b44:	47a8      	blx	r5
}
 80a1b46:	b003      	add	sp, #12
 80a1b48:	bd30      	pop	{r4, r5, pc}

080a1b4a <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a1b4a:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1b4c:	6803      	ldr	r3, [r0, #0]
 80a1b4e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a1b50:	f247 5330 	movw	r3, #30000	; 0x7530
 80a1b54:	46a4      	mov	ip, r4
}
 80a1b56:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a1b58:	4760      	bx	ip

080a1b5a <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1b5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1b5c:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a1b5e:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a1b60:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a1b64:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a1b66:	4621      	mov	r1, r4
 80a1b68:	4613      	mov	r3, r2
 80a1b6a:	2201      	movs	r2, #1
 80a1b6c:	47a8      	blx	r5
}
 80a1b6e:	b003      	add	sp, #12
 80a1b70:	bd30      	pop	{r4, r5, pc}

080a1b72 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a1b72:	4770      	bx	lr

080a1b74 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1b74:	4770      	bx	lr

080a1b76 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a1b76:	2000      	movs	r0, #0
 80a1b78:	4770      	bx	lr

080a1b7a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a1b7a:	b510      	push	{r4, lr}
 80a1b7c:	4604      	mov	r4, r0
 80a1b7e:	2114      	movs	r1, #20
 80a1b80:	f000 ffd3 	bl	80a2b2a <_ZdlPvj>
 80a1b84:	4620      	mov	r0, r4
 80a1b86:	bd10      	pop	{r4, pc}

080a1b88 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1b88:	f7fe ba8b 	b.w	80a00a2 <_ZdlPv>

080a1b8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a1b8c:	b510      	push	{r4, lr}
 80a1b8e:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a1b90:	6803      	ldr	r3, [r0, #0]
 80a1b92:	689b      	ldr	r3, [r3, #8]
 80a1b94:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1b96:	68a3      	ldr	r3, [r4, #8]
 80a1b98:	3b01      	subs	r3, #1
 80a1b9a:	60a3      	str	r3, [r4, #8]
 80a1b9c:	b92b      	cbnz	r3, 80a1baa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80a1b9e:	6823      	ldr	r3, [r4, #0]
 80a1ba0:	4620      	mov	r0, r4
        }
    }
 80a1ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a1ba6:	68db      	ldr	r3, [r3, #12]
 80a1ba8:	4718      	bx	r3
 80a1baa:	bd10      	pop	{r4, pc}

080a1bac <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a1bac:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1bae:	4604      	mov	r4, r0
 80a1bb0:	4606      	mov	r6, r0
 80a1bb2:	694d      	ldr	r5, [r1, #20]
 80a1bb4:	4b04      	ldr	r3, [pc, #16]	; (80a1bc8 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a1bb6:	358c      	adds	r5, #140	; 0x8c
 80a1bb8:	f844 3b04 	str.w	r3, [r4], #4
 80a1bbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a1bbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a1bc0:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a1bc2:	4630      	mov	r0, r6
 80a1bc4:	7023      	strb	r3, [r4, #0]
 80a1bc6:	bd70      	pop	{r4, r5, r6, pc}
 80a1bc8:	080a3604 	.word	0x080a3604

080a1bcc <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a1bcc:	b510      	push	{r4, lr}
 80a1bce:	6943      	ldr	r3, [r0, #20]
 80a1bd0:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a1bd2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1bd6:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1bda:	429a      	cmp	r2, r3
 80a1bdc:	d005      	beq.n	80a1bea <_ZN9TCPClient4peekEv+0x1e>
 80a1bde:	6962      	ldr	r2, [r4, #20]
 80a1be0:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1be4:	4413      	add	r3, r2
 80a1be6:	7918      	ldrb	r0, [r3, #4]
 80a1be8:	bd10      	pop	{r4, pc}
 80a1bea:	6803      	ldr	r3, [r0, #0]
 80a1bec:	691b      	ldr	r3, [r3, #16]
 80a1bee:	4798      	blx	r3
 80a1bf0:	2800      	cmp	r0, #0
 80a1bf2:	d1f4      	bne.n	80a1bde <_ZN9TCPClient4peekEv+0x12>
 80a1bf4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a1bf8:	bd10      	pop	{r4, pc}

080a1bfa <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a1bfa:	b510      	push	{r4, lr}
 80a1bfc:	6943      	ldr	r3, [r0, #20]
 80a1bfe:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a1c00:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1c04:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a1c08:	429a      	cmp	r2, r3
 80a1c0a:	d008      	beq.n	80a1c1e <_ZN9TCPClient4readEv+0x24>
 80a1c0c:	6962      	ldr	r2, [r4, #20]
 80a1c0e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1c12:	1c59      	adds	r1, r3, #1
 80a1c14:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a1c18:	4413      	add	r3, r2
 80a1c1a:	7918      	ldrb	r0, [r3, #4]
 80a1c1c:	bd10      	pop	{r4, pc}
 80a1c1e:	6803      	ldr	r3, [r0, #0]
 80a1c20:	691b      	ldr	r3, [r3, #16]
 80a1c22:	4798      	blx	r3
 80a1c24:	2800      	cmp	r0, #0
 80a1c26:	d1f1      	bne.n	80a1c0c <_ZN9TCPClient4readEv+0x12>
 80a1c28:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a1c2c:	bd10      	pop	{r4, pc}

080a1c2e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c30:	6943      	ldr	r3, [r0, #20]
 80a1c32:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a1c34:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1c38:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1c3c:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a1c3e:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a1c40:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a1c42:	d106      	bne.n	80a1c52 <_ZN9TCPClient4readEPhj+0x24>
 80a1c44:	6803      	ldr	r3, [r0, #0]
 80a1c46:	691b      	ldr	r3, [r3, #16]
 80a1c48:	4798      	blx	r3
 80a1c4a:	b910      	cbnz	r0, 80a1c52 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a1c4c:	f04f 34ff 	mov.w	r4, #4294967295
 80a1c50:	e014      	b.n	80a1c7c <_ZN9TCPClient4readEPhj+0x4e>
 80a1c52:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1c54:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1c56:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a1c5a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1c5e:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a1c60:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a1c62:	42bc      	cmp	r4, r7
 80a1c64:	bf28      	it	cs
 80a1c66:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a1c68:	3104      	adds	r1, #4
 80a1c6a:	4622      	mov	r2, r4
 80a1c6c:	f001 f8b6 	bl	80a2ddc <memcpy>
 80a1c70:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a1c72:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a1c76:	4423      	add	r3, r4
 80a1c78:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a1c7c:	4620      	mov	r0, r4
 80a1c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1c80 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a1c80:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a1c82:	2300      	movs	r3, #0
 80a1c84:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a1c88:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a1c8a:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a1c8e:	4770      	bx	lr

080a1c90 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a1c90:	b538      	push	{r3, r4, r5, lr}
 80a1c92:	6942      	ldr	r2, [r0, #20]
 80a1c94:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a1c96:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1c9a:	b11b      	cbz	r3, 80a1ca4 <_ZN9TCPClient9availableEv+0x14>
 80a1c9c:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a1ca0:	429a      	cmp	r2, r3
 80a1ca2:	d00c      	beq.n	80a1cbe <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1ca4:	6920      	ldr	r0, [r4, #16]
 80a1ca6:	f000 fe59 	bl	80a295c <_ZN5spark12NetworkClass4fromEm>
 80a1caa:	6803      	ldr	r3, [r0, #0]
 80a1cac:	68db      	ldr	r3, [r3, #12]
 80a1cae:	4798      	blx	r3
 80a1cb0:	b318      	cbz	r0, 80a1cfa <_ZN9TCPClient9availableEv+0x6a>
 80a1cb2:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1cb4:	6818      	ldr	r0, [r3, #0]
 80a1cb6:	f7ff fd7f 	bl	80a17b8 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a1cba:	b918      	cbnz	r0, 80a1cc4 <_ZN9TCPClient9availableEv+0x34>
 80a1cbc:	e01d      	b.n	80a1cfa <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a1cbe:	f7ff ffdf 	bl	80a1c80 <_ZN9TCPClient12flush_bufferEv>
 80a1cc2:	e7ef      	b.n	80a1ca4 <_ZN9TCPClient9availableEv+0x14>
 80a1cc4:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a1cc6:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a1cca:	297f      	cmp	r1, #127	; 0x7f
 80a1ccc:	d815      	bhi.n	80a1cfa <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a1cce:	1d05      	adds	r5, r0, #4
 80a1cd0:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a1cd4:	2300      	movs	r3, #0
 80a1cd6:	4429      	add	r1, r5
 80a1cd8:	6800      	ldr	r0, [r0, #0]
 80a1cda:	f7ff fd85 	bl	80a17e8 <socket_receive>
            if (ret > 0)
 80a1cde:	2800      	cmp	r0, #0
 80a1ce0:	dd0b      	ble.n	80a1cfa <_ZN9TCPClient9availableEv+0x6a>
 80a1ce2:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a1ce4:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a1ce8:	b90a      	cbnz	r2, 80a1cee <_ZN9TCPClient9availableEv+0x5e>
 80a1cea:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a1cee:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a1cf0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1cf4:	4418      	add	r0, r3
 80a1cf6:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a1cfa:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a1cfc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a1d00:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a1d04:	1a18      	subs	r0, r3, r0
}
 80a1d06:	bd38      	pop	{r3, r4, r5, pc}

080a1d08 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a1d08:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1d0a:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a1d0c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1d0e:	6818      	ldr	r0, [r3, #0]
 80a1d10:	f7ff fd52 	bl	80a17b8 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a1d14:	b118      	cbz	r0, 80a1d1e <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a1d16:	6963      	ldr	r3, [r4, #20]
 80a1d18:	6818      	ldr	r0, [r3, #0]
 80a1d1a:	f7ff fd6d 	bl	80a17f8 <socket_close>
 80a1d1e:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a1d20:	f7ff fd72 	bl	80a1808 <socket_handle_invalid>
 80a1d24:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1d26:	6960      	ldr	r0, [r4, #20]
 80a1d28:	2211      	movs	r2, #17
 80a1d2a:	2100      	movs	r1, #0
 80a1d2c:	308c      	adds	r0, #140	; 0x8c
 80a1d2e:	f001 f860 	bl	80a2df2 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a1d32:	4620      	mov	r0, r4
}
 80a1d34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a1d38:	f7ff bfa2 	b.w	80a1c80 <_ZN9TCPClient12flush_bufferEv>

080a1d3c <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1d40:	461f      	mov	r7, r3
    stop();
 80a1d42:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1d44:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a1d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a1d48:	4606      	mov	r6, r0
 80a1d4a:	460c      	mov	r4, r1
 80a1d4c:	4615      	mov	r5, r2
    stop();
 80a1d4e:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a1d50:	4638      	mov	r0, r7
 80a1d52:	f000 fe03 	bl	80a295c <_ZN5spark12NetworkClass4fromEm>
 80a1d56:	6803      	ldr	r3, [r0, #0]
 80a1d58:	68db      	ldr	r3, [r3, #12]
 80a1d5a:	4798      	blx	r3
 80a1d5c:	2800      	cmp	r0, #0
 80a1d5e:	d056      	beq.n	80a1e0e <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1d60:	9700      	str	r7, [sp, #0]
 80a1d62:	462b      	mov	r3, r5
 80a1d64:	2206      	movs	r2, #6
 80a1d66:	2101      	movs	r1, #1
 80a1d68:	2002      	movs	r0, #2
 80a1d6a:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a1d6e:	f7ff fd2b 	bl	80a17c8 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1d72:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a1d74:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a1d78:	2700      	movs	r7, #0
 80a1d7a:	9302      	str	r3, [sp, #8]
 80a1d7c:	6973      	ldr	r3, [r6, #20]
 80a1d7e:	9703      	str	r7, [sp, #12]
 80a1d80:	681b      	ldr	r3, [r3, #0]
 80a1d82:	2001      	movs	r0, #1
 80a1d84:	9301      	str	r3, [sp, #4]
 80a1d86:	4b23      	ldr	r3, [pc, #140]	; (80a1e14 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a1d88:	aa02      	add	r2, sp, #8
 80a1d8a:	9300      	str	r3, [sp, #0]
 80a1d8c:	4922      	ldr	r1, [pc, #136]	; (80a1e18 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a1d8e:	463b      	mov	r3, r7
 80a1d90:	f7ff fd9a 	bl	80a18c8 <log_message>

          if (socket_handle_valid(d_->sock))
 80a1d94:	6973      	ldr	r3, [r6, #20]
 80a1d96:	6818      	ldr	r0, [r3, #0]
 80a1d98:	f7ff fd0e 	bl	80a17b8 <socket_handle_valid>
 80a1d9c:	2800      	cmp	r0, #0
 80a1d9e:	d036      	beq.n	80a1e0e <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a1da0:	4630      	mov	r0, r6
 80a1da2:	f7ff ff6d 	bl	80a1c80 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a1da6:	2302      	movs	r3, #2
 80a1da8:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a1dac:	0a2b      	lsrs	r3, r5, #8
 80a1dae:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1db2:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1db4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a1db8:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a1dbc:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a1dbe:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a1dc2:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a1dc6:	7963      	ldrb	r3, [r4, #5]
 80a1dc8:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a1dcc:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a1dd0:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1dd4:	f7ff fd60 	bl	80a1898 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1dd8:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a1dda:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a1ddc:	2210      	movs	r2, #16
 80a1dde:	a902      	add	r1, sp, #8
 80a1de0:	6818      	ldr	r0, [r3, #0]
 80a1de2:	f7ff fcf9 	bl	80a17d8 <socket_connect>
 80a1de6:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a1de8:	4628      	mov	r0, r5
 80a1dea:	f7ff fd55 	bl	80a1898 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a1dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1df0:	6975      	ldr	r5, [r6, #20]
 80a1df2:	358c      	adds	r5, #140	; 0x8c
 80a1df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1df6:	6823      	ldr	r3, [r4, #0]
 80a1df8:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a1dfa:	f1b8 0f00 	cmp.w	r8, #0
 80a1dfe:	d005      	beq.n	80a1e0c <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a1e00:	6833      	ldr	r3, [r6, #0]
 80a1e02:	4630      	mov	r0, r6
 80a1e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1e06:	4798      	blx	r3
 80a1e08:	4638      	mov	r0, r7
 80a1e0a:	e000      	b.n	80a1e0e <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a1e0c:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a1e0e:	b00a      	add	sp, #40	; 0x28
 80a1e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1e14:	080a34db 	.word	0x080a34db
 80a1e18:	080a34d4 	.word	0x080a34d4

080a1e1c <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1e1c:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1e1e:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a1e20:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1e22:	6818      	ldr	r0, [r3, #0]
 80a1e24:	f7ff fcc8 	bl	80a17b8 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a1e28:	b908      	cbnz	r0, 80a1e2e <_ZN9TCPClient6statusEv+0x12>
 80a1e2a:	2000      	movs	r0, #0
 80a1e2c:	bd10      	pop	{r4, pc}
 80a1e2e:	6920      	ldr	r0, [r4, #16]
 80a1e30:	f000 fd94 	bl	80a295c <_ZN5spark12NetworkClass4fromEm>
 80a1e34:	6803      	ldr	r3, [r0, #0]
 80a1e36:	68db      	ldr	r3, [r3, #12]
 80a1e38:	4798      	blx	r3
 80a1e3a:	2800      	cmp	r0, #0
 80a1e3c:	d0f5      	beq.n	80a1e2a <_ZN9TCPClient6statusEv+0xe>
 80a1e3e:	6963      	ldr	r3, [r4, #20]
 80a1e40:	6818      	ldr	r0, [r3, #0]
 80a1e42:	f7ff fcb1 	bl	80a17a8 <socket_active_status>
 80a1e46:	fab0 f080 	clz	r0, r0
 80a1e4a:	0940      	lsrs	r0, r0, #5
}
 80a1e4c:	bd10      	pop	{r4, pc}

080a1e4e <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a1e4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a1e52:	2500      	movs	r5, #0
 80a1e54:	6045      	str	r5, [r0, #4]
 80a1e56:	4604      	mov	r4, r0
 80a1e58:	460e      	mov	r6, r1
 80a1e5a:	4617      	mov	r7, r2
 80a1e5c:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1e5e:	f7ff ffdd 	bl	80a1e1c <_ZN9TCPClient6statusEv>
 80a1e62:	b160      	cbz	r0, 80a1e7e <_ZN9TCPClient5writeEPKhjm+0x30>
 80a1e64:	6960      	ldr	r0, [r4, #20]
 80a1e66:	9501      	str	r5, [sp, #4]
 80a1e68:	f8cd 8000 	str.w	r8, [sp]
 80a1e6c:	462b      	mov	r3, r5
 80a1e6e:	463a      	mov	r2, r7
 80a1e70:	4631      	mov	r1, r6
 80a1e72:	6800      	ldr	r0, [r0, #0]
 80a1e74:	f7ff fcd0 	bl	80a1818 <socket_send_ex>
    if (ret < 0) {
 80a1e78:	2800      	cmp	r0, #0
 80a1e7a:	da03      	bge.n	80a1e84 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a1e7c:	e001      	b.n	80a1e82 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a1e7e:	f04f 30ff 	mov.w	r0, #4294967295
 80a1e82:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a1e84:	b002      	add	sp, #8
 80a1e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1e8a <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a1e8a:	b538      	push	{r3, r4, r5, lr}
 80a1e8c:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1e8e:	f7ff ffc5 	bl	80a1e1c <_ZN9TCPClient6statusEv>
 80a1e92:	bb00      	cbnz	r0, 80a1ed6 <_ZN9TCPClient9connectedEv+0x4c>
 80a1e94:	6963      	ldr	r3, [r4, #20]
 80a1e96:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a1e9a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a1e9e:	4291      	cmp	r1, r2
 80a1ea0:	d119      	bne.n	80a1ed6 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a1ea2:	6818      	ldr	r0, [r3, #0]
 80a1ea4:	f7ff fc88 	bl	80a17b8 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a1ea8:	b128      	cbz	r0, 80a1eb6 <_ZN9TCPClient9connectedEv+0x2c>
 80a1eaa:	6963      	ldr	r3, [r4, #20]
 80a1eac:	6818      	ldr	r0, [r3, #0]
 80a1eae:	f7ff fc7b 	bl	80a17a8 <socket_active_status>
 80a1eb2:	2801      	cmp	r0, #1
 80a1eb4:	d001      	beq.n	80a1eba <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a1eb6:	2500      	movs	r5, #0
 80a1eb8:	e00e      	b.n	80a1ed8 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a1eba:	6823      	ldr	r3, [r4, #0]
 80a1ebc:	4620      	mov	r0, r4
 80a1ebe:	691b      	ldr	r3, [r3, #16]
 80a1ec0:	4798      	blx	r3
 80a1ec2:	2800      	cmp	r0, #0
 80a1ec4:	bf14      	ite	ne
 80a1ec6:	2501      	movne	r5, #1
 80a1ec8:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a1eca:	d105      	bne.n	80a1ed8 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a1ecc:	6823      	ldr	r3, [r4, #0]
 80a1ece:	4620      	mov	r0, r4
 80a1ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1ed2:	4798      	blx	r3
 80a1ed4:	e000      	b.n	80a1ed8 <_ZN9TCPClient9connectedEv+0x4e>
 80a1ed6:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a1ed8:	4628      	mov	r0, r5
 80a1eda:	bd38      	pop	{r3, r4, r5, pc}

080a1edc <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a1edc:	b508      	push	{r3, lr}
   return (status()!=0);
 80a1ede:	f7ff ff9d 	bl	80a1e1c <_ZN9TCPClient6statusEv>
}
 80a1ee2:	3000      	adds	r0, #0
 80a1ee4:	bf18      	it	ne
 80a1ee6:	2001      	movne	r0, #1
 80a1ee8:	bd08      	pop	{r3, pc}

080a1eea <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a1eea:	b510      	push	{r4, lr}
 80a1eec:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a1eee:	2300      	movs	r3, #0
 80a1ef0:	6001      	str	r1, [r0, #0]
 80a1ef2:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a1ef6:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a1efa:	3088      	adds	r0, #136	; 0x88
 80a1efc:	f000 fa76 	bl	80a23ec <_ZN9IPAddressC1Ev>
}
 80a1f00:	4620      	mov	r0, r4
 80a1f02:	bd10      	pop	{r4, pc}

080a1f04 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1f04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1f08:	b570      	push	{r4, r5, r6, lr}
 80a1f0a:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a1f0c:	4a14      	ldr	r2, [pc, #80]	; (80a1f60 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1f0e:	2300      	movs	r3, #0
 80a1f10:	6043      	str	r3, [r0, #4]
 80a1f12:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a1f14:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a1f16:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a1f18:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1f1a:	20a0      	movs	r0, #160	; 0xa0
 80a1f1c:	460e      	mov	r6, r1
 80a1f1e:	f7fe f8bc 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a1f22:	4605      	mov	r5, r0
 80a1f24:	b110      	cbz	r0, 80a1f2c <_ZN9TCPClientC1Em+0x28>
 80a1f26:	4631      	mov	r1, r6
 80a1f28:	f7ff ffdf 	bl	80a1eea <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a1f2c:	2014      	movs	r0, #20
 80a1f2e:	f7fe f8b4 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a1f32:	4603      	mov	r3, r0
 80a1f34:	b128      	cbz	r0, 80a1f42 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1f36:	2201      	movs	r2, #1
 80a1f38:	6042      	str	r2, [r0, #4]
 80a1f3a:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1f3c:	4a09      	ldr	r2, [pc, #36]	; (80a1f64 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a1f3e:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a1f40:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1f42:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a1f44:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1f46:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a1f48:	b128      	cbz	r0, 80a1f56 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1f4a:	6843      	ldr	r3, [r0, #4]
 80a1f4c:	3b01      	subs	r3, #1
 80a1f4e:	6043      	str	r3, [r0, #4]
 80a1f50:	b90b      	cbnz	r3, 80a1f56 <_ZN9TCPClientC1Em+0x52>
 80a1f52:	f7ff fe1b 	bl	80a1b8c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a1f56:	4620      	mov	r0, r4
 80a1f58:	f7ff fe92 	bl	80a1c80 <_ZN9TCPClient12flush_bufferEv>
}
 80a1f5c:	4620      	mov	r0, r4
 80a1f5e:	bd70      	pop	{r4, r5, r6, pc}
 80a1f60:	080a3490 	.word	0x080a3490
 80a1f64:	080a3474 	.word	0x080a3474

080a1f68 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a1f68:	b510      	push	{r4, lr}
 80a1f6a:	4604      	mov	r4, r0
 80a1f6c:	f7ff fc4c 	bl	80a1808 <socket_handle_invalid>
 80a1f70:	4601      	mov	r1, r0
 80a1f72:	4620      	mov	r0, r4
 80a1f74:	f7ff ffc6 	bl	80a1f04 <_ZN9TCPClientC1Em>
{
}
 80a1f78:	4620      	mov	r0, r4
 80a1f7a:	bd10      	pop	{r4, pc}

080a1f7c <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a1f7c:	b510      	push	{r4, lr}
 80a1f7e:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a1f80:	6800      	ldr	r0, [r0, #0]
 80a1f82:	f7ff fc19 	bl	80a17b8 <socket_handle_valid>
 80a1f86:	b110      	cbz	r0, 80a1f8e <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a1f88:	6820      	ldr	r0, [r4, #0]
 80a1f8a:	f7ff fc35 	bl	80a17f8 <socket_close>
    }
}
 80a1f8e:	4620      	mov	r0, r4
 80a1f90:	bd10      	pop	{r4, pc}

080a1f92 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a1f92:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a1f94:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a1f96:	4620      	mov	r0, r4
 80a1f98:	f7ff fff0 	bl	80a1f7c <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a1f9c:	b124      	cbz	r4, 80a1fa8 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a1f9e:	4620      	mov	r0, r4
 80a1fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1fa4:	f7fe b87d 	b.w	80a00a2 <_ZdlPv>
 80a1fa8:	bd10      	pop	{r4, pc}
	...

080a1fac <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1fac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a1fb0:	461f      	mov	r7, r3
    stop();
 80a1fb2:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1fb4:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a1fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a1fb8:	4606      	mov	r6, r0
 80a1fba:	460d      	mov	r5, r1
 80a1fbc:	4690      	mov	r8, r2
    stop();
 80a1fbe:	4798      	blx	r3
    if (Network.ready())
 80a1fc0:	4813      	ldr	r0, [pc, #76]	; (80a2010 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a1fc2:	f000 fc7e 	bl	80a28c2 <_ZN5spark12NetworkClass5readyEv>
 80a1fc6:	b300      	cbz	r0, 80a200a <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a1fc8:	a802      	add	r0, sp, #8
 80a1fca:	f000 fa0f 	bl	80a23ec <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a1fce:	4628      	mov	r0, r5
 80a1fd0:	f000 ff4a 	bl	80a2e68 <strlen>
 80a1fd4:	2400      	movs	r4, #0
 80a1fd6:	b281      	uxth	r1, r0
 80a1fd8:	9400      	str	r4, [sp, #0]
 80a1fda:	463b      	mov	r3, r7
 80a1fdc:	aa03      	add	r2, sp, #12
 80a1fde:	4628      	mov	r0, r5
 80a1fe0:	f7ff fc62 	bl	80a18a8 <inet_gethostbyname>
 80a1fe4:	b980      	cbnz	r0, 80a2008 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a1fe6:	6833      	ldr	r3, [r6, #0]
 80a1fe8:	ad09      	add	r5, sp, #36	; 0x24
 80a1fea:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a1fee:	4b09      	ldr	r3, [pc, #36]	; (80a2014 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a1ff0:	ac03      	add	r4, sp, #12
 80a1ff2:	9308      	str	r3, [sp, #32]
 80a1ff4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a1ff6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a1ff8:	6823      	ldr	r3, [r4, #0]
 80a1ffa:	4642      	mov	r2, r8
 80a1ffc:	702b      	strb	r3, [r5, #0]
 80a1ffe:	a908      	add	r1, sp, #32
 80a2000:	463b      	mov	r3, r7
 80a2002:	4630      	mov	r0, r6
 80a2004:	47c8      	blx	r9
 80a2006:	e000      	b.n	80a200a <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a2008:	4620      	mov	r0, r4
}
 80a200a:	b00f      	add	sp, #60	; 0x3c
 80a200c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2010:	20000998 	.word	0x20000998
 80a2014:	080a3604 	.word	0x080a3604

080a2018 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2018:	b510      	push	{r4, lr}
 80a201a:	4604      	mov	r4, r0
{
	free(buffer);
 80a201c:	6800      	ldr	r0, [r0, #0]
 80a201e:	f7ff fcdf 	bl	80a19e0 <free>
}
 80a2022:	4620      	mov	r0, r4
 80a2024:	bd10      	pop	{r4, pc}

080a2026 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2026:	b510      	push	{r4, lr}
 80a2028:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a202a:	6800      	ldr	r0, [r0, #0]
 80a202c:	b108      	cbz	r0, 80a2032 <_ZN6String10invalidateEv+0xc>
 80a202e:	f7ff fcd7 	bl	80a19e0 <free>
	buffer = NULL;
 80a2032:	2300      	movs	r3, #0
 80a2034:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2036:	60a3      	str	r3, [r4, #8]
 80a2038:	6063      	str	r3, [r4, #4]
 80a203a:	bd10      	pop	{r4, pc}

080a203c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a203c:	b538      	push	{r3, r4, r5, lr}
 80a203e:	4604      	mov	r4, r0
 80a2040:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2042:	6800      	ldr	r0, [r0, #0]
 80a2044:	3101      	adds	r1, #1
 80a2046:	f7ff fcd3 	bl	80a19f0 <realloc>
	if (newbuffer) {
 80a204a:	b110      	cbz	r0, 80a2052 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a204c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2050:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2052:	bd38      	pop	{r3, r4, r5, pc}

080a2054 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2054:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2056:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2058:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a205a:	b113      	cbz	r3, 80a2062 <_ZN6String7reserveEj+0xe>
 80a205c:	6843      	ldr	r3, [r0, #4]
 80a205e:	428b      	cmp	r3, r1
 80a2060:	d207      	bcs.n	80a2072 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a2062:	4620      	mov	r0, r4
 80a2064:	f7ff ffea 	bl	80a203c <_ZN6String12changeBufferEj>
 80a2068:	b120      	cbz	r0, 80a2074 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a206a:	68a3      	ldr	r3, [r4, #8]
 80a206c:	b90b      	cbnz	r3, 80a2072 <_ZN6String7reserveEj+0x1e>
 80a206e:	6822      	ldr	r2, [r4, #0]
 80a2070:	7013      	strb	r3, [r2, #0]
 80a2072:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a2074:	bd10      	pop	{r4, pc}

080a2076 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2076:	b570      	push	{r4, r5, r6, lr}
 80a2078:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a207a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a207c:	4604      	mov	r4, r0
 80a207e:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2080:	f7ff ffe8 	bl	80a2054 <_ZN6String7reserveEj>
 80a2084:	b918      	cbnz	r0, 80a208e <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a2086:	4620      	mov	r0, r4
 80a2088:	f7ff ffcd 	bl	80a2026 <_ZN6String10invalidateEv>
		return *this;
 80a208c:	e009      	b.n	80a20a2 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a208e:	462a      	mov	r2, r5
 80a2090:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a2092:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2094:	6820      	ldr	r0, [r4, #0]
 80a2096:	f000 fea1 	bl	80a2ddc <memcpy>
	buffer[len] = 0;
 80a209a:	6822      	ldr	r2, [r4, #0]
 80a209c:	68a3      	ldr	r3, [r4, #8]
 80a209e:	2100      	movs	r1, #0
 80a20a0:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a20a2:	4620      	mov	r0, r4
 80a20a4:	bd70      	pop	{r4, r5, r6, pc}

080a20a6 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a20a6:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a20a8:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a20aa:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a20ac:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a20ae:	6043      	str	r3, [r0, #4]
	len = 0;
 80a20b0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a20b2:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a20b4:	460d      	mov	r5, r1
 80a20b6:	b139      	cbz	r1, 80a20c8 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a20b8:	4608      	mov	r0, r1
 80a20ba:	f000 fed5 	bl	80a2e68 <strlen>
 80a20be:	4629      	mov	r1, r5
 80a20c0:	4602      	mov	r2, r0
 80a20c2:	4620      	mov	r0, r4
 80a20c4:	f7ff ffd7 	bl	80a2076 <_ZN6String4copyEPKcj>
}
 80a20c8:	4620      	mov	r0, r4
 80a20ca:	bd38      	pop	{r3, r4, r5, pc}

080a20cc <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a20cc:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a20ce:	b510      	push	{r4, lr}
 80a20d0:	460b      	mov	r3, r1
 80a20d2:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a20d4:	d007      	beq.n	80a20e6 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a20d6:	6809      	ldr	r1, [r1, #0]
 80a20d8:	b119      	cbz	r1, 80a20e2 <_ZN6StringaSERKS_+0x16>
 80a20da:	689a      	ldr	r2, [r3, #8]
 80a20dc:	f7ff ffcb 	bl	80a2076 <_ZN6String4copyEPKcj>
 80a20e0:	e001      	b.n	80a20e6 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a20e2:	f7ff ffa0 	bl	80a2026 <_ZN6String10invalidateEv>

	return *this;
}
 80a20e6:	4620      	mov	r0, r4
 80a20e8:	bd10      	pop	{r4, pc}

080a20ea <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a20ea:	b510      	push	{r4, lr}
 80a20ec:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a20ee:	2300      	movs	r3, #0
 80a20f0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a20f2:	6043      	str	r3, [r0, #4]
	len = 0;
 80a20f4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a20f6:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a20f8:	f7ff ffe8 	bl	80a20cc <_ZN6StringaSERKS_>
}
 80a20fc:	4620      	mov	r0, r4
 80a20fe:	bd10      	pop	{r4, pc}

080a2100 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2100:	b538      	push	{r3, r4, r5, lr}
 80a2102:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2104:	460c      	mov	r4, r1
 80a2106:	b141      	cbz	r1, 80a211a <_ZN6StringaSEPKc+0x1a>
 80a2108:	4608      	mov	r0, r1
 80a210a:	f000 fead 	bl	80a2e68 <strlen>
 80a210e:	4621      	mov	r1, r4
 80a2110:	4602      	mov	r2, r0
 80a2112:	4628      	mov	r0, r5
 80a2114:	f7ff ffaf 	bl	80a2076 <_ZN6String4copyEPKcj>
 80a2118:	e001      	b.n	80a211e <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a211a:	f7ff ff84 	bl	80a2026 <_ZN6String10invalidateEv>

	return *this;
}
 80a211e:	4628      	mov	r0, r5
 80a2120:	bd38      	pop	{r3, r4, r5, pc}

080a2122 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2124:	4606      	mov	r6, r0
 80a2126:	460d      	mov	r5, r1
 80a2128:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a212a:	2400      	movs	r4, #0
  while (size--) {
 80a212c:	42bd      	cmp	r5, r7
 80a212e:	d00c      	beq.n	80a214a <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2130:	6833      	ldr	r3, [r6, #0]
 80a2132:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2136:	689b      	ldr	r3, [r3, #8]
 80a2138:	4630      	mov	r0, r6
 80a213a:	4798      	blx	r3
     if (chunk>=0)
 80a213c:	2800      	cmp	r0, #0
 80a213e:	db01      	blt.n	80a2144 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2140:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2142:	e7f3      	b.n	80a212c <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2144:	2c00      	cmp	r4, #0
 80a2146:	bf08      	it	eq
 80a2148:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a214a:	4620      	mov	r0, r4
 80a214c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a214e <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a214e:	b570      	push	{r4, r5, r6, lr}
 80a2150:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2152:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2154:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2156:	b149      	cbz	r1, 80a216c <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2158:	f000 fe86 	bl	80a2e68 <strlen>
 80a215c:	682b      	ldr	r3, [r5, #0]
 80a215e:	4602      	mov	r2, r0
 80a2160:	4621      	mov	r1, r4
 80a2162:	4628      	mov	r0, r5
    }
 80a2164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2168:	68db      	ldr	r3, [r3, #12]
 80a216a:	4718      	bx	r3
    }
 80a216c:	bd70      	pop	{r4, r5, r6, pc}

080a216e <_ZN5Print5printEPKc>:
 80a216e:	b508      	push	{r3, lr}
 80a2170:	f7ff ffed 	bl	80a214e <_ZN5Print5writeEPKc>
 80a2174:	bd08      	pop	{r3, pc}

080a2176 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2176:	6803      	ldr	r3, [r0, #0]
 80a2178:	689b      	ldr	r3, [r3, #8]
 80a217a:	4718      	bx	r3

080a217c <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a217c:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a217e:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2180:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2182:	f7ff fff8 	bl	80a2176 <_ZN5Print5printEc>
  n += print('\n');
 80a2186:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2188:	4604      	mov	r4, r0
  n += print('\n');
 80a218a:	4628      	mov	r0, r5
 80a218c:	f7ff fff3 	bl	80a2176 <_ZN5Print5printEc>
  return n;
}
 80a2190:	4420      	add	r0, r4
 80a2192:	bd38      	pop	{r3, r4, r5, pc}

080a2194 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2194:	b538      	push	{r3, r4, r5, lr}
 80a2196:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2198:	f7ff ffd9 	bl	80a214e <_ZN5Print5writeEPKc>
 80a219c:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a219e:	4628      	mov	r0, r5
 80a21a0:	f7ff ffec 	bl	80a217c <_ZN5Print7printlnEv>
  return n;
}
 80a21a4:	4420      	add	r0, r4
 80a21a6:	bd38      	pop	{r3, r4, r5, pc}

080a21a8 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a21a8:	2a01      	cmp	r2, #1
 80a21aa:	bf98      	it	ls
 80a21ac:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a21ae:	b530      	push	{r4, r5, lr}
 80a21b0:	460b      	mov	r3, r1
 80a21b2:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a21b4:	2100      	movs	r1, #0
 80a21b6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a21ba:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a21be:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a21c2:	fb05 3312 	mls	r3, r5, r2, r3
 80a21c6:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a21c8:	2b09      	cmp	r3, #9
 80a21ca:	bf94      	ite	ls
 80a21cc:	3330      	addls	r3, #48	; 0x30
 80a21ce:	3337      	addhi	r3, #55	; 0x37
 80a21d0:	b2db      	uxtb	r3, r3
 80a21d2:	4621      	mov	r1, r4
 80a21d4:	f804 3901 	strb.w	r3, [r4], #-1
 80a21d8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a21da:	2d00      	cmp	r5, #0
 80a21dc:	d1ef      	bne.n	80a21be <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a21de:	f7ff ffb6 	bl	80a214e <_ZN5Print5writeEPKc>
}
 80a21e2:	b00b      	add	sp, #44	; 0x2c
 80a21e4:	bd30      	pop	{r4, r5, pc}

080a21e6 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a21e6:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a21e8:	b922      	cbnz	r2, 80a21f4 <_ZN5Print5printEmi+0xe>
 80a21ea:	6803      	ldr	r3, [r0, #0]
 80a21ec:	b2c9      	uxtb	r1, r1
 80a21ee:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a21f0:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a21f2:	4718      	bx	r3
  else return printNumber(n, base);
 80a21f4:	b2d2      	uxtb	r2, r2
}
 80a21f6:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a21f8:	f7ff bfd6 	b.w	80a21a8 <_ZN5Print11printNumberEmh>

080a21fc <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a21fc:	f7ff bff3 	b.w	80a21e6 <_ZN5Print5printEmi>

080a2200 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2200:	2300      	movs	r3, #0
 80a2202:	461a      	mov	r2, r3
 80a2204:	4619      	mov	r1, r3
 80a2206:	6840      	ldr	r0, [r0, #4]
 80a2208:	f7ff bbaa 	b.w	80a1960 <network_on>

080a220c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a220c:	4a01      	ldr	r2, [pc, #4]	; (80a2214 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a220e:	4b02      	ldr	r3, [pc, #8]	; (80a2218 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2210:	601a      	str	r2, [r3, #0]
 80a2212:	4770      	bx	lr
 80a2214:	080a3565 	.word	0x080a3565
 80a2218:	20000514 	.word	0x20000514

080a221c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a221c:	4b02      	ldr	r3, [pc, #8]	; (80a2228 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a221e:	681a      	ldr	r2, [r3, #0]
 80a2220:	4b02      	ldr	r3, [pc, #8]	; (80a222c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2222:	601a      	str	r2, [r3, #0]
 80a2224:	4770      	bx	lr
 80a2226:	bf00      	nop
 80a2228:	20000424 	.word	0x20000424
 80a222c:	20000518 	.word	0x20000518

080a2230 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2230:	2100      	movs	r1, #0
 80a2232:	f7ff bb59 	b.w	80a18e8 <system_delay_ms>

080a2236 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2236:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2238:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a223a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a223c:	b113      	cbz	r3, 80a2244 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a223e:	2203      	movs	r2, #3
 80a2240:	4601      	mov	r1, r0
 80a2242:	4798      	blx	r3
    }
 80a2244:	4620      	mov	r0, r4
 80a2246:	bd10      	pop	{r4, pc}

080a2248 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2248:	b510      	push	{r4, lr}
 80a224a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a224c:	f7ff fff3 	bl	80a2236 <_ZNSt14_Function_baseD1Ev>
 80a2250:	4620      	mov	r0, r4
 80a2252:	bd10      	pop	{r4, pc}

080a2254 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2254:	4803      	ldr	r0, [pc, #12]	; (80a2264 <_GLOBAL__sub_I_RGB+0x10>)
 80a2256:	2300      	movs	r3, #0
 80a2258:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a225a:	4a03      	ldr	r2, [pc, #12]	; (80a2268 <_GLOBAL__sub_I_RGB+0x14>)
 80a225c:	4903      	ldr	r1, [pc, #12]	; (80a226c <_GLOBAL__sub_I_RGB+0x18>)
 80a225e:	f000 bc5f 	b.w	80a2b20 <__aeabi_atexit>
 80a2262:	bf00      	nop
 80a2264:	2000051c 	.word	0x2000051c
 80a2268:	2000048c 	.word	0x2000048c
 80a226c:	080a2249 	.word	0x080a2249

080a2270 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2270:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2272:	4b14      	ldr	r3, [pc, #80]	; (80a22c4 <serialEventRun+0x54>)
 80a2274:	b133      	cbz	r3, 80a2284 <serialEventRun+0x14>
 80a2276:	f000 f981 	bl	80a257c <_Z16_fetch_usbserialv>
 80a227a:	6803      	ldr	r3, [r0, #0]
 80a227c:	691b      	ldr	r3, [r3, #16]
 80a227e:	4798      	blx	r3
 80a2280:	2800      	cmp	r0, #0
 80a2282:	dc16      	bgt.n	80a22b2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2284:	4b10      	ldr	r3, [pc, #64]	; (80a22c8 <serialEventRun+0x58>)
 80a2286:	b133      	cbz	r3, 80a2296 <serialEventRun+0x26>
 80a2288:	f000 fa36 	bl	80a26f8 <_Z22__fetch_global_Serial1v>
 80a228c:	6803      	ldr	r3, [r0, #0]
 80a228e:	691b      	ldr	r3, [r3, #16]
 80a2290:	4798      	blx	r3
 80a2292:	2800      	cmp	r0, #0
 80a2294:	dc10      	bgt.n	80a22b8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2296:	4b0d      	ldr	r3, [pc, #52]	; (80a22cc <serialEventRun+0x5c>)
 80a2298:	b10b      	cbz	r3, 80a229e <serialEventRun+0x2e>
 80a229a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a229e:	4b0c      	ldr	r3, [pc, #48]	; (80a22d0 <serialEventRun+0x60>)
 80a22a0:	b17b      	cbz	r3, 80a22c2 <serialEventRun+0x52>
 80a22a2:	f000 f9a7 	bl	80a25f4 <_Z17_fetch_usbserial1v>
 80a22a6:	6803      	ldr	r3, [r0, #0]
 80a22a8:	691b      	ldr	r3, [r3, #16]
 80a22aa:	4798      	blx	r3
 80a22ac:	2800      	cmp	r0, #0
 80a22ae:	dc06      	bgt.n	80a22be <serialEventRun+0x4e>
 80a22b0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a22b2:	f3af 8000 	nop.w
 80a22b6:	e7e5      	b.n	80a2284 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a22b8:	f3af 8000 	nop.w
 80a22bc:	e7eb      	b.n	80a2296 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a22be:	f3af 8000 	nop.w
 80a22c2:	bd08      	pop	{r3, pc}
	...

080a22d4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a22d4:	b508      	push	{r3, lr}
	serialEventRun();
 80a22d6:	f7ff ffcb 	bl	80a2270 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a22da:	f7ff f9c3 	bl	80a1664 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a22de:	4b01      	ldr	r3, [pc, #4]	; (80a22e4 <_post_loop+0x10>)
 80a22e0:	6018      	str	r0, [r3, #0]
 80a22e2:	bd08      	pop	{r3, pc}
 80a22e4:	200009c0 	.word	0x200009c0

080a22e8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a22e8:	4802      	ldr	r0, [pc, #8]	; (80a22f4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a22ea:	4a03      	ldr	r2, [pc, #12]	; (80a22f8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a22ec:	4903      	ldr	r1, [pc, #12]	; (80a22fc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a22ee:	1a12      	subs	r2, r2, r0
 80a22f0:	f000 bd74 	b.w	80a2ddc <memcpy>
 80a22f4:	40024000 	.word	0x40024000
 80a22f8:	40024004 	.word	0x40024004
 80a22fc:	080a37b0 	.word	0x080a37b0

080a2300 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2300:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2302:	2300      	movs	r3, #0
 80a2304:	9300      	str	r3, [sp, #0]
 80a2306:	461a      	mov	r2, r3
 80a2308:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a230c:	f7ff fafe 	bl	80a190c <system_ctrl_set_result>
}
 80a2310:	b003      	add	sp, #12
 80a2312:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2318 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2318:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a231a:	8843      	ldrh	r3, [r0, #2]
 80a231c:	2b0a      	cmp	r3, #10
 80a231e:	d008      	beq.n	80a2332 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2320:	2b50      	cmp	r3, #80	; 0x50
 80a2322:	d109      	bne.n	80a2338 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2324:	4b09      	ldr	r3, [pc, #36]	; (80a234c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2326:	681b      	ldr	r3, [r3, #0]
 80a2328:	b13b      	cbz	r3, 80a233a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a232a:	b003      	add	sp, #12
 80a232c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2330:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2332:	f7ff ffe5 	bl	80a2300 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2336:	e006      	b.n	80a2346 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2338:	2300      	movs	r3, #0
 80a233a:	9300      	str	r3, [sp, #0]
 80a233c:	461a      	mov	r2, r3
 80a233e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2342:	f7ff fae3 	bl	80a190c <system_ctrl_set_result>
        break;
    }
}
 80a2346:	b003      	add	sp, #12
 80a2348:	f85d fb04 	ldr.w	pc, [sp], #4
 80a234c:	2000052c 	.word	0x2000052c

080a2350 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2350:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2352:	4c10      	ldr	r4, [pc, #64]	; (80a2394 <module_user_init_hook+0x44>)
 80a2354:	4d10      	ldr	r5, [pc, #64]	; (80a2398 <module_user_init_hook+0x48>)
 80a2356:	6823      	ldr	r3, [r4, #0]
 80a2358:	42ab      	cmp	r3, r5
 80a235a:	4b10      	ldr	r3, [pc, #64]	; (80a239c <module_user_init_hook+0x4c>)
 80a235c:	bf0c      	ite	eq
 80a235e:	2201      	moveq	r2, #1
 80a2360:	2200      	movne	r2, #0
 80a2362:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2364:	d002      	beq.n	80a236c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2366:	f7ff ffbf 	bl	80a22e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a236a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a236c:	f7ff f96a 	bl	80a1644 <HAL_RNG_GetRandomNumber>
 80a2370:	4604      	mov	r4, r0
    srand(seed);
 80a2372:	f000 fd47 	bl	80a2e04 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2376:	4b0a      	ldr	r3, [pc, #40]	; (80a23a0 <module_user_init_hook+0x50>)
 80a2378:	b113      	cbz	r3, 80a2380 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a237a:	4620      	mov	r0, r4
 80a237c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2380:	2100      	movs	r1, #0
 80a2382:	4807      	ldr	r0, [pc, #28]	; (80a23a0 <module_user_init_hook+0x50>)
 80a2384:	f7ff fb1c 	bl	80a19c0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2388:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a238c:	2100      	movs	r1, #0
 80a238e:	4805      	ldr	r0, [pc, #20]	; (80a23a4 <module_user_init_hook+0x54>)
 80a2390:	f7ff bab2 	b.w	80a18f8 <system_ctrl_set_app_request_handler>
 80a2394:	40024000 	.word	0x40024000
 80a2398:	9a271c1e 	.word	0x9a271c1e
 80a239c:	20000530 	.word	0x20000530
 80a23a0:	00000000 	.word	0x00000000
 80a23a4:	080a2319 	.word	0x080a2319

080a23a8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a23a8:	4770      	bx	lr

080a23aa <_ZN9IPAddressD0Ev>:
 80a23aa:	b510      	push	{r4, lr}
 80a23ac:	4604      	mov	r4, r0
 80a23ae:	2118      	movs	r1, #24
 80a23b0:	f000 fbbb 	bl	80a2b2a <_ZdlPvj>
 80a23b4:	4620      	mov	r0, r4
 80a23b6:	bd10      	pop	{r4, pc}

080a23b8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a23b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a23ba:	460f      	mov	r7, r1
 80a23bc:	f100 0608 	add.w	r6, r0, #8
 80a23c0:	1d05      	adds	r5, r0, #4
 80a23c2:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a23c4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a23c8:	220a      	movs	r2, #10
 80a23ca:	4638      	mov	r0, r7
 80a23cc:	f7ff ff16 	bl	80a21fc <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a23d0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a23d2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a23d4:	d007      	beq.n	80a23e6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a23d6:	2c00      	cmp	r4, #0
 80a23d8:	d0f4      	beq.n	80a23c4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a23da:	212e      	movs	r1, #46	; 0x2e
 80a23dc:	4638      	mov	r0, r7
 80a23de:	f7ff feca 	bl	80a2176 <_ZN5Print5printEc>
 80a23e2:	4404      	add	r4, r0
 80a23e4:	e7ee      	b.n	80a23c4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a23e6:	4620      	mov	r0, r4
 80a23e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a23ec <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a23ec:	b510      	push	{r4, lr}
 80a23ee:	4604      	mov	r4, r0
 80a23f0:	4b04      	ldr	r3, [pc, #16]	; (80a2404 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a23f2:	2211      	movs	r2, #17
 80a23f4:	f840 3b04 	str.w	r3, [r0], #4
 80a23f8:	2100      	movs	r1, #0
 80a23fa:	f000 fcfa 	bl	80a2df2 <memset>
{
    clear();
}
 80a23fe:	4620      	mov	r0, r4
 80a2400:	bd10      	pop	{r4, pc}
 80a2402:	bf00      	nop
 80a2404:	080a3604 	.word	0x080a3604

080a2408 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2408:	4603      	mov	r3, r0
 80a240a:	4a07      	ldr	r2, [pc, #28]	; (80a2428 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a240c:	b510      	push	{r4, lr}
 80a240e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2412:	f101 0210 	add.w	r2, r1, #16
 80a2416:	f851 4b04 	ldr.w	r4, [r1], #4
 80a241a:	4291      	cmp	r1, r2
 80a241c:	f843 4b04 	str.w	r4, [r3], #4
 80a2420:	d1f9      	bne.n	80a2416 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2422:	780a      	ldrb	r2, [r1, #0]
 80a2424:	701a      	strb	r2, [r3, #0]
}
 80a2426:	bd10      	pop	{r4, pc}
 80a2428:	080a3604 	.word	0x080a3604

080a242c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a242c:	4a02      	ldr	r2, [pc, #8]	; (80a2438 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a242e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2430:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2432:	2204      	movs	r2, #4
 80a2434:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2436:	4770      	bx	lr
 80a2438:	080a3604 	.word	0x080a3604

080a243c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a243c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a243e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2442:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2446:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a244a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a244e:	2304      	movs	r3, #4
 80a2450:	6041      	str	r1, [r0, #4]
 80a2452:	7503      	strb	r3, [r0, #20]
 80a2454:	bd10      	pop	{r4, pc}
	...

080a2458 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2458:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a245a:	4d04      	ldr	r5, [pc, #16]	; (80a246c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a245c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a245e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2462:	9500      	str	r5, [sp, #0]
 80a2464:	f7ff ffea 	bl	80a243c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2468:	b003      	add	sp, #12
 80a246a:	bd30      	pop	{r4, r5, pc}
 80a246c:	080a3604 	.word	0x080a3604

080a2470 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a2470:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a2472:	780d      	ldrb	r5, [r1, #0]
 80a2474:	788b      	ldrb	r3, [r1, #2]
 80a2476:	784a      	ldrb	r2, [r1, #1]
 80a2478:	78c9      	ldrb	r1, [r1, #3]
 80a247a:	9100      	str	r1, [sp, #0]
 80a247c:	4629      	mov	r1, r5
 80a247e:	f7ff ffdd 	bl	80a243c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a2482:	b003      	add	sp, #12
 80a2484:	bd30      	pop	{r4, r5, pc}
	...

080a2488 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a2488:	b510      	push	{r4, lr}
 80a248a:	4604      	mov	r4, r0
 80a248c:	4b02      	ldr	r3, [pc, #8]	; (80a2498 <_ZN9IPAddressC1EPKh+0x10>)
 80a248e:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a2490:	f7ff ffee 	bl	80a2470 <_ZN9IPAddressaSEPKh>
}
 80a2494:	4620      	mov	r0, r4
 80a2496:	bd10      	pop	{r4, pc}
 80a2498:	080a3604 	.word	0x080a3604

080a249c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a249c:	7441      	strb	r1, [r0, #17]
 80a249e:	4770      	bx	lr

080a24a0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a24a0:	4770      	bx	lr

080a24a2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a24a2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a24a4:	2100      	movs	r1, #0
 80a24a6:	7c00      	ldrb	r0, [r0, #16]
 80a24a8:	f7ff f9de 	bl	80a1868 <HAL_USB_USART_Receive_Data>
}
 80a24ac:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a24b0:	bf28      	it	cs
 80a24b2:	f04f 30ff 	movcs.w	r0, #4294967295
 80a24b6:	bd08      	pop	{r3, pc}

080a24b8 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a24b8:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a24ba:	2101      	movs	r1, #1
 80a24bc:	7c00      	ldrb	r0, [r0, #16]
 80a24be:	f7ff f9d3 	bl	80a1868 <HAL_USB_USART_Receive_Data>
}
 80a24c2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a24c6:	bf28      	it	cs
 80a24c8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a24cc:	bd08      	pop	{r3, pc}

080a24ce <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a24ce:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a24d0:	7c00      	ldrb	r0, [r0, #16]
 80a24d2:	f7ff f9c1 	bl	80a1858 <HAL_USB_USART_Available_Data_For_Write>
}
 80a24d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24da:	bd08      	pop	{r3, pc}

080a24dc <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a24dc:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a24de:	7c00      	ldrb	r0, [r0, #16]
 80a24e0:	f7ff f9b2 	bl	80a1848 <HAL_USB_USART_Available_Data>
}
 80a24e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a24e8:	bd08      	pop	{r3, pc}

080a24ea <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a24ea:	7c00      	ldrb	r0, [r0, #16]
 80a24ec:	f7ff b9cc 	b.w	80a1888 <HAL_USB_USART_Flush_Data>

080a24f0 <_ZN9USBSerialD0Ev>:
 80a24f0:	b510      	push	{r4, lr}
 80a24f2:	4604      	mov	r4, r0
 80a24f4:	2114      	movs	r1, #20
 80a24f6:	f000 fb18 	bl	80a2b2a <_ZdlPvj>
 80a24fa:	4620      	mov	r0, r4
 80a24fc:	bd10      	pop	{r4, pc}

080a24fe <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a24fe:	b538      	push	{r3, r4, r5, lr}
 80a2500:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2502:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2504:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2506:	f7ff f9a7 	bl	80a1858 <HAL_USB_USART_Available_Data_For_Write>
 80a250a:	2800      	cmp	r0, #0
 80a250c:	dc01      	bgt.n	80a2512 <_ZN9USBSerial5writeEh+0x14>
 80a250e:	7c60      	ldrb	r0, [r4, #17]
 80a2510:	b128      	cbz	r0, 80a251e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2512:	4629      	mov	r1, r5
 80a2514:	7c20      	ldrb	r0, [r4, #16]
 80a2516:	f7ff f9af 	bl	80a1878 <HAL_USB_USART_Send_Data>
 80a251a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a251e:	bd38      	pop	{r3, r4, r5, pc}

080a2520 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2520:	b510      	push	{r4, lr}
 80a2522:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2524:	2300      	movs	r3, #0
 80a2526:	6063      	str	r3, [r4, #4]
 80a2528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a252c:	60a3      	str	r3, [r4, #8]
 80a252e:	4b05      	ldr	r3, [pc, #20]	; (80a2544 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2530:	4608      	mov	r0, r1
 80a2532:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2534:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2536:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2538:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a253a:	4611      	mov	r1, r2
 80a253c:	f7ff f974 	bl	80a1828 <HAL_USB_USART_Init>
}
 80a2540:	4620      	mov	r0, r4
 80a2542:	bd10      	pop	{r4, pc}
 80a2544:	080a3618 	.word	0x080a3618

080a2548 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2548:	2200      	movs	r2, #0
 80a254a:	7c00      	ldrb	r0, [r0, #16]
 80a254c:	f7ff b974 	b.w	80a1838 <HAL_USB_USART_Begin>

080a2550 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2550:	b510      	push	{r4, lr}
 80a2552:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2554:	2214      	movs	r2, #20
 80a2556:	2100      	movs	r1, #0
 80a2558:	f000 fc4b 	bl	80a2df2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a255c:	4b05      	ldr	r3, [pc, #20]	; (80a2574 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a255e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2560:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2562:	4b05      	ldr	r3, [pc, #20]	; (80a2578 <_Z19acquireSerialBufferv+0x28>)
 80a2564:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2566:	f240 1301 	movw	r3, #257	; 0x101
 80a256a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a256c:	2381      	movs	r3, #129	; 0x81
 80a256e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2570:	bd10      	pop	{r4, pc}
 80a2572:	bf00      	nop
 80a2574:	200005b9 	.word	0x200005b9
 80a2578:	20000538 	.word	0x20000538

080a257c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a257c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a257e:	4d0e      	ldr	r5, [pc, #56]	; (80a25b8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2580:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2582:	a801      	add	r0, sp, #4
 80a2584:	f7ff ffe4 	bl	80a2550 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2588:	6829      	ldr	r1, [r5, #0]
 80a258a:	f011 0401 	ands.w	r4, r1, #1
 80a258e:	d110      	bne.n	80a25b2 <_Z16_fetch_usbserialv+0x36>
 80a2590:	4628      	mov	r0, r5
 80a2592:	f7fd fd95 	bl	80a00c0 <__cxa_guard_acquire>
 80a2596:	b160      	cbz	r0, 80a25b2 <_Z16_fetch_usbserialv+0x36>
 80a2598:	aa01      	add	r2, sp, #4
 80a259a:	4621      	mov	r1, r4
 80a259c:	4807      	ldr	r0, [pc, #28]	; (80a25bc <_Z16_fetch_usbserialv+0x40>)
 80a259e:	f7ff ffbf 	bl	80a2520 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a25a2:	4628      	mov	r0, r5
 80a25a4:	f7fd fd91 	bl	80a00ca <__cxa_guard_release>
 80a25a8:	4a05      	ldr	r2, [pc, #20]	; (80a25c0 <_Z16_fetch_usbserialv+0x44>)
 80a25aa:	4906      	ldr	r1, [pc, #24]	; (80a25c4 <_Z16_fetch_usbserialv+0x48>)
 80a25ac:	4803      	ldr	r0, [pc, #12]	; (80a25bc <_Z16_fetch_usbserialv+0x40>)
 80a25ae:	f000 fab7 	bl	80a2b20 <__aeabi_atexit>
	return _usbserial;
}
 80a25b2:	4802      	ldr	r0, [pc, #8]	; (80a25bc <_Z16_fetch_usbserialv+0x40>)
 80a25b4:	b007      	add	sp, #28
 80a25b6:	bd30      	pop	{r4, r5, pc}
 80a25b8:	20000534 	.word	0x20000534
 80a25bc:	200006bc 	.word	0x200006bc
 80a25c0:	2000048c 	.word	0x2000048c
 80a25c4:	080a24a1 	.word	0x080a24a1

080a25c8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a25c8:	b510      	push	{r4, lr}
 80a25ca:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a25cc:	2214      	movs	r2, #20
 80a25ce:	2100      	movs	r1, #0
 80a25d0:	f000 fc0f 	bl	80a2df2 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a25d4:	4b05      	ldr	r3, [pc, #20]	; (80a25ec <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a25d6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a25d8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a25da:	4b05      	ldr	r3, [pc, #20]	; (80a25f0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a25dc:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a25de:	f240 1301 	movw	r3, #257	; 0x101
 80a25e2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a25e4:	2381      	movs	r3, #129	; 0x81
 80a25e6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a25e8:	bd10      	pop	{r4, pc}
 80a25ea:	bf00      	nop
 80a25ec:	2000076c 	.word	0x2000076c
 80a25f0:	200006d4 	.word	0x200006d4

080a25f4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a25f4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a25f6:	4c0e      	ldr	r4, [pc, #56]	; (80a2630 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a25f8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a25fa:	a801      	add	r0, sp, #4
 80a25fc:	f7ff ffe4 	bl	80a25c8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2600:	6823      	ldr	r3, [r4, #0]
 80a2602:	07db      	lsls	r3, r3, #31
 80a2604:	d410      	bmi.n	80a2628 <_Z17_fetch_usbserial1v+0x34>
 80a2606:	4620      	mov	r0, r4
 80a2608:	f7fd fd5a 	bl	80a00c0 <__cxa_guard_acquire>
 80a260c:	b160      	cbz	r0, 80a2628 <_Z17_fetch_usbserial1v+0x34>
 80a260e:	aa01      	add	r2, sp, #4
 80a2610:	2101      	movs	r1, #1
 80a2612:	4808      	ldr	r0, [pc, #32]	; (80a2634 <_Z17_fetch_usbserial1v+0x40>)
 80a2614:	f7ff ff84 	bl	80a2520 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2618:	4620      	mov	r0, r4
 80a261a:	f7fd fd56 	bl	80a00ca <__cxa_guard_release>
 80a261e:	4a06      	ldr	r2, [pc, #24]	; (80a2638 <_Z17_fetch_usbserial1v+0x44>)
 80a2620:	4906      	ldr	r1, [pc, #24]	; (80a263c <_Z17_fetch_usbserial1v+0x48>)
 80a2622:	4804      	ldr	r0, [pc, #16]	; (80a2634 <_Z17_fetch_usbserial1v+0x40>)
 80a2624:	f000 fa7c 	bl	80a2b20 <__aeabi_atexit>
  return _usbserial1;
}
 80a2628:	4802      	ldr	r0, [pc, #8]	; (80a2634 <_Z17_fetch_usbserial1v+0x40>)
 80a262a:	b006      	add	sp, #24
 80a262c:	bd10      	pop	{r4, pc}
 80a262e:	bf00      	nop
 80a2630:	200006d0 	.word	0x200006d0
 80a2634:	20000758 	.word	0x20000758
 80a2638:	2000048c 	.word	0x2000048c
 80a263c:	080a24a1 	.word	0x080a24a1

080a2640 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2640:	4770      	bx	lr

080a2642 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2642:	7441      	strb	r1, [r0, #17]
 80a2644:	4770      	bx	lr

080a2646 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2646:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2648:	7c00      	ldrb	r0, [r0, #16]
 80a264a:	f7ff f853 	bl	80a16f4 <HAL_USART_Available_Data_For_Write>
}
 80a264e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2652:	bd08      	pop	{r3, pc}

080a2654 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2654:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2656:	7c00      	ldrb	r0, [r0, #16]
 80a2658:	f7ff f824 	bl	80a16a4 <HAL_USART_Available_Data>
}
 80a265c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2660:	bd08      	pop	{r3, pc}

080a2662 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2662:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2664:	7c00      	ldrb	r0, [r0, #16]
 80a2666:	f7ff f82d 	bl	80a16c4 <HAL_USART_Peek_Data>
}
 80a266a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a266e:	bf28      	it	cs
 80a2670:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2674:	bd08      	pop	{r3, pc}

080a2676 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2676:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2678:	7c00      	ldrb	r0, [r0, #16]
 80a267a:	f7ff f81b 	bl	80a16b4 <HAL_USART_Read_Data>
}
 80a267e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2682:	bf28      	it	cs
 80a2684:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2688:	bd08      	pop	{r3, pc}

080a268a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a268a:	7c00      	ldrb	r0, [r0, #16]
 80a268c:	f7ff b822 	b.w	80a16d4 <HAL_USART_Flush_Data>

080a2690 <_ZN11USARTSerialD0Ev>:
 80a2690:	b510      	push	{r4, lr}
 80a2692:	4604      	mov	r4, r0
 80a2694:	2114      	movs	r1, #20
 80a2696:	f000 fa48 	bl	80a2b2a <_ZdlPvj>
 80a269a:	4620      	mov	r0, r4
 80a269c:	bd10      	pop	{r4, pc}

080a269e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a269e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a26a0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a26a2:	4604      	mov	r4, r0
 80a26a4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a26a6:	b925      	cbnz	r5, 80a26b2 <_ZN11USARTSerial5writeEh+0x14>
 80a26a8:	7c00      	ldrb	r0, [r0, #16]
 80a26aa:	f7ff f823 	bl	80a16f4 <HAL_USART_Available_Data_For_Write>
 80a26ae:	2800      	cmp	r0, #0
 80a26b0:	dd05      	ble.n	80a26be <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a26b2:	4631      	mov	r1, r6
 80a26b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a26b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a26ba:	f7fe bfeb 	b.w	80a1694 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a26be:	4628      	mov	r0, r5
 80a26c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080a26c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a26c4:	b510      	push	{r4, lr}
 80a26c6:	4604      	mov	r4, r0
 80a26c8:	4608      	mov	r0, r1
 80a26ca:	4611      	mov	r1, r2
 80a26cc:	2200      	movs	r2, #0
 80a26ce:	6062      	str	r2, [r4, #4]
 80a26d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a26d4:	60a2      	str	r2, [r4, #8]
 80a26d6:	4a05      	ldr	r2, [pc, #20]	; (80a26ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a26d8:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a26da:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a26dc:	2201      	movs	r2, #1
 80a26de:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a26e0:	461a      	mov	r2, r3
 80a26e2:	f7fe ffcf 	bl	80a1684 <HAL_USART_Init>
}
 80a26e6:	4620      	mov	r0, r4
 80a26e8:	bd10      	pop	{r4, pc}
 80a26ea:	bf00      	nop
 80a26ec:	080a3648 	.word	0x080a3648

080a26f0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a26f0:	7c00      	ldrb	r0, [r0, #16]
 80a26f2:	f7fe bff7 	b.w	80a16e4 <HAL_USART_Is_Enabled>
	...

080a26f8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a26f8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a26fa:	4d0c      	ldr	r5, [pc, #48]	; (80a272c <_Z22__fetch_global_Serial1v+0x34>)
 80a26fc:	6829      	ldr	r1, [r5, #0]
 80a26fe:	f011 0401 	ands.w	r4, r1, #1
 80a2702:	d111      	bne.n	80a2728 <_Z22__fetch_global_Serial1v+0x30>
 80a2704:	4628      	mov	r0, r5
 80a2706:	f7fd fcdb 	bl	80a00c0 <__cxa_guard_acquire>
 80a270a:	b168      	cbz	r0, 80a2728 <_Z22__fetch_global_Serial1v+0x30>
 80a270c:	4a08      	ldr	r2, [pc, #32]	; (80a2730 <_Z22__fetch_global_Serial1v+0x38>)
 80a270e:	4621      	mov	r1, r4
 80a2710:	4b08      	ldr	r3, [pc, #32]	; (80a2734 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2712:	4809      	ldr	r0, [pc, #36]	; (80a2738 <_Z22__fetch_global_Serial1v+0x40>)
 80a2714:	f7ff ffd6 	bl	80a26c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2718:	4628      	mov	r0, r5
 80a271a:	f7fd fcd6 	bl	80a00ca <__cxa_guard_release>
 80a271e:	4a07      	ldr	r2, [pc, #28]	; (80a273c <_Z22__fetch_global_Serial1v+0x44>)
 80a2720:	4907      	ldr	r1, [pc, #28]	; (80a2740 <_Z22__fetch_global_Serial1v+0x48>)
 80a2722:	4805      	ldr	r0, [pc, #20]	; (80a2738 <_Z22__fetch_global_Serial1v+0x40>)
 80a2724:	f000 f9fc 	bl	80a2b20 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2728:	4803      	ldr	r0, [pc, #12]	; (80a2738 <_Z22__fetch_global_Serial1v+0x40>)
 80a272a:	bd38      	pop	{r3, r4, r5, pc}
 80a272c:	20000908 	.word	0x20000908
 80a2730:	2000090c 	.word	0x2000090c
 80a2734:	20000884 	.word	0x20000884
 80a2738:	20000870 	.word	0x20000870
 80a273c:	2000048c 	.word	0x2000048c
 80a2740:	080a2641 	.word	0x080a2641

080a2744 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2744:	4770      	bx	lr

080a2746 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2746:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2748:	4606      	mov	r6, r0
 80a274a:	4615      	mov	r5, r2
 80a274c:	460c      	mov	r4, r1
 80a274e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2750:	42bc      	cmp	r4, r7
 80a2752:	d006      	beq.n	80a2762 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2754:	6833      	ldr	r3, [r6, #0]
 80a2756:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a275a:	689b      	ldr	r3, [r3, #8]
 80a275c:	4630      	mov	r0, r6
 80a275e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2760:	e7f6      	b.n	80a2750 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2762:	4628      	mov	r0, r5
 80a2764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2766 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2766:	2200      	movs	r2, #0
 80a2768:	7c00      	ldrb	r0, [r0, #16]
 80a276a:	f7fe bfe3 	b.w	80a1734 <HAL_I2C_Write_Data>

080a276e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a276e:	2100      	movs	r1, #0
 80a2770:	7c00      	ldrb	r0, [r0, #16]
 80a2772:	f7fe bfe7 	b.w	80a1744 <HAL_I2C_Available_Data>

080a2776 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2776:	2100      	movs	r1, #0
 80a2778:	7c00      	ldrb	r0, [r0, #16]
 80a277a:	f7fe bfeb 	b.w	80a1754 <HAL_I2C_Read_Data>

080a277e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a277e:	2100      	movs	r1, #0
 80a2780:	7c00      	ldrb	r0, [r0, #16]
 80a2782:	f7fe bfef 	b.w	80a1764 <HAL_I2C_Peek_Data>

080a2786 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2786:	2100      	movs	r1, #0
 80a2788:	7c00      	ldrb	r0, [r0, #16]
 80a278a:	f7fe bff3 	b.w	80a1774 <HAL_I2C_Flush_Data>

080a278e <_ZN7TwoWireD0Ev>:
 80a278e:	b510      	push	{r4, lr}
 80a2790:	4604      	mov	r4, r0
 80a2792:	2114      	movs	r1, #20
 80a2794:	f000 f9c9 	bl	80a2b2a <_ZdlPvj>
 80a2798:	4620      	mov	r0, r4
 80a279a:	bd10      	pop	{r4, pc}

080a279c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a279c:	b510      	push	{r4, lr}
 80a279e:	4604      	mov	r4, r0
 80a27a0:	4608      	mov	r0, r1
 80a27a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a27a6:	60a3      	str	r3, [r4, #8]
 80a27a8:	4b04      	ldr	r3, [pc, #16]	; (80a27bc <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a27aa:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a27ac:	7420      	strb	r0, [r4, #16]
 80a27ae:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a27b0:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a27b2:	f7fe ffef 	bl	80a1794 <HAL_I2C_Init>

}
 80a27b6:	4620      	mov	r0, r4
 80a27b8:	bd10      	pop	{r4, pc}
 80a27ba:	bf00      	nop
 80a27bc:	080a3678 	.word	0x080a3678

080a27c0 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a27c0:	2300      	movs	r3, #0
 80a27c2:	461a      	mov	r2, r3
 80a27c4:	4619      	mov	r1, r3
 80a27c6:	7c00      	ldrb	r0, [r0, #16]
 80a27c8:	f7fe bf9c 	b.w	80a1704 <HAL_I2C_Begin>

080a27cc <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a27cc:	2200      	movs	r2, #0
 80a27ce:	7c00      	ldrb	r0, [r0, #16]
 80a27d0:	f7fe bfa0 	b.w	80a1714 <HAL_I2C_Begin_Transmission>

080a27d4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a27d4:	b2c9      	uxtb	r1, r1
 80a27d6:	f7ff bff9 	b.w	80a27cc <_ZN7TwoWire17beginTransmissionEh>

080a27da <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a27da:	2200      	movs	r2, #0
 80a27dc:	7c00      	ldrb	r0, [r0, #16]
 80a27de:	f7fe bfa1 	b.w	80a1724 <HAL_I2C_End_Transmission>

080a27e2 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a27e2:	2101      	movs	r1, #1
 80a27e4:	f7ff bff9 	b.w	80a27da <_ZN7TwoWire15endTransmissionEh>

080a27e8 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a27e8:	2100      	movs	r1, #0
 80a27ea:	7c00      	ldrb	r0, [r0, #16]
 80a27ec:	f7fe bfca 	b.w	80a1784 <HAL_I2C_Is_Enabled>

080a27f0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a27f0:	2200      	movs	r2, #0
 80a27f2:	4611      	mov	r1, r2
 80a27f4:	6840      	ldr	r0, [r0, #4]
 80a27f6:	f7ff b8ab 	b.w	80a1950 <network_ready>

080a27fa <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a27fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a27fc:	4616      	mov	r6, r2
 80a27fe:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2800:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2802:	460f      	mov	r7, r1
 80a2804:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a2806:	2100      	movs	r1, #0
 80a2808:	a803      	add	r0, sp, #12
 80a280a:	f000 faf2 	bl	80a2df2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a280e:	4630      	mov	r0, r6
 80a2810:	f000 fb2a 	bl	80a2e68 <strlen>
 80a2814:	2500      	movs	r5, #0
 80a2816:	9500      	str	r5, [sp, #0]
 80a2818:	b281      	uxth	r1, r0
 80a281a:	687b      	ldr	r3, [r7, #4]
 80a281c:	aa03      	add	r2, sp, #12
 80a281e:	4630      	mov	r0, r6
 80a2820:	f7ff f842 	bl	80a18a8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2824:	b120      	cbz	r0, 80a2830 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a2826:	4629      	mov	r1, r5
 80a2828:	4620      	mov	r0, r4
 80a282a:	f7ff fdff 	bl	80a242c <_ZN9IPAddressC1Em>
 80a282e:	e003      	b.n	80a2838 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2830:	a903      	add	r1, sp, #12
 80a2832:	4620      	mov	r0, r4
 80a2834:	f7ff fde8 	bl	80a2408 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a2838:	4620      	mov	r0, r4
 80a283a:	b009      	add	sp, #36	; 0x24
 80a283c:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a283e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a283e:	2200      	movs	r2, #0
 80a2840:	4611      	mov	r1, r2
 80a2842:	6840      	ldr	r0, [r0, #4]
 80a2844:	f7ff b8a4 	b.w	80a1990 <network_listening>

080a2848 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a2848:	2200      	movs	r2, #0
 80a284a:	4611      	mov	r1, r2
 80a284c:	6840      	ldr	r0, [r0, #4]
 80a284e:	f7ff b8af 	b.w	80a19b0 <network_get_listen_timeout>

080a2852 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2852:	2200      	movs	r2, #0
 80a2854:	6840      	ldr	r0, [r0, #4]
 80a2856:	f7ff b8a3 	b.w	80a19a0 <network_set_listen_timeout>

080a285a <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a285a:	2200      	movs	r2, #0
 80a285c:	f081 0101 	eor.w	r1, r1, #1
 80a2860:	6840      	ldr	r0, [r0, #4]
 80a2862:	f7ff b88d 	b.w	80a1980 <network_listen>

080a2866 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a2866:	2300      	movs	r3, #0
 80a2868:	461a      	mov	r2, r3
 80a286a:	4619      	mov	r1, r3
 80a286c:	6840      	ldr	r0, [r0, #4]
 80a286e:	f7ff b87f 	b.w	80a1970 <network_off>

080a2872 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2872:	2200      	movs	r2, #0
 80a2874:	4611      	mov	r1, r2
 80a2876:	6840      	ldr	r0, [r0, #4]
 80a2878:	f7ff b85a 	b.w	80a1930 <network_connecting>

080a287c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a287c:	2200      	movs	r2, #0
 80a287e:	2102      	movs	r1, #2
 80a2880:	6840      	ldr	r0, [r0, #4]
 80a2882:	f7ff b85d 	b.w	80a1940 <network_disconnect>

080a2886 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a2886:	2300      	movs	r3, #0
 80a2888:	461a      	mov	r2, r3
 80a288a:	6840      	ldr	r0, [r0, #4]
 80a288c:	f7ff b848 	b.w	80a1920 <network_connect>

080a2890 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2890:	4b02      	ldr	r3, [pc, #8]	; (80a289c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a2892:	2204      	movs	r2, #4
 80a2894:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a2896:	4a02      	ldr	r2, [pc, #8]	; (80a28a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2898:	601a      	str	r2, [r3, #0]
 80a289a:	4770      	bx	lr
 80a289c:	20000990 	.word	0x20000990
 80a28a0:	080a36a0 	.word	0x080a36a0

080a28a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a28a4:	2300      	movs	r3, #0
 80a28a6:	461a      	mov	r2, r3
 80a28a8:	6840      	ldr	r0, [r0, #4]
 80a28aa:	f7ff b839 	b.w	80a1920 <network_connect>

080a28ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a28ae:	2200      	movs	r2, #0
 80a28b0:	2102      	movs	r1, #2
 80a28b2:	6840      	ldr	r0, [r0, #4]
 80a28b4:	f7ff b844 	b.w	80a1940 <network_disconnect>

080a28b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a28b8:	2200      	movs	r2, #0
 80a28ba:	4611      	mov	r1, r2
 80a28bc:	6840      	ldr	r0, [r0, #4]
 80a28be:	f7ff b837 	b.w	80a1930 <network_connecting>

080a28c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a28c2:	2200      	movs	r2, #0
 80a28c4:	4611      	mov	r1, r2
 80a28c6:	6840      	ldr	r0, [r0, #4]
 80a28c8:	f7ff b842 	b.w	80a1950 <network_ready>

080a28cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a28cc:	2300      	movs	r3, #0
 80a28ce:	461a      	mov	r2, r3
 80a28d0:	4619      	mov	r1, r3
 80a28d2:	6840      	ldr	r0, [r0, #4]
 80a28d4:	f7ff b844 	b.w	80a1960 <network_on>

080a28d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a28d8:	2300      	movs	r3, #0
 80a28da:	461a      	mov	r2, r3
 80a28dc:	4619      	mov	r1, r3
 80a28de:	6840      	ldr	r0, [r0, #4]
 80a28e0:	f7ff b846 	b.w	80a1970 <network_off>

080a28e4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a28e4:	2200      	movs	r2, #0
 80a28e6:	f081 0101 	eor.w	r1, r1, #1
 80a28ea:	6840      	ldr	r0, [r0, #4]
 80a28ec:	f7ff b848 	b.w	80a1980 <network_listen>

080a28f0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a28f0:	2200      	movs	r2, #0
 80a28f2:	6840      	ldr	r0, [r0, #4]
 80a28f4:	f7ff b854 	b.w	80a19a0 <network_set_listen_timeout>

080a28f8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a28f8:	2200      	movs	r2, #0
 80a28fa:	4611      	mov	r1, r2
 80a28fc:	6840      	ldr	r0, [r0, #4]
 80a28fe:	f7ff b857 	b.w	80a19b0 <network_get_listen_timeout>

080a2902 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2902:	2200      	movs	r2, #0
 80a2904:	4611      	mov	r1, r2
 80a2906:	6840      	ldr	r0, [r0, #4]
 80a2908:	f7ff b842 	b.w	80a1990 <network_listening>

080a290c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a290c:	b570      	push	{r4, r5, r6, lr}
 80a290e:	4616      	mov	r6, r2
 80a2910:	b08e      	sub	sp, #56	; 0x38
 80a2912:	4604      	mov	r4, r0
    IPAddress addr;
 80a2914:	a808      	add	r0, sp, #32
 80a2916:	f7ff fd69 	bl	80a23ec <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a291a:	2211      	movs	r2, #17
 80a291c:	2100      	movs	r1, #0
 80a291e:	a803      	add	r0, sp, #12
 80a2920:	f000 fa67 	bl	80a2df2 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2924:	4630      	mov	r0, r6
 80a2926:	f000 fa9f 	bl	80a2e68 <strlen>
 80a292a:	2500      	movs	r5, #0
 80a292c:	4b0a      	ldr	r3, [pc, #40]	; (80a2958 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a292e:	9500      	str	r5, [sp, #0]
 80a2930:	b281      	uxth	r1, r0
 80a2932:	685b      	ldr	r3, [r3, #4]
 80a2934:	aa03      	add	r2, sp, #12
 80a2936:	4630      	mov	r0, r6
 80a2938:	f7fe ffb6 	bl	80a18a8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a293c:	b120      	cbz	r0, 80a2948 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a293e:	4629      	mov	r1, r5
 80a2940:	4620      	mov	r0, r4
 80a2942:	f7ff fd73 	bl	80a242c <_ZN9IPAddressC1Em>
 80a2946:	e003      	b.n	80a2950 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2948:	a903      	add	r1, sp, #12
 80a294a:	4620      	mov	r0, r4
 80a294c:	f7ff fd5c 	bl	80a2408 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2950:	4620      	mov	r0, r4
 80a2952:	b00e      	add	sp, #56	; 0x38
 80a2954:	bd70      	pop	{r4, r5, r6, pc}
 80a2956:	bf00      	nop
 80a2958:	20000990 	.word	0x20000990

080a295c <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a295c:	4b03      	ldr	r3, [pc, #12]	; (80a296c <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a295e:	4a04      	ldr	r2, [pc, #16]	; (80a2970 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a2960:	2804      	cmp	r0, #4
 80a2962:	bf0c      	ite	eq
 80a2964:	4610      	moveq	r0, r2
 80a2966:	4618      	movne	r0, r3
 80a2968:	4770      	bx	lr
 80a296a:	bf00      	nop
 80a296c:	20000998 	.word	0x20000998
 80a2970:	20000990 	.word	0x20000990

080a2974 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2974:	4b02      	ldr	r3, [pc, #8]	; (80a2980 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2976:	4a03      	ldr	r2, [pc, #12]	; (80a2984 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2978:	601a      	str	r2, [r3, #0]
 80a297a:	2200      	movs	r2, #0
 80a297c:	605a      	str	r2, [r3, #4]
 80a297e:	4770      	bx	lr
 80a2980:	20000998 	.word	0x20000998
 80a2984:	080a36d4 	.word	0x080a36d4

080a2988 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2988:	b510      	push	{r4, lr}
 80a298a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a298c:	480f      	ldr	r0, [pc, #60]	; (80a29cc <pinAvailable+0x44>)
 80a298e:	f7ff f8bf 	bl	80a1b10 <_ZN8SPIClass9isEnabledEv>
 80a2992:	b128      	cbz	r0, 80a29a0 <pinAvailable+0x18>
 80a2994:	f1a4 030d 	sub.w	r3, r4, #13
 80a2998:	2b02      	cmp	r3, #2
 80a299a:	d801      	bhi.n	80a29a0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a299c:	2000      	movs	r0, #0
 80a299e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a29a0:	f000 f89e 	bl	80a2ae0 <_Z19__fetch_global_Wirev>
 80a29a4:	f7ff ff20 	bl	80a27e8 <_ZN7TwoWire9isEnabledEv>
 80a29a8:	b108      	cbz	r0, 80a29ae <pinAvailable+0x26>
 80a29aa:	2c01      	cmp	r4, #1
 80a29ac:	d9f6      	bls.n	80a299c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a29ae:	f7ff fea3 	bl	80a26f8 <_Z22__fetch_global_Serial1v>
 80a29b2:	f7ff fe9d 	bl	80a26f0 <_ZN11USARTSerial9isEnabledEv>
 80a29b6:	b118      	cbz	r0, 80a29c0 <pinAvailable+0x38>
 80a29b8:	f1a4 0312 	sub.w	r3, r4, #18
 80a29bc:	2b01      	cmp	r3, #1
 80a29be:	d9ed      	bls.n	80a299c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a29c0:	2c17      	cmp	r4, #23
 80a29c2:	bf8c      	ite	hi
 80a29c4:	2000      	movhi	r0, #0
 80a29c6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a29c8:	bd10      	pop	{r4, pc}
 80a29ca:	bf00      	nop
 80a29cc:	200009a0 	.word	0x200009a0

080a29d0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a29d0:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a29d2:	b538      	push	{r3, r4, r5, lr}
 80a29d4:	4604      	mov	r4, r0
 80a29d6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a29d8:	d80a      	bhi.n	80a29f0 <pinMode+0x20>
 80a29da:	29ff      	cmp	r1, #255	; 0xff
 80a29dc:	d008      	beq.n	80a29f0 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a29de:	f7ff ffd3 	bl	80a2988 <pinAvailable>
 80a29e2:	b128      	cbz	r0, 80a29f0 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a29e4:	4629      	mov	r1, r5
 80a29e6:	4620      	mov	r0, r4
}
 80a29e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a29ec:	f7fe bdd2 	b.w	80a1594 <HAL_Pin_Mode>
 80a29f0:	bd38      	pop	{r3, r4, r5, pc}

080a29f2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a29f2:	b538      	push	{r3, r4, r5, lr}
 80a29f4:	4604      	mov	r4, r0
 80a29f6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a29f8:	f7fe fdd4 	bl	80a15a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a29fc:	28ff      	cmp	r0, #255	; 0xff
 80a29fe:	d010      	beq.n	80a2a22 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a2a00:	2806      	cmp	r0, #6
 80a2a02:	d804      	bhi.n	80a2a0e <digitalWrite+0x1c>
 80a2a04:	234d      	movs	r3, #77	; 0x4d
 80a2a06:	fa23 f000 	lsr.w	r0, r3, r0
 80a2a0a:	07c3      	lsls	r3, r0, #31
 80a2a0c:	d409      	bmi.n	80a2a22 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a2a0e:	4620      	mov	r0, r4
 80a2a10:	f7ff ffba 	bl	80a2988 <pinAvailable>
 80a2a14:	b128      	cbz	r0, 80a2a22 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2a16:	4629      	mov	r1, r5
 80a2a18:	4620      	mov	r0, r4
}
 80a2a1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a2a1e:	f7fe bdc9 	b.w	80a15b4 <HAL_GPIO_Write>
 80a2a22:	bd38      	pop	{r3, r4, r5, pc}

080a2a24 <shiftOut>:
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a2a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2a28:	4690      	mov	r8, r2
 80a2a2a:	461e      	mov	r6, r3
 80a2a2c:	4607      	mov	r7, r0
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
 80a2a2e:	460d      	mov	r5, r1
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
 80a2a30:	2407      	movs	r4, #7
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
 80a2a32:	f1b8 0f00 	cmp.w	r8, #0
 80a2a36:	d104      	bne.n	80a2a42 <shiftOut+0x1e>
      digitalWrite(dataPin, !!(val & (1 << i)));
 80a2a38:	f1c4 0107 	rsb	r1, r4, #7
 80a2a3c:	fa46 f101 	asr.w	r1, r6, r1
 80a2a40:	e001      	b.n	80a2a46 <shiftOut+0x22>
    else
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
 80a2a42:	fa46 f104 	asr.w	r1, r6, r4
 80a2a46:	f001 0101 	and.w	r1, r1, #1
 80a2a4a:	4638      	mov	r0, r7
 80a2a4c:	f7ff ffd1 	bl	80a29f2 <digitalWrite>

    digitalWrite(clockPin, HIGH);
 80a2a50:	2101      	movs	r1, #1
 80a2a52:	4628      	mov	r0, r5
 80a2a54:	f7ff ffcd 	bl	80a29f2 <digitalWrite>
    digitalWrite(clockPin, LOW);
 80a2a58:	2100      	movs	r1, #0
 80a2a5a:	4628      	mov	r0, r5
 80a2a5c:	f7ff ffc9 	bl	80a29f2 <digitalWrite>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
 80a2a60:	f114 34ff 	adds.w	r4, r4, #4294967295
 80a2a64:	d2e5      	bcs.n	80a2a32 <shiftOut+0xe>
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));

    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);
  }
}
 80a2a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080a2a6c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2a6c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2a6e:	4c0c      	ldr	r4, [pc, #48]	; (80a2aa0 <_GLOBAL__sub_I_SPI+0x34>)
 80a2a70:	4e0c      	ldr	r6, [pc, #48]	; (80a2aa4 <_GLOBAL__sub_I_SPI+0x38>)
 80a2a72:	4d0d      	ldr	r5, [pc, #52]	; (80a2aa8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2a74:	2100      	movs	r1, #0
 80a2a76:	4620      	mov	r0, r4
 80a2a78:	f7fe ffca 	bl	80a1a10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2a7c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2a7e:	4c0b      	ldr	r4, [pc, #44]	; (80a2aac <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2a80:	4632      	mov	r2, r6
 80a2a82:	4629      	mov	r1, r5
 80a2a84:	f000 f84c 	bl	80a2b20 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2a88:	2101      	movs	r1, #1
 80a2a8a:	4620      	mov	r0, r4
 80a2a8c:	f7fe ffc0 	bl	80a1a10 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2a90:	4632      	mov	r2, r6
 80a2a92:	4629      	mov	r1, r5
 80a2a94:	4620      	mov	r0, r4
 80a2a96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2a9a:	f000 b841 	b.w	80a2b20 <__aeabi_atexit>
 80a2a9e:	bf00      	nop
 80a2aa0:	200009a0 	.word	0x200009a0
 80a2aa4:	2000048c 	.word	0x2000048c
 80a2aa8:	080a1a01 	.word	0x080a1a01
 80a2aac:	200009b0 	.word	0x200009b0

080a2ab0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2ab0:	b513      	push	{r0, r1, r4, lr}
 80a2ab2:	4c08      	ldr	r4, [pc, #32]	; (80a2ad4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2ab4:	2300      	movs	r3, #0
 80a2ab6:	461a      	mov	r2, r3
 80a2ab8:	4619      	mov	r1, r3
 80a2aba:	9300      	str	r3, [sp, #0]
 80a2abc:	4620      	mov	r0, r4
 80a2abe:	f7ff fccb 	bl	80a2458 <_ZN9IPAddressC1Ehhhh>
 80a2ac2:	4620      	mov	r0, r4
 80a2ac4:	4a04      	ldr	r2, [pc, #16]	; (80a2ad8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2ac6:	4905      	ldr	r1, [pc, #20]	; (80a2adc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2ac8:	b002      	add	sp, #8
 80a2aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2ace:	f000 b827 	b.w	80a2b20 <__aeabi_atexit>
 80a2ad2:	bf00      	nop
 80a2ad4:	200009c4 	.word	0x200009c4
 80a2ad8:	2000048c 	.word	0x2000048c
 80a2adc:	080a23a9 	.word	0x080a23a9

080a2ae0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2ae0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2ae2:	4d0b      	ldr	r5, [pc, #44]	; (80a2b10 <_Z19__fetch_global_Wirev+0x30>)
 80a2ae4:	6829      	ldr	r1, [r5, #0]
 80a2ae6:	f011 0401 	ands.w	r4, r1, #1
 80a2aea:	d10f      	bne.n	80a2b0c <_Z19__fetch_global_Wirev+0x2c>
 80a2aec:	4628      	mov	r0, r5
 80a2aee:	f7fd fae7 	bl	80a00c0 <__cxa_guard_acquire>
 80a2af2:	b158      	cbz	r0, 80a2b0c <_Z19__fetch_global_Wirev+0x2c>
 80a2af4:	4621      	mov	r1, r4
 80a2af6:	4807      	ldr	r0, [pc, #28]	; (80a2b14 <_Z19__fetch_global_Wirev+0x34>)
 80a2af8:	f7ff fe50 	bl	80a279c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2afc:	4628      	mov	r0, r5
 80a2afe:	f7fd fae4 	bl	80a00ca <__cxa_guard_release>
 80a2b02:	4a05      	ldr	r2, [pc, #20]	; (80a2b18 <_Z19__fetch_global_Wirev+0x38>)
 80a2b04:	4905      	ldr	r1, [pc, #20]	; (80a2b1c <_Z19__fetch_global_Wirev+0x3c>)
 80a2b06:	4803      	ldr	r0, [pc, #12]	; (80a2b14 <_Z19__fetch_global_Wirev+0x34>)
 80a2b08:	f000 f80a 	bl	80a2b20 <__aeabi_atexit>
	return wire;
}
 80a2b0c:	4801      	ldr	r0, [pc, #4]	; (80a2b14 <_Z19__fetch_global_Wirev+0x34>)
 80a2b0e:	bd38      	pop	{r3, r4, r5, pc}
 80a2b10:	200009dc 	.word	0x200009dc
 80a2b14:	200009e0 	.word	0x200009e0
 80a2b18:	2000048c 	.word	0x2000048c
 80a2b1c:	080a2745 	.word	0x080a2745

080a2b20 <__aeabi_atexit>:
 80a2b20:	460b      	mov	r3, r1
 80a2b22:	4601      	mov	r1, r0
 80a2b24:	4618      	mov	r0, r3
 80a2b26:	f000 b94b 	b.w	80a2dc0 <__cxa_atexit>

080a2b2a <_ZdlPvj>:
 80a2b2a:	f7fd baba 	b.w	80a00a2 <_ZdlPv>
	...

080a2b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2b30:	4b18      	ldr	r3, [pc, #96]	; (80a2b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2b32:	681a      	ldr	r2, [r3, #0]
 80a2b34:	07d1      	lsls	r1, r2, #31
 80a2b36:	bf5c      	itt	pl
 80a2b38:	2201      	movpl	r2, #1
 80a2b3a:	601a      	strpl	r2, [r3, #0]
 80a2b3c:	4b16      	ldr	r3, [pc, #88]	; (80a2b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2b3e:	681a      	ldr	r2, [r3, #0]
 80a2b40:	07d2      	lsls	r2, r2, #31
 80a2b42:	bf5c      	itt	pl
 80a2b44:	2201      	movpl	r2, #1
 80a2b46:	601a      	strpl	r2, [r3, #0]
 80a2b48:	4b14      	ldr	r3, [pc, #80]	; (80a2b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2b4a:	681a      	ldr	r2, [r3, #0]
 80a2b4c:	07d0      	lsls	r0, r2, #31
 80a2b4e:	bf5c      	itt	pl
 80a2b50:	2201      	movpl	r2, #1
 80a2b52:	601a      	strpl	r2, [r3, #0]
 80a2b54:	4b12      	ldr	r3, [pc, #72]	; (80a2ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2b56:	681a      	ldr	r2, [r3, #0]
 80a2b58:	07d1      	lsls	r1, r2, #31
 80a2b5a:	bf5c      	itt	pl
 80a2b5c:	2201      	movpl	r2, #1
 80a2b5e:	601a      	strpl	r2, [r3, #0]
 80a2b60:	4b10      	ldr	r3, [pc, #64]	; (80a2ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2b62:	681a      	ldr	r2, [r3, #0]
 80a2b64:	07d2      	lsls	r2, r2, #31
 80a2b66:	bf5c      	itt	pl
 80a2b68:	2201      	movpl	r2, #1
 80a2b6a:	601a      	strpl	r2, [r3, #0]
 80a2b6c:	4b0e      	ldr	r3, [pc, #56]	; (80a2ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2b6e:	681a      	ldr	r2, [r3, #0]
 80a2b70:	07d0      	lsls	r0, r2, #31
 80a2b72:	bf5c      	itt	pl
 80a2b74:	2201      	movpl	r2, #1
 80a2b76:	601a      	strpl	r2, [r3, #0]
 80a2b78:	4b0c      	ldr	r3, [pc, #48]	; (80a2bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2b7a:	681a      	ldr	r2, [r3, #0]
 80a2b7c:	07d1      	lsls	r1, r2, #31
 80a2b7e:	bf5c      	itt	pl
 80a2b80:	2201      	movpl	r2, #1
 80a2b82:	601a      	strpl	r2, [r3, #0]
 80a2b84:	4b0a      	ldr	r3, [pc, #40]	; (80a2bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2b86:	681a      	ldr	r2, [r3, #0]
 80a2b88:	07d2      	lsls	r2, r2, #31
 80a2b8a:	bf5c      	itt	pl
 80a2b8c:	2201      	movpl	r2, #1
 80a2b8e:	601a      	strpl	r2, [r3, #0]
 80a2b90:	4770      	bx	lr
 80a2b92:	bf00      	nop
 80a2b94:	20000a10 	.word	0x20000a10
 80a2b98:	20000a0c 	.word	0x20000a0c
 80a2b9c:	20000a08 	.word	0x20000a08
 80a2ba0:	20000a04 	.word	0x20000a04
 80a2ba4:	20000a00 	.word	0x20000a00
 80a2ba8:	200009fc 	.word	0x200009fc
 80a2bac:	200009f8 	.word	0x200009f8
 80a2bb0:	200009f4 	.word	0x200009f4

080a2bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2bb4:	4b24      	ldr	r3, [pc, #144]	; (80a2c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2bb6:	681a      	ldr	r2, [r3, #0]
 80a2bb8:	07d0      	lsls	r0, r2, #31
 80a2bba:	bf5c      	itt	pl
 80a2bbc:	2201      	movpl	r2, #1
 80a2bbe:	601a      	strpl	r2, [r3, #0]
 80a2bc0:	4b22      	ldr	r3, [pc, #136]	; (80a2c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2bc2:	681a      	ldr	r2, [r3, #0]
 80a2bc4:	07d1      	lsls	r1, r2, #31
 80a2bc6:	bf5c      	itt	pl
 80a2bc8:	2201      	movpl	r2, #1
 80a2bca:	601a      	strpl	r2, [r3, #0]
 80a2bcc:	4b20      	ldr	r3, [pc, #128]	; (80a2c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2bce:	681a      	ldr	r2, [r3, #0]
 80a2bd0:	07d2      	lsls	r2, r2, #31
 80a2bd2:	bf5c      	itt	pl
 80a2bd4:	2201      	movpl	r2, #1
 80a2bd6:	601a      	strpl	r2, [r3, #0]
 80a2bd8:	4b1e      	ldr	r3, [pc, #120]	; (80a2c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2bda:	681a      	ldr	r2, [r3, #0]
 80a2bdc:	07d0      	lsls	r0, r2, #31
 80a2bde:	bf5c      	itt	pl
 80a2be0:	2201      	movpl	r2, #1
 80a2be2:	601a      	strpl	r2, [r3, #0]
 80a2be4:	4b1c      	ldr	r3, [pc, #112]	; (80a2c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2be6:	681a      	ldr	r2, [r3, #0]
 80a2be8:	07d1      	lsls	r1, r2, #31
 80a2bea:	bf5c      	itt	pl
 80a2bec:	2201      	movpl	r2, #1
 80a2bee:	601a      	strpl	r2, [r3, #0]
 80a2bf0:	4b1a      	ldr	r3, [pc, #104]	; (80a2c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2bf2:	681a      	ldr	r2, [r3, #0]
 80a2bf4:	07d2      	lsls	r2, r2, #31
 80a2bf6:	bf5c      	itt	pl
 80a2bf8:	2201      	movpl	r2, #1
 80a2bfa:	601a      	strpl	r2, [r3, #0]
 80a2bfc:	4b18      	ldr	r3, [pc, #96]	; (80a2c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2bfe:	681a      	ldr	r2, [r3, #0]
 80a2c00:	07d0      	lsls	r0, r2, #31
 80a2c02:	bf5c      	itt	pl
 80a2c04:	2201      	movpl	r2, #1
 80a2c06:	601a      	strpl	r2, [r3, #0]
 80a2c08:	4b16      	ldr	r3, [pc, #88]	; (80a2c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2c0a:	681a      	ldr	r2, [r3, #0]
 80a2c0c:	07d1      	lsls	r1, r2, #31
 80a2c0e:	bf5c      	itt	pl
 80a2c10:	2201      	movpl	r2, #1
 80a2c12:	601a      	strpl	r2, [r3, #0]
 80a2c14:	4b14      	ldr	r3, [pc, #80]	; (80a2c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2c16:	681a      	ldr	r2, [r3, #0]
 80a2c18:	07d2      	lsls	r2, r2, #31
 80a2c1a:	bf5c      	itt	pl
 80a2c1c:	2201      	movpl	r2, #1
 80a2c1e:	601a      	strpl	r2, [r3, #0]
 80a2c20:	4b12      	ldr	r3, [pc, #72]	; (80a2c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2c22:	681a      	ldr	r2, [r3, #0]
 80a2c24:	07d0      	lsls	r0, r2, #31
 80a2c26:	bf5c      	itt	pl
 80a2c28:	2201      	movpl	r2, #1
 80a2c2a:	601a      	strpl	r2, [r3, #0]
 80a2c2c:	4b10      	ldr	r3, [pc, #64]	; (80a2c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2c2e:	681a      	ldr	r2, [r3, #0]
 80a2c30:	07d1      	lsls	r1, r2, #31
 80a2c32:	bf5c      	itt	pl
 80a2c34:	2201      	movpl	r2, #1
 80a2c36:	601a      	strpl	r2, [r3, #0]
 80a2c38:	4b0e      	ldr	r3, [pc, #56]	; (80a2c74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2c3a:	681a      	ldr	r2, [r3, #0]
 80a2c3c:	07d2      	lsls	r2, r2, #31
 80a2c3e:	bf5c      	itt	pl
 80a2c40:	2201      	movpl	r2, #1
 80a2c42:	601a      	strpl	r2, [r3, #0]
 80a2c44:	4770      	bx	lr
 80a2c46:	bf00      	nop
 80a2c48:	20000a40 	.word	0x20000a40
 80a2c4c:	20000a3c 	.word	0x20000a3c
 80a2c50:	20000a38 	.word	0x20000a38
 80a2c54:	20000a34 	.word	0x20000a34
 80a2c58:	20000a30 	.word	0x20000a30
 80a2c5c:	20000a2c 	.word	0x20000a2c
 80a2c60:	20000a28 	.word	0x20000a28
 80a2c64:	20000a24 	.word	0x20000a24
 80a2c68:	20000a20 	.word	0x20000a20
 80a2c6c:	20000a1c 	.word	0x20000a1c
 80a2c70:	20000a18 	.word	0x20000a18
 80a2c74:	20000a14 	.word	0x20000a14

080a2c78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2c78:	4b24      	ldr	r3, [pc, #144]	; (80a2d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2c7a:	681a      	ldr	r2, [r3, #0]
 80a2c7c:	07d0      	lsls	r0, r2, #31
 80a2c7e:	bf5c      	itt	pl
 80a2c80:	2201      	movpl	r2, #1
 80a2c82:	601a      	strpl	r2, [r3, #0]
 80a2c84:	4b22      	ldr	r3, [pc, #136]	; (80a2d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2c86:	681a      	ldr	r2, [r3, #0]
 80a2c88:	07d1      	lsls	r1, r2, #31
 80a2c8a:	bf5c      	itt	pl
 80a2c8c:	2201      	movpl	r2, #1
 80a2c8e:	601a      	strpl	r2, [r3, #0]
 80a2c90:	4b20      	ldr	r3, [pc, #128]	; (80a2d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2c92:	681a      	ldr	r2, [r3, #0]
 80a2c94:	07d2      	lsls	r2, r2, #31
 80a2c96:	bf5c      	itt	pl
 80a2c98:	2201      	movpl	r2, #1
 80a2c9a:	601a      	strpl	r2, [r3, #0]
 80a2c9c:	4b1e      	ldr	r3, [pc, #120]	; (80a2d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2c9e:	681a      	ldr	r2, [r3, #0]
 80a2ca0:	07d0      	lsls	r0, r2, #31
 80a2ca2:	bf5c      	itt	pl
 80a2ca4:	2201      	movpl	r2, #1
 80a2ca6:	601a      	strpl	r2, [r3, #0]
 80a2ca8:	4b1c      	ldr	r3, [pc, #112]	; (80a2d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2caa:	681a      	ldr	r2, [r3, #0]
 80a2cac:	07d1      	lsls	r1, r2, #31
 80a2cae:	bf5c      	itt	pl
 80a2cb0:	2201      	movpl	r2, #1
 80a2cb2:	601a      	strpl	r2, [r3, #0]
 80a2cb4:	4b1a      	ldr	r3, [pc, #104]	; (80a2d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2cb6:	681a      	ldr	r2, [r3, #0]
 80a2cb8:	07d2      	lsls	r2, r2, #31
 80a2cba:	bf5c      	itt	pl
 80a2cbc:	2201      	movpl	r2, #1
 80a2cbe:	601a      	strpl	r2, [r3, #0]
 80a2cc0:	4b18      	ldr	r3, [pc, #96]	; (80a2d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2cc2:	681a      	ldr	r2, [r3, #0]
 80a2cc4:	07d0      	lsls	r0, r2, #31
 80a2cc6:	bf5c      	itt	pl
 80a2cc8:	2201      	movpl	r2, #1
 80a2cca:	601a      	strpl	r2, [r3, #0]
 80a2ccc:	4b16      	ldr	r3, [pc, #88]	; (80a2d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2cce:	681a      	ldr	r2, [r3, #0]
 80a2cd0:	07d1      	lsls	r1, r2, #31
 80a2cd2:	bf5c      	itt	pl
 80a2cd4:	2201      	movpl	r2, #1
 80a2cd6:	601a      	strpl	r2, [r3, #0]
 80a2cd8:	4b14      	ldr	r3, [pc, #80]	; (80a2d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2cda:	681a      	ldr	r2, [r3, #0]
 80a2cdc:	07d2      	lsls	r2, r2, #31
 80a2cde:	bf5c      	itt	pl
 80a2ce0:	2201      	movpl	r2, #1
 80a2ce2:	601a      	strpl	r2, [r3, #0]
 80a2ce4:	4b12      	ldr	r3, [pc, #72]	; (80a2d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2ce6:	681a      	ldr	r2, [r3, #0]
 80a2ce8:	07d0      	lsls	r0, r2, #31
 80a2cea:	bf5c      	itt	pl
 80a2cec:	2201      	movpl	r2, #1
 80a2cee:	601a      	strpl	r2, [r3, #0]
 80a2cf0:	4b10      	ldr	r3, [pc, #64]	; (80a2d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2cf2:	681a      	ldr	r2, [r3, #0]
 80a2cf4:	07d1      	lsls	r1, r2, #31
 80a2cf6:	bf5c      	itt	pl
 80a2cf8:	2201      	movpl	r2, #1
 80a2cfa:	601a      	strpl	r2, [r3, #0]
 80a2cfc:	4b0e      	ldr	r3, [pc, #56]	; (80a2d38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2cfe:	681a      	ldr	r2, [r3, #0]
 80a2d00:	07d2      	lsls	r2, r2, #31
 80a2d02:	bf5c      	itt	pl
 80a2d04:	2201      	movpl	r2, #1
 80a2d06:	601a      	strpl	r2, [r3, #0]
 80a2d08:	4770      	bx	lr
 80a2d0a:	bf00      	nop
 80a2d0c:	20000a70 	.word	0x20000a70
 80a2d10:	20000a6c 	.word	0x20000a6c
 80a2d14:	20000a68 	.word	0x20000a68
 80a2d18:	20000a64 	.word	0x20000a64
 80a2d1c:	20000a60 	.word	0x20000a60
 80a2d20:	20000a5c 	.word	0x20000a5c
 80a2d24:	20000a58 	.word	0x20000a58
 80a2d28:	20000a54 	.word	0x20000a54
 80a2d2c:	20000a50 	.word	0x20000a50
 80a2d30:	20000a4c 	.word	0x20000a4c
 80a2d34:	20000a48 	.word	0x20000a48
 80a2d38:	20000a44 	.word	0x20000a44

080a2d3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2d3c:	4b18      	ldr	r3, [pc, #96]	; (80a2da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2d3e:	681a      	ldr	r2, [r3, #0]
 80a2d40:	07d1      	lsls	r1, r2, #31
 80a2d42:	bf5c      	itt	pl
 80a2d44:	2201      	movpl	r2, #1
 80a2d46:	601a      	strpl	r2, [r3, #0]
 80a2d48:	4b16      	ldr	r3, [pc, #88]	; (80a2da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2d4a:	681a      	ldr	r2, [r3, #0]
 80a2d4c:	07d2      	lsls	r2, r2, #31
 80a2d4e:	bf5c      	itt	pl
 80a2d50:	2201      	movpl	r2, #1
 80a2d52:	601a      	strpl	r2, [r3, #0]
 80a2d54:	4b14      	ldr	r3, [pc, #80]	; (80a2da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2d56:	681a      	ldr	r2, [r3, #0]
 80a2d58:	07d0      	lsls	r0, r2, #31
 80a2d5a:	bf5c      	itt	pl
 80a2d5c:	2201      	movpl	r2, #1
 80a2d5e:	601a      	strpl	r2, [r3, #0]
 80a2d60:	4b12      	ldr	r3, [pc, #72]	; (80a2dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2d62:	681a      	ldr	r2, [r3, #0]
 80a2d64:	07d1      	lsls	r1, r2, #31
 80a2d66:	bf5c      	itt	pl
 80a2d68:	2201      	movpl	r2, #1
 80a2d6a:	601a      	strpl	r2, [r3, #0]
 80a2d6c:	4b10      	ldr	r3, [pc, #64]	; (80a2db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2d6e:	681a      	ldr	r2, [r3, #0]
 80a2d70:	07d2      	lsls	r2, r2, #31
 80a2d72:	bf5c      	itt	pl
 80a2d74:	2201      	movpl	r2, #1
 80a2d76:	601a      	strpl	r2, [r3, #0]
 80a2d78:	4b0e      	ldr	r3, [pc, #56]	; (80a2db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2d7a:	681a      	ldr	r2, [r3, #0]
 80a2d7c:	07d0      	lsls	r0, r2, #31
 80a2d7e:	bf5c      	itt	pl
 80a2d80:	2201      	movpl	r2, #1
 80a2d82:	601a      	strpl	r2, [r3, #0]
 80a2d84:	4b0c      	ldr	r3, [pc, #48]	; (80a2db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2d86:	681a      	ldr	r2, [r3, #0]
 80a2d88:	07d1      	lsls	r1, r2, #31
 80a2d8a:	bf5c      	itt	pl
 80a2d8c:	2201      	movpl	r2, #1
 80a2d8e:	601a      	strpl	r2, [r3, #0]
 80a2d90:	4b0a      	ldr	r3, [pc, #40]	; (80a2dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2d92:	681a      	ldr	r2, [r3, #0]
 80a2d94:	07d2      	lsls	r2, r2, #31
 80a2d96:	bf5c      	itt	pl
 80a2d98:	2201      	movpl	r2, #1
 80a2d9a:	601a      	strpl	r2, [r3, #0]
 80a2d9c:	4770      	bx	lr
 80a2d9e:	bf00      	nop
 80a2da0:	20000a90 	.word	0x20000a90
 80a2da4:	20000a8c 	.word	0x20000a8c
 80a2da8:	20000a88 	.word	0x20000a88
 80a2dac:	20000a84 	.word	0x20000a84
 80a2db0:	20000a80 	.word	0x20000a80
 80a2db4:	20000a7c 	.word	0x20000a7c
 80a2db8:	20000a78 	.word	0x20000a78
 80a2dbc:	20000a74 	.word	0x20000a74

080a2dc0 <__cxa_atexit>:
 80a2dc0:	b510      	push	{r4, lr}
 80a2dc2:	4c05      	ldr	r4, [pc, #20]	; (80a2dd8 <__cxa_atexit+0x18>)
 80a2dc4:	4613      	mov	r3, r2
 80a2dc6:	b12c      	cbz	r4, 80a2dd4 <__cxa_atexit+0x14>
 80a2dc8:	460a      	mov	r2, r1
 80a2dca:	4601      	mov	r1, r0
 80a2dcc:	2002      	movs	r0, #2
 80a2dce:	f3af 8000 	nop.w
 80a2dd2:	bd10      	pop	{r4, pc}
 80a2dd4:	4620      	mov	r0, r4
 80a2dd6:	bd10      	pop	{r4, pc}
 80a2dd8:	00000000 	.word	0x00000000

080a2ddc <memcpy>:
 80a2ddc:	b510      	push	{r4, lr}
 80a2dde:	1e43      	subs	r3, r0, #1
 80a2de0:	440a      	add	r2, r1
 80a2de2:	4291      	cmp	r1, r2
 80a2de4:	d004      	beq.n	80a2df0 <memcpy+0x14>
 80a2de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a2dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a2dee:	e7f8      	b.n	80a2de2 <memcpy+0x6>
 80a2df0:	bd10      	pop	{r4, pc}

080a2df2 <memset>:
 80a2df2:	4603      	mov	r3, r0
 80a2df4:	4402      	add	r2, r0
 80a2df6:	4293      	cmp	r3, r2
 80a2df8:	d002      	beq.n	80a2e00 <memset+0xe>
 80a2dfa:	f803 1b01 	strb.w	r1, [r3], #1
 80a2dfe:	e7fa      	b.n	80a2df6 <memset+0x4>
 80a2e00:	4770      	bx	lr
	...

080a2e04 <srand>:
 80a2e04:	b538      	push	{r3, r4, r5, lr}
 80a2e06:	4b12      	ldr	r3, [pc, #72]	; (80a2e50 <srand+0x4c>)
 80a2e08:	4605      	mov	r5, r0
 80a2e0a:	681c      	ldr	r4, [r3, #0]
 80a2e0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2e0e:	b9d3      	cbnz	r3, 80a2e46 <srand+0x42>
 80a2e10:	2018      	movs	r0, #24
 80a2e12:	f7fe fddd 	bl	80a19d0 <malloc>
 80a2e16:	f243 330e 	movw	r3, #13070	; 0x330e
 80a2e1a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a2e1c:	8003      	strh	r3, [r0, #0]
 80a2e1e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a2e22:	8043      	strh	r3, [r0, #2]
 80a2e24:	f241 2334 	movw	r3, #4660	; 0x1234
 80a2e28:	8083      	strh	r3, [r0, #4]
 80a2e2a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a2e2e:	80c3      	strh	r3, [r0, #6]
 80a2e30:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a2e34:	8103      	strh	r3, [r0, #8]
 80a2e36:	2305      	movs	r3, #5
 80a2e38:	8143      	strh	r3, [r0, #10]
 80a2e3a:	230b      	movs	r3, #11
 80a2e3c:	8183      	strh	r3, [r0, #12]
 80a2e3e:	2201      	movs	r2, #1
 80a2e40:	2300      	movs	r3, #0
 80a2e42:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a2e46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a2e48:	2200      	movs	r2, #0
 80a2e4a:	611d      	str	r5, [r3, #16]
 80a2e4c:	615a      	str	r2, [r3, #20]
 80a2e4e:	bd38      	pop	{r3, r4, r5, pc}
 80a2e50:	20000488 	.word	0x20000488

080a2e54 <strcmp>:
 80a2e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a2e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a2e5c:	2a01      	cmp	r2, #1
 80a2e5e:	bf28      	it	cs
 80a2e60:	429a      	cmpcs	r2, r3
 80a2e62:	d0f7      	beq.n	80a2e54 <strcmp>
 80a2e64:	1ad0      	subs	r0, r2, r3
 80a2e66:	4770      	bx	lr

080a2e68 <strlen>:
 80a2e68:	4603      	mov	r3, r0
 80a2e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a2e6e:	2a00      	cmp	r2, #0
 80a2e70:	d1fb      	bne.n	80a2e6a <strlen+0x2>
 80a2e72:	1a18      	subs	r0, r3, r0
 80a2e74:	3801      	subs	r0, #1
 80a2e76:	4770      	bx	lr

080a2e78 <dynalib_user>:
 80a2e78:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a2e88:	0000 0000 6577 7461 6568 2f72 6567 7474     ....weather/gett
 80a2e98:	6d65 0070 6577 7461 6568 6372 696c 6e65     emp.weatherclien
 80a2ea8:	0074 6568 6c6c 206f 7266 2061 616d 6e69     t.hello fra main
 80a2eb8:	6f00 7475 514d 5454 5400 6d65 2070 7270     .outMQTT.Temp pr
 80a2ec8:	6e69 3a74 5400 6d65 3a70 4300 0000 0000     int:.Temp:.C....

080a2ed8 <_ZTV16Adafruit_SSD1306>:
	...
 80a2ee0:	01c5 080a 0285 080a 0cb5 080a 2123 080a     ............#!..
 80a2ef0:	05cd 080a 09b1 080a 0435 080a 02c1 080a     ........5.......
 80a2f00:	0a71 080a 0b07 080a 0b3f 080a 0b5b 080a     q.......?...[...

080a2f10 <_ZTV12Adafruit_GFX>:
	...
 80a2f20:	0cb5 080a 2123 080a 00ad 080a 09b1 080a     ....#!..........
 80a2f30:	0ad1 080a 0aed 080a 0a71 080a 0b07 080a     ........q.......
 80a2f40:	0b3f 080a 0b5b 080a                         ?...[...

080a2f48 <_ZL4font>:
 80a2f48:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a2f58:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a2f68:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a2f78:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a2f88:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a2f98:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a2fa8:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a2fb8:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a2fc8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a2fd8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a2fe8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a2ff8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a3008:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a3018:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a3028:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a3038:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a3048:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a3058:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a3068:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a3078:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a3088:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a3098:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a30a8:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a30b8:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a30c8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a30d8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a30e8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a30f8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a3108:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a3118:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a3128:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a3138:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a3148:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a3158:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a3168:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a3178:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a3188:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a3198:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a31a8:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a31b8:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a31c8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a31d8:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
 80a31e8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a31f8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a3208:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
 80a3218:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a3228:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
 80a3238:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
 80a3248:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
 80a3258:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a3268:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a3278:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a3288:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a3298:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a32a8:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a32b8:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
 80a32c8:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
 80a32d8:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
 80a32e8:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
 80a32f8:	141f 1414 001f 1010 f010 0000 0000 101f     ................
 80a3308:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
 80a3318:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
 80a3328:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
 80a3338:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
 80a3348:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
 80a3358:	1414 f414 1014 f010 f010 0000 101f 001f     ................
 80a3368:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
 80a3378:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
 80a3388:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
 80a3398:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
 80a33a8:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
 80a33b8:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
 80a33c8:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
 80a33d8:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
 80a33e8:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
 80a33f8:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
 80a3408:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
 80a3418:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
 80a3428:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
 80a3438:	0012 3c3c 3c3c 0000 0000 0000 4d04 5451     ..<<<<.......MQT
 80a3448:	0454 0600 514d 7349 7064 0003               T...MQIsdp..

080a3454 <_ZTV8SPIClass>:
	...
 80a345c:	1a01 080a 1a03 080a                         ........

080a3464 <_ZL14clock_divisors>:
 80a3464:	0800 1810 2820 3830                         .... (08

080a346c <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a3474:	1b75 080a 1b7b 080a 1f93 080a 1b89 080a     u...{...........
 80a3484:	1b77 080a                                   w...

080a3488 <_ZTV9TCPClient>:
	...
 80a3490:	0d49 080a 0d7d 080a 1b31 080a 1b4b 080a     I...}...1...K...
 80a34a0:	1c91 080a 1bfb 080a 1bcd 080a 1b73 080a     ............s...
 80a34b0:	1d3d 080a 1fad 080a 1c2f 080a 1d09 080a     =......./.......
 80a34c0:	1e8b 080a 1edd 080a 1b5b 080a 1e4f 080a     ........[...O...
 80a34d0:	1bad 080a 6977 6972 676e 5400 5043 6c43     ....wiring.TCPCl
 80a34e0:	6569 746e 7320 636f 656b 3d74 7825 6200     ient socket=%x.b
 80a34f0:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a3500:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a3510:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a3520:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a3530:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a3540:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a3550:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a3560:	6c64 7265 6100 7070 2500 3130 7530 0020     dler.app.%010u .
 80a3570:	205d 2500 0064 202c 2800 3a29 0020 5b20     ] .%d., .(): . [
 80a3580:	6300 646f 2065 203d 2500 0069 6564 6174     .code = .%i.deta
 80a3590:	6c69 2073 203d 0d00 000a 0066 6e6c 6600     ils = ....f.ln.f
 80a35a0:	006e 6f63 6564 6400 7465 6961 006c 6f6e     n.code.detail.no
 80a35b0:	656e 7400 6172 6563 6900 666e 006f 6177     ne.trace.info.wa
 80a35c0:	6e72 6500 7272 726f 7000 6e61 6369 6100     rn.error.panic.a
 80a35d0:	6c6c 5a00 2500 302b 6433 253a 3230 0075     ll.Z.%+03d:%02u.
 80a35e0:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 80a35f0:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

080a35fc <_ZTV9IPAddress>:
	...
 80a3604:	23b9 080a 23a9 080a 23ab 080a               .#...#...#..

080a3610 <_ZTV9USBSerial>:
	...
 80a3618:	24a1 080a 24f1 080a 24ff 080a 2123 080a     .$...$...$..#!..
 80a3628:	24dd 080a 24a3 080a 24b9 080a 24eb 080a     .$...$...$...$..
 80a3638:	24cf 080a 249d 080a                         .$...$..

080a3640 <_ZTV11USARTSerial>:
	...
 80a3648:	2641 080a 2691 080a 269f 080a 2123 080a     A&...&...&..#!..
 80a3658:	2655 080a 2677 080a 2663 080a 268b 080a     U&..w&..c&...&..
 80a3668:	2643 080a 2647 080a                         C&..G&..

080a3670 <_ZTV7TwoWire>:
	...
 80a3678:	2745 080a 278f 080a 2767 080a 2747 080a     E'...'..g'..G'..
 80a3688:	276f 080a 2777 080a 277f 080a 2787 080a     o'..w'...'...'..

080a3698 <_ZTVN5spark9WiFiClassE>:
	...
 80a36a0:	2887 080a 287d 080a 2873 080a 27f1 080a     .(..}(..s(...'..
 80a36b0:	2201 080a 2867 080a 285b 080a 2853 080a     ."..g(..[(..S(..
 80a36c0:	2849 080a 283f 080a 27fb 080a               I(..?(...'..

080a36cc <_ZTVN5spark12NetworkClassE>:
	...
 80a36d4:	28a5 080a 28af 080a 28b9 080a 28c3 080a     .(...(...(...(..
 80a36e4:	28cd 080a 28d9 080a 28e5 080a 28f1 080a     .(...(...(...(..
 80a36f4:	28f9 080a 2903 080a 290d 080a               .(...)...)..

080a3700 <__sf_fake_stdin>:
	...

080a3720 <__sf_fake_stdout>:
	...

080a3740 <__sf_fake_stderr>:
	...

080a3760 <link_const_variable_data_end>:
 80a3760:	080a018d 	.word	0x080a018d
 80a3764:	080a0295 	.word	0x080a0295
 80a3768:	080a09ad 	.word	0x080a09ad
 80a376c:	080a0d45 	.word	0x080a0d45
 80a3770:	080a1581 	.word	0x080a1581
 80a3774:	080a1b19 	.word	0x080a1b19
 80a3778:	080a220d 	.word	0x080a220d
 80a377c:	080a221d 	.word	0x080a221d
 80a3780:	080a2255 	.word	0x080a2255
 80a3784:	080a2891 	.word	0x080a2891
 80a3788:	080a2975 	.word	0x080a2975
 80a378c:	080a2a6d 	.word	0x080a2a6d
 80a3790:	080a2ab1 	.word	0x080a2ab1
 80a3794:	080a2b31 	.word	0x080a2b31
 80a3798:	080a2bb5 	.word	0x080a2bb5
 80a379c:	080a2c79 	.word	0x080a2c79
 80a37a0:	080a2d3d 	.word	0x080a2d3d

080a37a4 <link_constructors_end>:
	...
