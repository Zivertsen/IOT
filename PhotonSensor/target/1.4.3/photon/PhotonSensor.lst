
c:/Studie/IOT/IOT_projekt/PhotonSensor/target/1.4.3/photon/PhotonSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005dc4  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a5de0  080a5de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000008  40024000  080a5de8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000504  20000000  080a5df0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006b8  20000504  20000504  00040504  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a62f4  080a62f4  000362f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a631c  080a631c  0003631c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e7d99  00000000  00000000  00036320  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001553c  00000000  00000000  0011e0b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000193dc  00000000  00000000  001335f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002788  00000000  00000000  0014c9d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003aa8  00000000  00000000  0014f159  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002e9d5  00000000  00000000  00152c01  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00032a41  00000000  00000000  001815d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000aa824  00000000  00000000  001b4017  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000d14c  00000000  00000000  0025e83c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 fcc1 	bl	80a49b4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 fcc6 	bl	80a49ca <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a5df0 	.word	0x080a5df0
 80a004c:	20000504 	.word	0x20000504
 80a0050:	20000504 	.word	0x20000504
 80a0054:	20000bbc 	.word	0x20000bbc
 80a0058:	20000bbc 	.word	0x20000bbc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 ffc9 	bl	80a2ff4 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a5d8c 	.word	0x080a5d8c
 80a0084:	080a5de0 	.word	0x080a5de0

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b824 	b.w	80a00d4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f851 	bl	80a0134 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bf6f 	b.w	80a2f78 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f002 b9cf 	b.w	80a243c <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f002 b9cd 	b.w	80a243c <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f002 b9d3 	b.w	80a244c <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f002 b9d1 	b.w	80a244c <free>
	...

080a00ac <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a03      	ldr	r2, [pc, #12]	; (80a00bc <__cxa_pure_virtual+0x10>)
 80a00b0:	2100      	movs	r1, #0
 80a00b2:	200c      	movs	r0, #12
 80a00b4:	f002 f8f6 	bl	80a22a4 <panic_>
 80a00b8:	e7fe      	b.n	80a00b8 <__cxa_pure_virtual+0xc>
 80a00ba:	bf00      	nop
 80a00bc:	080a1fd1 	.word	0x080a1fd1

080a00c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00c0:	7800      	ldrb	r0, [r0, #0]
 80a00c2:	fab0 f080 	clz	r0, r0
 80a00c6:	0940      	lsrs	r0, r0, #5
 80a00c8:	4770      	bx	lr

080a00ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ca:	2301      	movs	r3, #1
 80a00cc:	7003      	strb	r3, [r0, #0]
 80a00ce:	4770      	bx	lr

080a00d0 <_Z8callbackPcPhj>:
int sensorPower = D2;
retained int rain_count = 0;


MQTT client(Server , 1883, callback);
void callback(char* topic, byte* payload, unsigned int length){
 80a00d0:	4770      	bx	lr
	...

080a00d4 <setup>:

}

// setup() runs once, when the device is first turned on.
void setup() {
 80a00d4:	b510      	push	{r4, lr}

  pinMode(sensorPower, OUTPUT);
 80a00d6:	4c12      	ldr	r4, [pc, #72]	; (80a0120 <setup+0x4c>)
 80a00d8:	2101      	movs	r1, #1
 80a00da:	8820      	ldrh	r0, [r4, #0]
 80a00dc:	f003 fada 	bl	80a3694 <pinMode>
  digitalWrite(sensorPower, HIGH);
 80a00e0:	2101      	movs	r1, #1
 80a00e2:	8820      	ldrh	r0, [r4, #0]
 80a00e4:	f003 fae7 	bl	80a36b6 <digitalWrite>
  init_rainGuage();
 80a00e8:	f001 fdd4 	bl	80a1c94 <_Z14init_rainGuagev>
  pinMode(reProgram, INPUT);
 80a00ec:	4b0d      	ldr	r3, [pc, #52]	; (80a0124 <setup+0x50>)
 80a00ee:	2100      	movs	r1, #0
 80a00f0:	8818      	ldrh	r0, [r3, #0]
 80a00f2:	f003 facf 	bl	80a3694 <pinMode>

  Serial.begin(9600);
 80a00f6:	f003 f899 	bl	80a322c <_Z16_fetch_usbserialv>
 80a00fa:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00fe:	f003 f875 	bl	80a31ec <_ZN9USBSerial5beginEl>

  client.connect("weatherclient");
 80a0102:	4909      	ldr	r1, [pc, #36]	; (80a0128 <setup+0x54>)
 80a0104:	4809      	ldr	r0, [pc, #36]	; (80a012c <setup+0x58>)
 80a0106:	f000 ff57 	bl	80a0fb8 <_ZN4MQTT7connectEPKc>

  if(!BME280_init())
 80a010a:	f000 f949 	bl	80a03a0 <_Z11BME280_initv>
 80a010e:	b930      	cbnz	r0, 80a011e <setup+0x4a>
  {
    Serial.print("BME280 not initialized");
 80a0110:	f003 f88c 	bl	80a322c <_Z16_fetch_usbserialv>
  }
}
 80a0114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  client.connect("weatherclient");

  if(!BME280_init())
  {
    Serial.print("BME280 not initialized");
 80a0118:	4905      	ldr	r1, [pc, #20]	; (80a0130 <setup+0x5c>)
 80a011a:	f002 bdac 	b.w	80a2c76 <_ZN5Print5printEPKc>
 80a011e:	bd10      	pop	{r4, pc}
 80a0120:	20000018 	.word	0x20000018
 80a0124:	20000000 	.word	0x20000000
 80a0128:	080a51d0 	.word	0x080a51d0
 80a012c:	20000508 	.word	0x20000508
 80a0130:	080a51de 	.word	0x080a51de

080a0134 <loop>:
  }
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
 80a0134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  
  if (client.isConnected())
 80a0138:	487a      	ldr	r0, [pc, #488]	; (80a0324 <loop+0x1f0>)
  }
}

// loop() runs over and over again, as quickly as it can execute.
void loop() 
{
 80a013a:	b090      	sub	sp, #64	; 0x40
  
  if (client.isConnected())
 80a013c:	f000 fe57 	bl	80a0dee <_ZN4MQTT11isConnectedEv>
 80a0140:	b110      	cbz	r0, 80a0148 <loop+0x14>
    client.loop();
 80a0142:	4878      	ldr	r0, [pc, #480]	; (80a0324 <loop+0x1f0>)
 80a0144:	f000 fffe 	bl	80a1144 <_ZN4MQTT4loopEv>

  int curentTime = 0;
  char temp[10] = {0};
 80a0148:	2300      	movs	r3, #0
  char press[10] = {0};
 80a014a:	ae03      	add	r6, sp, #12
  char humi[10] = {0};
 80a014c:	af06      	add	r7, sp, #24
  
  if (client.isConnected())
    client.loop();

  int curentTime = 0;
  char temp[10] = {0};
 80a014e:	9300      	str	r3, [sp, #0]
 80a0150:	9301      	str	r3, [sp, #4]
 80a0152:	f8ad 3008 	strh.w	r3, [sp, #8]
  char press[10] = {0};
 80a0156:	9303      	str	r3, [sp, #12]
 80a0158:	6073      	str	r3, [r6, #4]
 80a015a:	8133      	strh	r3, [r6, #8]
  char humi[10] = {0};
 80a015c:	9306      	str	r3, [sp, #24]
 80a015e:	607b      	str	r3, [r7, #4]
 80a0160:	813b      	strh	r3, [r7, #8]
  char rain[10] = {0};
 80a0162:	9309      	str	r3, [sp, #36]	; 0x24
 80a0164:	930a      	str	r3, [sp, #40]	; 0x28
 80a0166:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

  BME280_ForceMeasurement();
 80a016a:	f000 f94b 	bl	80a0404 <_Z23BME280_ForceMeasurementv>

  delay(20);
 80a016e:	2014      	movs	r0, #20
 80a0170:	f002 feb0 	bl	80a2ed4 <delay>

  float temp1 = BME280_Temperatur();
 80a0174:	f000 f92e 	bl	80a03d4 <_Z17BME280_Temperaturv>
 80a0178:	4682      	mov	sl, r0
  float humi1 = BME280_Humidity();
 80a017a:	f000 f93d 	bl	80a03f8 <_Z15BME280_Humidityv>
 80a017e:	4681      	mov	r9, r0
  float press1 = BME280_Pressure();
 80a0180:	f000 f92e 	bl	80a03e0 <_Z15BME280_Pressurev>
 80a0184:	4680      	mov	r8, r0


  //Checks to update RTC Clock
  checktime();
 80a0186:	f001 fe2d 	bl	80a1de4 <_Z9checktimev>

  //Sleep Blocker So you can program the device 
  while(digitalRead(reProgram) == 1)
 80a018a:	4c67      	ldr	r4, [pc, #412]	; (80a0328 <loop+0x1f4>)
 80a018c:	8820      	ldrh	r0, [r4, #0]
 80a018e:	f003 faab 	bl	80a36e8 <digitalRead>
 80a0192:	2801      	cmp	r0, #1
 80a0194:	d104      	bne.n	80a01a0 <loop+0x6c>
  {
    delay(1000);
 80a0196:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a019a:	f002 fe9b 	bl	80a2ed4 <delay>

  //Checks to update RTC Clock
  checktime();

  //Sleep Blocker So you can program the device 
  while(digitalRead(reProgram) == 1)
 80a019e:	e7f5      	b.n	80a018c <loop+0x58>
  {
    delay(1000);
  }

  //Brodcast at time or go to sleep or wait
  curentTime = Time.second()%SUBMIT_TIMER;
 80a01a0:	f002 fe84 	bl	80a2eac <_ZN9TimeClass6secondEv>
 80a01a4:	241e      	movs	r4, #30
 80a01a6:	fb90 f5f4 	sdiv	r5, r0, r4
 80a01aa:	fb05 0514 	mls	r5, r5, r4, r0
  if (curentTime == 0)
 80a01ae:	2d00      	cmp	r5, #0
 80a01b0:	f040 809d 	bne.w	80a02ee <loop+0x1ba>
  {
    // Get rain guage counct
    rain_count += get_rainGuageCount();
 80a01b4:	f001 fdaa 	bl	80a1d0c <_Z18get_rainGuageCountv>
 80a01b8:	4c5c      	ldr	r4, [pc, #368]	; (80a032c <loop+0x1f8>)
 80a01ba:	6823      	ldr	r3, [r4, #0]
 80a01bc:	4418      	add	r0, r3
 80a01be:	6020      	str	r0, [r4, #0]

    sprintf(temp, "%.2f", temp1);
 80a01c0:	4650      	mov	r0, sl
 80a01c2:	f003 fdb3 	bl	80a3d2c <__aeabi_f2d>
 80a01c6:	4602      	mov	r2, r0
 80a01c8:	460b      	mov	r3, r1
 80a01ca:	4668      	mov	r0, sp
 80a01cc:	4958      	ldr	r1, [pc, #352]	; (80a0330 <loop+0x1fc>)
 80a01ce:	f002 f94d 	bl	80a246c <sprintf>
    sprintf(humi,"%.2f", humi1);
 80a01d2:	4648      	mov	r0, r9
 80a01d4:	f003 fdaa 	bl	80a3d2c <__aeabi_f2d>
 80a01d8:	4602      	mov	r2, r0
 80a01da:	460b      	mov	r3, r1
 80a01dc:	4638      	mov	r0, r7
 80a01de:	4954      	ldr	r1, [pc, #336]	; (80a0330 <loop+0x1fc>)
 80a01e0:	f002 f944 	bl	80a246c <sprintf>
    sprintf(press, "%.2f", press1);
 80a01e4:	4640      	mov	r0, r8
 80a01e6:	f003 fda1 	bl	80a3d2c <__aeabi_f2d>
 80a01ea:	460b      	mov	r3, r1
 80a01ec:	4602      	mov	r2, r0
 80a01ee:	4950      	ldr	r1, [pc, #320]	; (80a0330 <loop+0x1fc>)
 80a01f0:	4630      	mov	r0, r6
 80a01f2:	f002 f93b 	bl	80a246c <sprintf>
    sprintf(rain,"%d", rain_count);
 80a01f6:	6822      	ldr	r2, [r4, #0]
 80a01f8:	494e      	ldr	r1, [pc, #312]	; (80a0334 <loop+0x200>)
 80a01fa:	a809      	add	r0, sp, #36	; 0x24
 80a01fc:	f002 f936 	bl	80a246c <sprintf>

    client.publish("weather/Temperatur",temp);
 80a0200:	466a      	mov	r2, sp
 80a0202:	494d      	ldr	r1, [pc, #308]	; (80a0338 <loop+0x204>)
 80a0204:	4847      	ldr	r0, [pc, #284]	; (80a0324 <loop+0x1f0>)
 80a0206:	f000 ff56 	bl	80a10b6 <_ZN4MQTT7publishEPKcS1_>
    delay(5);
 80a020a:	2005      	movs	r0, #5
 80a020c:	f002 fe62 	bl	80a2ed4 <delay>
    client.publish("weather/Tryk",press);
 80a0210:	4632      	mov	r2, r6
 80a0212:	494a      	ldr	r1, [pc, #296]	; (80a033c <loop+0x208>)
 80a0214:	4843      	ldr	r0, [pc, #268]	; (80a0324 <loop+0x1f0>)
 80a0216:	f000 ff4e 	bl	80a10b6 <_ZN4MQTT7publishEPKcS1_>
    delay(5);
 80a021a:	2005      	movs	r0, #5
 80a021c:	f002 fe5a 	bl	80a2ed4 <delay>
    client.publish("weather/Fugtighed",humi);
 80a0220:	463a      	mov	r2, r7
 80a0222:	4947      	ldr	r1, [pc, #284]	; (80a0340 <loop+0x20c>)
 80a0224:	483f      	ldr	r0, [pc, #252]	; (80a0324 <loop+0x1f0>)
 80a0226:	f000 ff46 	bl	80a10b6 <_ZN4MQTT7publishEPKcS1_>
    delay(5);
 80a022a:	2005      	movs	r0, #5
 80a022c:	f002 fe52 	bl	80a2ed4 <delay>
    client.publish("weather/Rainfall", rain);
 80a0230:	aa09      	add	r2, sp, #36	; 0x24
 80a0232:	4944      	ldr	r1, [pc, #272]	; (80a0344 <loop+0x210>)
 80a0234:	483b      	ldr	r0, [pc, #236]	; (80a0324 <loop+0x1f0>)
 80a0236:	f000 ff3e 	bl	80a10b6 <_ZN4MQTT7publishEPKcS1_>

    //demo funktion
    Serial.printlnf("curent: %d",rain_count);
 80a023a:	f002 fff7 	bl	80a322c <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a023e:	6823      	ldr	r3, [r4, #0]
 80a0240:	4a41      	ldr	r2, [pc, #260]	; (80a0348 <loop+0x214>)
 80a0242:	2101      	movs	r1, #1
 80a0244:	f002 fd60 	bl	80a2d08 <_ZN5Print11printf_implEbPKcz>
    Serial.printlnf(Time.timeStr());
 80a0248:	f002 fff0 	bl	80a322c <_Z16_fetch_usbserialv>
 80a024c:	4680      	mov	r8, r0
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80a024e:	f002 fe26 	bl	80a2e9e <_ZN9TimeClass3nowEv>
 80a0252:	4601      	mov	r1, r0
 80a0254:	a80c      	add	r0, sp, #48	; 0x30
 80a0256:	f002 fddf 	bl	80a2e18 <_ZN9TimeClass7timeStrEl>
 80a025a:	2101      	movs	r1, #1
 80a025c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80a025e:	4640      	mov	r0, r8
 80a0260:	f002 fd52 	bl	80a2d08 <_ZN5Print11printf_implEbPKcz>
 80a0264:	a80c      	add	r0, sp, #48	; 0x30
 80a0266:	f002 fc75 	bl	80a2b54 <_ZN6StringD1Ev>
    Serial.print("Temp: ");
 80a026a:	f002 ffdf 	bl	80a322c <_Z16_fetch_usbserialv>
 80a026e:	4937      	ldr	r1, [pc, #220]	; (80a034c <loop+0x218>)
 80a0270:	f002 fd01 	bl	80a2c76 <_ZN5Print5printEPKc>

    for(int i =  0; i < 10; i++)
    {
      Serial.print(temp[i]);
 80a0274:	f002 ffda 	bl	80a322c <_Z16_fetch_usbserialv>
 80a0278:	f81d 1005 	ldrb.w	r1, [sp, r5]
    //demo funktion
    Serial.printlnf("curent: %d",rain_count);
    Serial.printlnf(Time.timeStr());
    Serial.print("Temp: ");

    for(int i =  0; i < 10; i++)
 80a027c:	3501      	adds	r5, #1
    {
      Serial.print(temp[i]);
 80a027e:	f002 fcfe 	bl	80a2c7e <_ZN5Print5printEc>
    //demo funktion
    Serial.printlnf("curent: %d",rain_count);
    Serial.printlnf(Time.timeStr());
    Serial.print("Temp: ");

    for(int i =  0; i < 10; i++)
 80a0282:	2d0a      	cmp	r5, #10
 80a0284:	d1f6      	bne.n	80a0274 <loop+0x140>
    {
      Serial.print(temp[i]);
    }
    Serial.println();
 80a0286:	f002 ffd1 	bl	80a322c <_Z16_fetch_usbserialv>
 80a028a:	f002 fcfb 	bl	80a2c84 <_ZN5Print7printlnEv>
    Serial.print("Humi: ");
 80a028e:	f002 ffcd 	bl	80a322c <_Z16_fetch_usbserialv>
 80a0292:	492f      	ldr	r1, [pc, #188]	; (80a0350 <loop+0x21c>)
 80a0294:	f002 fcef 	bl	80a2c76 <_ZN5Print5printEPKc>

    for(int i =  0; i < 10; i++)
 80a0298:	2500      	movs	r5, #0
    {
      Serial.print(humi[i]);
 80a029a:	f002 ffc7 	bl	80a322c <_Z16_fetch_usbserialv>
 80a029e:	5d79      	ldrb	r1, [r7, r5]
      Serial.print(temp[i]);
    }
    Serial.println();
    Serial.print("Humi: ");

    for(int i =  0; i < 10; i++)
 80a02a0:	3501      	adds	r5, #1
    {
      Serial.print(humi[i]);
 80a02a2:	f002 fcec 	bl	80a2c7e <_ZN5Print5printEc>
      Serial.print(temp[i]);
    }
    Serial.println();
    Serial.print("Humi: ");

    for(int i =  0; i < 10; i++)
 80a02a6:	2d0a      	cmp	r5, #10
 80a02a8:	d1f7      	bne.n	80a029a <loop+0x166>
    {
      Serial.print(humi[i]);
    }
    Serial.println();
 80a02aa:	f002 ffbf 	bl	80a322c <_Z16_fetch_usbserialv>
 80a02ae:	f002 fce9 	bl	80a2c84 <_ZN5Print7printlnEv>
    Serial.print("Press: ");
 80a02b2:	f002 ffbb 	bl	80a322c <_Z16_fetch_usbserialv>
 80a02b6:	4927      	ldr	r1, [pc, #156]	; (80a0354 <loop+0x220>)
 80a02b8:	f002 fcdd 	bl	80a2c76 <_ZN5Print5printEPKc>

    for(int i =  0; i < 10; i++)
 80a02bc:	2500      	movs	r5, #0
    {
      Serial.print(press[i]);
 80a02be:	f002 ffb5 	bl	80a322c <_Z16_fetch_usbserialv>
 80a02c2:	5d71      	ldrb	r1, [r6, r5]
      Serial.print(humi[i]);
    }
    Serial.println();
    Serial.print("Press: ");

    for(int i =  0; i < 10; i++)
 80a02c4:	3501      	adds	r5, #1
    {
      Serial.print(press[i]);
 80a02c6:	f002 fcda 	bl	80a2c7e <_ZN5Print5printEc>
      Serial.print(humi[i]);
    }
    Serial.println();
    Serial.print("Press: ");

    for(int i =  0; i < 10; i++)
 80a02ca:	2d0a      	cmp	r5, #10
 80a02cc:	d1f7      	bne.n	80a02be <loop+0x18a>
    {
      Serial.print(press[i]);
    }
    Serial.println();
 80a02ce:	f002 ffad 	bl	80a322c <_Z16_fetch_usbserialv>
 80a02d2:	f002 fcd7 	bl	80a2c84 <_ZN5Print7printlnEv>

    delay(100);
 80a02d6:	2064      	movs	r0, #100	; 0x64
 80a02d8:	f002 fdfc 	bl	80a2ed4 <delay>
    rain_count = 0; // resets rain counter befor sleep
    digitalWrite(sensorPower, LOW);
 80a02dc:	4b1e      	ldr	r3, [pc, #120]	; (80a0358 <loop+0x224>)
      Serial.print(press[i]);
    }
    Serial.println();

    delay(100);
    rain_count = 0; // resets rain counter befor sleep
 80a02de:	2100      	movs	r1, #0
    digitalWrite(sensorPower, LOW);
 80a02e0:	8818      	ldrh	r0, [r3, #0]
      Serial.print(press[i]);
    }
    Serial.println();

    delay(100);
    rain_count = 0; // resets rain counter befor sleep
 80a02e2:	6021      	str	r1, [r4, #0]
    digitalWrite(sensorPower, LOW);
 80a02e4:	f003 f9e7 	bl	80a36b6 <digitalWrite>
    goToDeepSleep(SUBMIT_TIMER,BOOT_TIME);
 80a02e8:	4629      	mov	r1, r5
 80a02ea:	201e      	movs	r0, #30
 80a02ec:	e014      	b.n	80a0318 <loop+0x1e4>
  }
  else if (curentTime <= SUBMIT_TIMER-(BOOT_TIME*BACKSLEEPMULTI))
 80a02ee:	4628      	mov	r0, r5
 80a02f0:	f003 fd0a 	bl	80a3d08 <__aeabi_i2d>
 80a02f4:	2200      	movs	r2, #0
 80a02f6:	4b19      	ldr	r3, [pc, #100]	; (80a035c <loop+0x228>)
 80a02f8:	f003 fdd6 	bl	80a3ea8 <__aeabi_dcmple>
 80a02fc:	b170      	cbz	r0, 80a031c <loop+0x1e8>
  {
    // Get rain guage counct
    rain_count += get_rainGuageCount();
 80a02fe:	f001 fd05 	bl	80a1d0c <_Z18get_rainGuageCountv>
 80a0302:	4a0a      	ldr	r2, [pc, #40]	; (80a032c <loop+0x1f8>)
    digitalWrite(sensorPower, LOW);
 80a0304:	2100      	movs	r1, #0
    goToDeepSleep(SUBMIT_TIMER,BOOT_TIME);
  }
  else if (curentTime <= SUBMIT_TIMER-(BOOT_TIME*BACKSLEEPMULTI))
  {
    // Get rain guage counct
    rain_count += get_rainGuageCount();
 80a0306:	6813      	ldr	r3, [r2, #0]
 80a0308:	4418      	add	r0, r3
    digitalWrite(sensorPower, LOW);
 80a030a:	4b13      	ldr	r3, [pc, #76]	; (80a0358 <loop+0x224>)
    goToDeepSleep(SUBMIT_TIMER,BOOT_TIME);
  }
  else if (curentTime <= SUBMIT_TIMER-(BOOT_TIME*BACKSLEEPMULTI))
  {
    // Get rain guage counct
    rain_count += get_rainGuageCount();
 80a030c:	6010      	str	r0, [r2, #0]
    digitalWrite(sensorPower, LOW);
 80a030e:	8818      	ldrh	r0, [r3, #0]
 80a0310:	f003 f9d1 	bl	80a36b6 <digitalWrite>
    goToDeepSleep(SUBMIT_TIMER,BOOT_TIME);
 80a0314:	4620      	mov	r0, r4
 80a0316:	210a      	movs	r1, #10
 80a0318:	f001 fdc8 	bl	80a1eac <_Z13goToDeepSleepii>
  }
}
 80a031c:	b010      	add	sp, #64	; 0x40
 80a031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0322:	bf00      	nop
 80a0324:	20000508 	.word	0x20000508
 80a0328:	20000000 	.word	0x20000000
 80a032c:	40024000 	.word	0x40024000
 80a0330:	080a51f5 	.word	0x080a51f5
 80a0334:	080a5245 	.word	0x080a5245
 80a0338:	080a51fa 	.word	0x080a51fa
 80a033c:	080a520d 	.word	0x080a520d
 80a0340:	080a521a 	.word	0x080a521a
 80a0344:	080a522c 	.word	0x080a522c
 80a0348:	080a523d 	.word	0x080a523d
 80a034c:	080a5248 	.word	0x080a5248
 80a0350:	080a524f 	.word	0x080a524f
 80a0354:	080a5256 	.word	0x080a5256
 80a0358:	20000018 	.word	0x20000018
 80a035c:	40140000 	.word	0x40140000

080a0360 <_GLOBAL__sub_I_Server>:
 80a0360:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0362:	f001 fdd5 	bl	80a1f10 <HAL_Pin_Map>
int reProgram = D7; //Use to block program form running
int sensorPower = D2;
retained int rain_count = 0;


MQTT client(Server , 1883, callback);
 80a0366:	4c09      	ldr	r4, [pc, #36]	; (80a038c <_GLOBAL__sub_I_Server+0x2c>)
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80a0368:	2101      	movs	r1, #1
 80a036a:	4608      	mov	r0, r1
 80a036c:	f001 fe50 	bl	80a2010 <HAL_Feature_Set>
 80a0370:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0374:	4906      	ldr	r1, [pc, #24]	; (80a0390 <_GLOBAL__sub_I_Server+0x30>)
 80a0376:	4620      	mov	r0, r4
 80a0378:	4b06      	ldr	r3, [pc, #24]	; (80a0394 <_GLOBAL__sub_I_Server+0x34>)
 80a037a:	f000 fc51 	bl	80a0c20 <_ZN4MQTTC1EPctPFvS0_PhjE>
 80a037e:	4620      	mov	r0, r4
    // Get rain guage counct
    rain_count += get_rainGuageCount();
    digitalWrite(sensorPower, LOW);
    goToDeepSleep(SUBMIT_TIMER,BOOT_TIME);
  }
}
 80a0380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int reProgram = D7; //Use to block program form running
int sensorPower = D2;
retained int rain_count = 0;


MQTT client(Server , 1883, callback);
 80a0384:	4a04      	ldr	r2, [pc, #16]	; (80a0398 <_GLOBAL__sub_I_Server+0x38>)
 80a0386:	4905      	ldr	r1, [pc, #20]	; (80a039c <_GLOBAL__sub_I_Server+0x3c>)
 80a0388:	f003 ba1c 	b.w	80a37c4 <__aeabi_atexit>
 80a038c:	20000508 	.word	0x20000508
 80a0390:	20000004 	.word	0x20000004
 80a0394:	080a00d1 	.word	0x080a00d1
 80a0398:	20000504 	.word	0x20000504
 80a039c:	080a1351 	.word	0x080a1351

080a03a0 <_Z11BME280_initv>:
#include "BME280_waether.h"

Adafruit_BME280 bme;

bool BME280_init()
{
 80a03a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    if (!Serial)
 80a03a2:	f002 ff43 	bl	80a322c <_Z16_fetch_usbserialv>
 80a03a6:	f002 ff28 	bl	80a31fa <_ZN9USBSerialcvbEv>
 80a03aa:	b170      	cbz	r0, 80a03ca <_Z11BME280_initv+0x2a>
        return false; // return false if serial not running
        

    bool status = bme.begin();
 80a03ac:	4808      	ldr	r0, [pc, #32]	; (80a03d0 <_Z11BME280_initv+0x30>)
 80a03ae:	f001 fb11 	bl	80a19d4 <_ZN15Adafruit_BME2805beginEv>
 80a03b2:	4604      	mov	r4, r0
    bme.setSampling(Adafruit_BME280::MODE_FORCED,
                    Adafruit_BME280::SAMPLING_X1, 
                    Adafruit_BME280::SAMPLING_X1, 
                    Adafruit_BME280::SAMPLING_X1,
                    Adafruit_BME280::FILTER_OFF   );
 80a03b4:	2300      	movs	r3, #0
 80a03b6:	9302      	str	r3, [sp, #8]
 80a03b8:	9301      	str	r3, [sp, #4]
 80a03ba:	2301      	movs	r3, #1
 80a03bc:	4804      	ldr	r0, [pc, #16]	; (80a03d0 <_Z11BME280_initv+0x30>)
 80a03be:	9300      	str	r3, [sp, #0]
 80a03c0:	461a      	mov	r2, r3
 80a03c2:	4619      	mov	r1, r3
 80a03c4:	f001 f898 	bl	80a14f8 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    if (!status)
    {
        return false; // return false if the serson not found
 80a03c8:	4620      	mov	r0, r4
    }

    return true;
}
 80a03ca:	b004      	add	sp, #16
 80a03cc:	bd10      	pop	{r4, pc}
 80a03ce:	bf00      	nop
 80a03d0:	20000560 	.word	0x20000560

080a03d4 <_Z17BME280_Temperaturv>:

float BME280_Temperatur()
{
    return bme.readTemperature();
 80a03d4:	4801      	ldr	r0, [pc, #4]	; (80a03dc <_Z17BME280_Temperaturv+0x8>)
 80a03d6:	f001 bb11 	b.w	80a19fc <_ZN15Adafruit_BME28015readTemperatureEv>
 80a03da:	bf00      	nop
 80a03dc:	20000560 	.word	0x20000560

080a03e0 <_Z15BME280_Pressurev>:
}


float BME280_Pressure()
{
 80a03e0:	b508      	push	{r3, lr}
    return bme.readPressure()/100;
 80a03e2:	4803      	ldr	r0, [pc, #12]	; (80a03f0 <_Z15BME280_Pressurev+0x10>)
 80a03e4:	f001 fb34 	bl	80a1a50 <_ZN15Adafruit_BME28012readPressureEv>
 80a03e8:	4902      	ldr	r1, [pc, #8]	; (80a03f4 <_Z15BME280_Pressurev+0x14>)
 80a03ea:	f003 ff3d 	bl	80a4268 <__aeabi_fdiv>
}
 80a03ee:	bd08      	pop	{r3, pc}
 80a03f0:	20000560 	.word	0x20000560
 80a03f4:	42c80000 	.word	0x42c80000

080a03f8 <_Z15BME280_Humidityv>:

float BME280_Humidity()
{
    return bme.readHumidity();
 80a03f8:	4801      	ldr	r0, [pc, #4]	; (80a0400 <_Z15BME280_Humidityv+0x8>)
 80a03fa:	f001 bbff 	b.w	80a1bfc <_ZN15Adafruit_BME28012readHumidityEv>
 80a03fe:	bf00      	nop
 80a0400:	20000560 	.word	0x20000560

080a0404 <_Z23BME280_ForceMeasurementv>:
}

void BME280_ForceMeasurement()
{
    bme.takeForcedMeasurement();
 80a0404:	4801      	ldr	r0, [pc, #4]	; (80a040c <_Z23BME280_ForceMeasurementv+0x8>)
 80a0406:	f001 b9f5 	b.w	80a17f4 <_ZN15Adafruit_BME28021takeForcedMeasurementEv>
 80a040a:	bf00      	nop
 80a040c:	20000560 	.word	0x20000560

080a0410 <_GLOBAL__sub_I_bme>:
}
 80a0410:	b508      	push	{r3, lr}
 80a0412:	f001 fd7d 	bl	80a1f10 <HAL_Pin_Map>
 80a0416:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "BME280_waether.h"

Adafruit_BME280 bme;
 80a041a:	4801      	ldr	r0, [pc, #4]	; (80a0420 <_GLOBAL__sub_I_bme+0x10>)
 80a041c:	f000 bfdc 	b.w	80a13d8 <_ZN15Adafruit_BME280C1Ev>
 80a0420:	20000560 	.word	0x20000560

080a0424 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
 80a0424:	4770      	bx	lr

080a0426 <_ZN16Adafruit_SSD1306D0Ev>:
 80a0426:	b510      	push	{r4, lr}
 80a0428:	4604      	mov	r4, r0
 80a042a:	2124      	movs	r1, #36	; 0x24
 80a042c:	f003 f9cf 	bl	80a37ce <_ZdlPvj>
 80a0430:	4620      	mov	r0, r4
 80a0432:	bd10      	pop	{r4, pc}

080a0434 <_GLOBAL__sub_I_oled>:
 80a0434:	b510      	push	{r4, lr}
 80a0436:	4c07      	ldr	r4, [pc, #28]	; (80a0454 <_GLOBAL__sub_I_oled+0x20>)
 80a0438:	f001 fd6a 	bl	80a1f10 <HAL_Pin_Map>
 80a043c:	2104      	movs	r1, #4
 80a043e:	4620      	mov	r0, r4
 80a0440:	f000 f9ce 	bl	80a07e0 <_ZN16Adafruit_SSD1306C1Ea>
 80a0444:	4620      	mov	r0, r4
 80a0446:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a044a:	4a03      	ldr	r2, [pc, #12]	; (80a0458 <_GLOBAL__sub_I_oled+0x24>)
 80a044c:	4903      	ldr	r1, [pc, #12]	; (80a045c <_GLOBAL__sub_I_oled+0x28>)
 80a044e:	f003 b9b9 	b.w	80a37c4 <__aeabi_atexit>
 80a0452:	bf00      	nop
 80a0454:	200005a4 	.word	0x200005a4
 80a0458:	20000504 	.word	0x20000504
 80a045c:	080a0425 	.word	0x080a0425

080a0460 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a0460:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
 80a0462:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a0464:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
 80a0468:	2c02      	cmp	r4, #2
 80a046a:	d008      	beq.n	80a047e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
 80a046c:	2c03      	cmp	r4, #3
 80a046e:	d00f      	beq.n	80a0490 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
 80a0470:	2c01      	cmp	r4, #1
 80a0472:	d170      	bne.n	80a0556 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
 80a0474:	8904      	ldrh	r4, [r0, #8]
 80a0476:	3c01      	subs	r4, #1
 80a0478:	1aa2      	subs	r2, r4, r2
 80a047a:	b212      	sxth	r2, r2
      break;
 80a047c:	e00c      	b.n	80a0498 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a047e:	8944      	ldrh	r4, [r0, #10]
 80a0480:	3c01      	subs	r4, #1
 80a0482:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
 80a0484:	8904      	ldrh	r4, [r0, #8]
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a0486:	b212      	sxth	r2, r2
      x -= (w-1);
 80a0488:	1ae4      	subs	r4, r4, r3
 80a048a:	1a61      	subs	r1, r4, r1
 80a048c:	b209      	sxth	r1, r1
      break;
 80a048e:	e062      	b.n	80a0556 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
 80a0490:	8944      	ldrh	r4, [r0, #10]
 80a0492:	1ae4      	subs	r4, r4, r3
 80a0494:	1a61      	subs	r1, r4, r1
 80a0496:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a0498:	2a00      	cmp	r2, #0
 80a049a:	db5b      	blt.n	80a0554 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
 80a049c:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a04a0:	4294      	cmp	r4, r2
 80a04a2:	f340 8090 	ble.w	80a05c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a04a6:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a04a8:	bfbe      	ittt	lt
 80a04aa:	185b      	addlt	r3, r3, r1
 80a04ac:	b21b      	sxthlt	r3, r3
    __y = 0;
 80a04ae:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a04b0:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80a04b4:	18cc      	adds	r4, r1, r3
 80a04b6:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a04b8:	bfc4      	itt	gt
 80a04ba:	1a43      	subgt	r3, r0, r1
 80a04bc:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a04be:	2b00      	cmp	r3, #0
 80a04c0:	f340 8081 	ble.w	80a05c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a04c4:	b2c9      	uxtb	r1, r1
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a04c6:	08c8      	lsrs	r0, r1, #3
 80a04c8:	4f3f      	ldr	r7, [pc, #252]	; (80a05c8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
 80a04ca:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a04ce:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a04d2:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a04d4:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a04d8:	d017      	beq.n	80a050a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a04da:	f1c1 0108 	rsb	r1, r1, #8
 80a04de:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a04e0:	493a      	ldr	r1, [pc, #232]	; (80a05cc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a04e2:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a04e4:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a04e6:	bf3f      	itttt	cc
 80a04e8:	ebc3 0e00 	rsbcc	lr, r3, r0
 80a04ec:	21ff      	movcc	r1, #255	; 0xff
 80a04ee:	fa41 f10e 	asrcc.w	r1, r1, lr
 80a04f2:	400e      	andcc	r6, r1
 80a04f4:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
 80a04f6:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a04f8:	bf0c      	ite	eq
 80a04fa:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
 80a04fc:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a04fe:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a0500:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0502:	d360      	bcc.n	80a05c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
 80a0504:	1a18      	subs	r0, r3, r0
 80a0506:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
 80a0508:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a050a:	2b07      	cmp	r3, #7
 80a050c:	d917      	bls.n	80a053e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a050e:	2d01      	cmp	r5, #1
 80a0510:	bf0c      	ite	eq
 80a0512:	20ff      	moveq	r0, #255	; 0xff
 80a0514:	2000      	movne	r0, #0
 80a0516:	461a      	mov	r2, r3
 80a0518:	f104 0180 	add.w	r1, r4, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a051c:	3a08      	subs	r2, #8
 80a051e:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 80a0520:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a0522:	f801 0c80 	strb.w	r0, [r1, #-128]
 80a0526:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a052a:	d8f7      	bhi.n	80a051c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
 80a052c:	f1a3 0208 	sub.w	r2, r3, #8
 80a0530:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80a0534:	3201      	adds	r2, #1
 80a0536:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80a053a:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a053e:	2b00      	cmp	r3, #0
 80a0540:	d041      	beq.n	80a05c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0542:	4a23      	ldr	r2, [pc, #140]	; (80a05d0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
    if(color == WHITE) { 
 80a0544:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0546:	5cd2      	ldrb	r2, [r2, r3]
 80a0548:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a054a:	bf0c      	ite	eq
 80a054c:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
 80a054e:	4393      	bicne	r3, r2
 80a0550:	7023      	strb	r3, [r4, #0]
 80a0552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0554:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a0556:	2a00      	cmp	r2, #0
 80a0558:	db35      	blt.n	80a05c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a055a:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a055e:	4294      	cmp	r4, r2
 80a0560:	dd31      	ble.n	80a05c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a0562:	2900      	cmp	r1, #0
    w += x;
 80a0564:	bfbc      	itt	lt
 80a0566:	18c9      	addlt	r1, r1, r3
 80a0568:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a056a:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a056e:	bfb8      	it	lt
 80a0570:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0572:	18ce      	adds	r6, r1, r3
 80a0574:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a0576:	bfc4      	itt	gt
 80a0578:	1a63      	subgt	r3, r4, r1
 80a057a:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a057c:	2b00      	cmp	r3, #0
 80a057e:	dd22      	ble.n	80a05c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0580:	10d0      	asrs	r0, r2, #3
 80a0582:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 80a0586:	4810      	ldr	r0, [pc, #64]	; (80a05c8 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
 80a0588:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a058c:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
 80a058e:	2001      	movs	r0, #1
 80a0590:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
 80a0594:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a0596:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
 80a0598:	d109      	bne.n	80a05ae <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
 80a059a:	3b01      	subs	r3, #1
 80a059c:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
 80a059e:	1c5c      	adds	r4, r3, #1
 80a05a0:	d011      	beq.n	80a05c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a05a2:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a05a6:	4310      	orrs	r0, r2
 80a05a8:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a05ac:	e7f5      	b.n	80a059a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
 80a05ae:	43d2      	mvns	r2, r2
 80a05b0:	b2d2      	uxtb	r2, r2
 80a05b2:	3b01      	subs	r3, #1
 80a05b4:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
 80a05b6:	1c58      	adds	r0, r3, #1
 80a05b8:	d005      	beq.n	80a05c6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a05ba:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a05be:	4010      	ands	r0, r2
 80a05c0:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a05c4:	e7f5      	b.n	80a05b2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
 80a05c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a05c8:	2000002c 	.word	0x2000002c
 80a05cc:	20000024 	.word	0x20000024
 80a05d0:	2000001c 	.word	0x2000001c

080a05d4 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a05d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
 80a05d6:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a05d8:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
 80a05dc:	2c02      	cmp	r4, #2
 80a05de:	d008      	beq.n	80a05f2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
 80a05e0:	2c03      	cmp	r4, #3
 80a05e2:	d00f      	beq.n	80a0604 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
 80a05e4:	2c01      	cmp	r4, #1
 80a05e6:	d112      	bne.n	80a060e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
 80a05e8:	8904      	ldrh	r4, [r0, #8]
 80a05ea:	1ae4      	subs	r4, r4, r3
 80a05ec:	1aa2      	subs	r2, r4, r2
 80a05ee:	b212      	sxth	r2, r2
      break;
 80a05f0:	e06d      	b.n	80a06ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a05f2:	8904      	ldrh	r4, [r0, #8]
 80a05f4:	3c01      	subs	r4, #1
 80a05f6:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a05f8:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a05fa:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a05fc:	1ae4      	subs	r4, r4, r3
 80a05fe:	1aa2      	subs	r2, r4, r2
 80a0600:	b212      	sxth	r2, r2
      break;
 80a0602:	e004      	b.n	80a060e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
 80a0604:	8944      	ldrh	r4, [r0, #10]
 80a0606:	3c01      	subs	r4, #1
 80a0608:	1a61      	subs	r1, r4, r1
 80a060a:	b209      	sxth	r1, r1
      break;
 80a060c:	e05f      	b.n	80a06ce <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a060e:	2900      	cmp	r1, #0
 80a0610:	db5c      	blt.n	80a06cc <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
 80a0612:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0616:	428c      	cmp	r4, r1
 80a0618:	f340 8091 	ble.w	80a073e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a061c:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a061e:	bfbc      	itt	lt
 80a0620:	18d2      	addlt	r2, r2, r3
 80a0622:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0624:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
 80a0628:	bfb8      	it	lt
 80a062a:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a062c:	18d4      	adds	r4, r2, r3
 80a062e:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a0630:	bfc4      	itt	gt
 80a0632:	1a83      	subgt	r3, r0, r2
 80a0634:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a0636:	2b00      	cmp	r3, #0
 80a0638:	f340 8081 	ble.w	80a073e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a063c:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a063e:	4e40      	ldr	r6, [pc, #256]	; (80a0740 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a0640:	b2da      	uxtb	r2, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0642:	08e3      	lsrs	r3, r4, #3
 80a0644:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0648:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a064c:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0650:	d017      	beq.n	80a0682 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a0652:	f1c4 0408 	rsb	r4, r4, #8
 80a0656:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0658:	4c3a      	ldr	r4, [pc, #232]	; (80a0744 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a065a:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a065c:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a065e:	bf3f      	itttt	cc
 80a0660:	ebc2 0e00 	rsbcc	lr, r2, r0
 80a0664:	24ff      	movcc	r4, #255	; 0xff
 80a0666:	fa44 f40e 	asrcc.w	r4, r4, lr
 80a066a:	4027      	andcc	r7, r4
 80a066c:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
 80a066e:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a0670:	bf0c      	ite	eq
 80a0672:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
 80a0674:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a0676:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a0678:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a067a:	d360      	bcc.n	80a073e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
 80a067c:	1a10      	subs	r0, r2, r0
 80a067e:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
 80a0680:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a0682:	2a07      	cmp	r2, #7
 80a0684:	d917      	bls.n	80a06b6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a0686:	2d01      	cmp	r5, #1
 80a0688:	bf0c      	ite	eq
 80a068a:	24ff      	moveq	r4, #255	; 0xff
 80a068c:	2400      	movne	r4, #0
 80a068e:	4611      	mov	r1, r2
 80a0690:	f103 0080 	add.w	r0, r3, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a0694:	3908      	subs	r1, #8
 80a0696:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
 80a0698:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a069a:	f800 4c80 	strb.w	r4, [r0, #-128]
 80a069e:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a06a2:	d8f7      	bhi.n	80a0694 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
 80a06a4:	f1a2 0108 	sub.w	r1, r2, #8
 80a06a8:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80a06ac:	3101      	adds	r1, #1
 80a06ae:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 80a06b2:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a06b6:	2a00      	cmp	r2, #0
 80a06b8:	d041      	beq.n	80a073e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a06ba:	4923      	ldr	r1, [pc, #140]	; (80a0748 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
    if(color == WHITE) { 
 80a06bc:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a06be:	5c89      	ldrb	r1, [r1, r2]
 80a06c0:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a06c2:	bf0c      	ite	eq
 80a06c4:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
 80a06c6:	438a      	bicne	r2, r1
 80a06c8:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
 80a06ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a06cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a06ce:	2900      	cmp	r1, #0
 80a06d0:	db35      	blt.n	80a073e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a06d2:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a06d6:	428c      	cmp	r4, r1
 80a06d8:	dd31      	ble.n	80a073e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a06da:	2a00      	cmp	r2, #0
    w += x;
 80a06dc:	bfbc      	itt	lt
 80a06de:	18d2      	addlt	r2, r2, r3
 80a06e0:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a06e2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a06e6:	bfb8      	it	lt
 80a06e8:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a06ea:	18d6      	adds	r6, r2, r3
 80a06ec:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a06ee:	bfc4      	itt	gt
 80a06f0:	1aa3      	subgt	r3, r4, r2
 80a06f2:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a06f4:	2b00      	cmp	r3, #0
 80a06f6:	dd22      	ble.n	80a073e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a06f8:	10c8      	asrs	r0, r1, #3
 80a06fa:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 80a06fe:	4810      	ldr	r0, [pc, #64]	; (80a0740 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
 80a0700:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0704:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
 80a0706:	2201      	movs	r2, #1
 80a0708:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
 80a070c:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a070e:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
 80a0710:	d109      	bne.n	80a0726 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
 80a0712:	1e5a      	subs	r2, r3, #1
 80a0714:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
 80a0716:	1c5c      	adds	r4, r3, #1
 80a0718:	d011      	beq.n	80a073e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a071a:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a071e:	430a      	orrs	r2, r1
 80a0720:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a0724:	e7f5      	b.n	80a0712 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
 80a0726:	43c9      	mvns	r1, r1
 80a0728:	b2c9      	uxtb	r1, r1
 80a072a:	1e5a      	subs	r2, r3, #1
 80a072c:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
 80a072e:	1c5a      	adds	r2, r3, #1
 80a0730:	d005      	beq.n	80a073e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0732:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a0736:	400a      	ands	r2, r1
 80a0738:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a073c:	e7f5      	b.n	80a072a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
 80a073e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0740:	2000002c 	.word	0x2000002c
 80a0744:	20000024 	.word	0x20000024
 80a0748:	2000001c 	.word	0x2000001c

080a074c <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a074c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a074e:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0750:	4606      	mov	r6, r0
 80a0752:	4614      	mov	r4, r2
 80a0754:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a0756:	db3f      	blt.n	80a07d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0758:	f000 fa13 	bl	80a0b82 <_ZN12Adafruit_GFX5widthEv>
 80a075c:	4285      	cmp	r5, r0
 80a075e:	da3b      	bge.n	80a07d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0760:	2c00      	cmp	r4, #0
 80a0762:	db39      	blt.n	80a07d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0764:	4630      	mov	r0, r6
 80a0766:	f000 fa0f 	bl	80a0b88 <_ZN12Adafruit_GFX6heightEv>
 80a076a:	4284      	cmp	r4, r0
 80a076c:	da34      	bge.n	80a07d8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a076e:	4630      	mov	r0, r6
 80a0770:	f000 fa05 	bl	80a0b7e <_ZN12Adafruit_GFX11getRotationEv>
 80a0774:	2802      	cmp	r0, #2
 80a0776:	d127      	bne.n	80a07c8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0778:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 80a077a:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a077c:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
 80a077e:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0780:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
 80a0782:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0784:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
 80a0786:	b204      	sxth	r4, r0
 80a0788:	e006      	b.n	80a0798 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a078a:	2801      	cmp	r0, #1
 80a078c:	d104      	bne.n	80a0798 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
 80a078e:	8933      	ldrh	r3, [r6, #8]
 80a0790:	3b01      	subs	r3, #1
 80a0792:	1b1b      	subs	r3, r3, r4
 80a0794:	462c      	mov	r4, r5
 80a0796:	b21d      	sxth	r5, r3
 80a0798:	2008      	movs	r0, #8
    break;
  }  

  // x is which column
  if (color == WHITE) 
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a079a:	fb94 f0f0 	sdiv	r0, r4, r0
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a079e:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a07a0:	b200      	sxth	r0, r0
 80a07a2:	4b0e      	ldr	r3, [pc, #56]	; (80a07dc <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
 80a07a4:	f004 0207 	and.w	r2, r4, #7
 80a07a8:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a07ac:	d104      	bne.n	80a07b8 <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a07ae:	4097      	lsls	r7, r2
 80a07b0:	5c5a      	ldrb	r2, [r3, r1]
 80a07b2:	4317      	orrs	r7, r2
 80a07b4:	545f      	strb	r7, [r3, r1]
 80a07b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
 80a07b8:	5c58      	ldrb	r0, [r3, r1]
 80a07ba:	2701      	movs	r7, #1
 80a07bc:	fa07 f202 	lsl.w	r2, r7, r2
 80a07c0:	ea20 0202 	bic.w	r2, r0, r2
 80a07c4:	545a      	strb	r2, [r3, r1]
 80a07c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a07c8:	2803      	cmp	r0, #3
 80a07ca:	d1de      	bne.n	80a078a <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
 80a07cc:	8973      	ldrh	r3, [r6, #10]
 80a07ce:	3b01      	subs	r3, #1
 80a07d0:	1b5b      	subs	r3, r3, r5
 80a07d2:	4625      	mov	r5, r4
 80a07d4:	b21c      	sxth	r4, r3
 80a07d6:	e7df      	b.n	80a0798 <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
 80a07d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a07da:	bf00      	nop
 80a07dc:	2000002c 	.word	0x2000002c

080a07e0 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
 80a07e0:	b538      	push	{r3, r4, r5, lr}
 80a07e2:	4604      	mov	r4, r0
 80a07e4:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a07e6:	2240      	movs	r2, #64	; 0x40
 80a07e8:	2180      	movs	r1, #128	; 0x80
 80a07ea:	f000 f8e7 	bl	80a09bc <_ZN12Adafruit_GFXC1Ess>
 80a07ee:	4b06      	ldr	r3, [pc, #24]	; (80a0808 <_ZN16Adafruit_SSD1306C1Ea+0x28>)
  sclk = dc = cs = sid = -1;
  rst = reset;
 80a07f0:	f884 5020 	strb.w	r5, [r4, #32]
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a07f4:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
 80a07f6:	23ff      	movs	r3, #255	; 0xff
 80a07f8:	7763      	strb	r3, [r4, #29]
 80a07fa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 80a07fe:	77e3      	strb	r3, [r4, #31]
 80a0800:	77a3      	strb	r3, [r4, #30]
  rst = reset;
}
 80a0802:	4620      	mov	r0, r4
 80a0804:	bd38      	pop	{r3, r4, r5, pc}
 80a0806:	bf00      	nop
 80a0808:	080a5268 	.word	0x080a5268

080a080c <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a080c:	f001 bb80 	b.w	80a1f10 <HAL_Pin_Map>

080a0810 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0814:	461e      	mov	r6, r3
 80a0816:	b085      	sub	sp, #20
 80a0818:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a081c:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a081e:	1a9a      	subs	r2, r3, r2
 80a0820:	2a00      	cmp	r2, #0
 80a0822:	bfb8      	it	lt
 80a0824:	4252      	neglt	r2, r2
 80a0826:	9200      	str	r2, [sp, #0]
 80a0828:	1a72      	subs	r2, r6, r1
 80a082a:	2a00      	cmp	r2, #0
 80a082c:	bfb8      	it	lt
 80a082e:	4252      	neglt	r2, r2
 80a0830:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0832:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0834:	9a00      	ldr	r2, [sp, #0]
 80a0836:	9901      	ldr	r1, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0838:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a083a:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a083c:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0840:	dd05      	ble.n	80a084e <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 80a0842:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
 80a0844:	461e      	mov	r6, r3
 80a0846:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0848:	4622      	mov	r2, r4
    swap(x0, y0);
 80a084a:	462c      	mov	r4, r5
 80a084c:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a084e:	42b4      	cmp	r4, r6
 80a0850:	dd05      	ble.n	80a085e <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 80a0852:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 80a0854:	461d      	mov	r5, r3
 80a0856:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a0858:	4622      	mov	r2, r4
 80a085a:	4634      	mov	r4, r6
 80a085c:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 80a085e:	1b5a      	subs	r2, r3, r5
 80a0860:	2a00      	cmp	r2, #0
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a0862:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 80a0866:	bfb8      	it	lt
 80a0868:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a086a:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 80a086e:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 80a0870:	fa0f f788 	sxth.w	r7, r8
 80a0874:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a0876:	429d      	cmp	r5, r3
 80a0878:	bfb4      	ite	lt
 80a087a:	2301      	movlt	r3, #1
 80a087c:	f04f 33ff 	movge.w	r3, #4294967295

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 80a0880:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a0884:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a0886:	42b4      	cmp	r4, r6
 80a0888:	dc1f      	bgt.n	80a08ca <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 80a088a:	9a01      	ldr	r2, [sp, #4]
 80a088c:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 80a088e:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 80a0890:	4293      	cmp	r3, r2
 80a0892:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 80a0896:	bfc8      	it	gt
 80a0898:	4622      	movgt	r2, r4
 80a089a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a089e:	bfc8      	it	gt
 80a08a0:	4629      	movgt	r1, r5
 80a08a2:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 80a08a4:	bfdc      	itt	le
 80a08a6:	462a      	movle	r2, r5
 80a08a8:	4621      	movle	r1, r4
 80a08aa:	47d8      	blx	fp
    }
    err -= dy;
 80a08ac:	9b03      	ldr	r3, [sp, #12]
 80a08ae:	1aff      	subs	r7, r7, r3
 80a08b0:	b2bb      	uxth	r3, r7
 80a08b2:	b21f      	sxth	r7, r3
    if (err < 0) {
 80a08b4:	2f00      	cmp	r7, #0
 80a08b6:	da05      	bge.n	80a08c4 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 80a08b8:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 80a08ba:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 80a08be:	4415      	add	r5, r2
 80a08c0:	b22d      	sxth	r5, r5
      err += dx;
 80a08c2:	b23f      	sxth	r7, r7
 80a08c4:	3401      	adds	r4, #1
 80a08c6:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 80a08c8:	e7dd      	b.n	80a0886 <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 80a08ca:	b005      	add	sp, #20
 80a08cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a08d0 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a08d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a08d4:	4604      	mov	r4, r0
 80a08d6:	4691      	mov	r9, r2
 80a08d8:	460d      	mov	r5, r1
 80a08da:	4698      	mov	r8, r3
 80a08dc:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a08e0:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a08e2:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a08e6:	9600      	str	r6, [sp, #0]
 80a08e8:	69ff      	ldr	r7, [r7, #28]
 80a08ea:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a08ec:	6823      	ldr	r3, [r4, #0]
 80a08ee:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a08f2:	9600      	str	r6, [sp, #0]
 80a08f4:	444a      	add	r2, r9
 80a08f6:	69df      	ldr	r7, [r3, #28]
 80a08f8:	4629      	mov	r1, r5
 80a08fa:	4643      	mov	r3, r8
 80a08fc:	4620      	mov	r0, r4
 80a08fe:	b212      	sxth	r2, r2
 80a0900:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a0902:	6823      	ldr	r3, [r4, #0]
 80a0904:	9600      	str	r6, [sp, #0]
 80a0906:	699f      	ldr	r7, [r3, #24]
 80a0908:	464a      	mov	r2, r9
 80a090a:	4653      	mov	r3, sl
 80a090c:	4629      	mov	r1, r5
 80a090e:	4620      	mov	r0, r4
 80a0910:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a0912:	6823      	ldr	r3, [r4, #0]
 80a0914:	f108 31ff 	add.w	r1, r8, #4294967295
 80a0918:	960a      	str	r6, [sp, #40]	; 0x28
 80a091a:	4429      	add	r1, r5
 80a091c:	699d      	ldr	r5, [r3, #24]
 80a091e:	464a      	mov	r2, r9
 80a0920:	4653      	mov	r3, sl
 80a0922:	4620      	mov	r0, r4
 80a0924:	46ac      	mov	ip, r5
 80a0926:	b209      	sxth	r1, r1
}
 80a0928:	b002      	add	sp, #8
 80a092a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 80a092e:	4760      	bx	ip

080a0930 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80a0930:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a0932:	3b01      	subs	r3, #1
 80a0934:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0938:	4413      	add	r3, r2
 80a093a:	6804      	ldr	r4, [r0, #0]
 80a093c:	b21b      	sxth	r3, r3
 80a093e:	9300      	str	r3, [sp, #0]
 80a0940:	9501      	str	r5, [sp, #4]
 80a0942:	6964      	ldr	r4, [r4, #20]
 80a0944:	460b      	mov	r3, r1
 80a0946:	47a0      	blx	r4
}
 80a0948:	b003      	add	sp, #12
 80a094a:	bd30      	pop	{r4, r5, pc}

080a094c <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 80a094c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a094e:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0952:	6804      	ldr	r4, [r0, #0]
 80a0954:	e88d 0024 	stmia.w	sp, {r2, r5}
 80a0958:	3b01      	subs	r3, #1
 80a095a:	440b      	add	r3, r1
 80a095c:	6964      	ldr	r4, [r4, #20]
 80a095e:	b21b      	sxth	r3, r3
 80a0960:	47a0      	blx	r4
}
 80a0962:	b003      	add	sp, #12
 80a0964:	bd30      	pop	{r4, r5, pc}

080a0966 <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a0966:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a096a:	4605      	mov	r5, r0
 80a096c:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a096e:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a0970:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a0974:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0978:	eb01 0a03 	add.w	sl, r1, r3
 80a097c:	4554      	cmp	r4, sl
 80a097e:	da0b      	bge.n	80a0998 <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a0980:	682b      	ldr	r3, [r5, #0]
 80a0982:	f8cd 9000 	str.w	r9, [sp]
 80a0986:	699e      	ldr	r6, [r3, #24]
 80a0988:	4621      	mov	r1, r4
 80a098a:	4643      	mov	r3, r8
 80a098c:	463a      	mov	r2, r7
 80a098e:	4628      	mov	r0, r5
 80a0990:	3401      	adds	r4, #1
 80a0992:	47b0      	blx	r6
 80a0994:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0996:	e7f1      	b.n	80a097c <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 80a0998:	b002      	add	sp, #8
 80a099a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a099e <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a099e:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a09a0:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a09a4:	6804      	ldr	r4, [r0, #0]
 80a09a6:	9101      	str	r1, [sp, #4]
 80a09a8:	9200      	str	r2, [sp, #0]
 80a09aa:	2200      	movs	r2, #0
 80a09ac:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a09b0:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a09b2:	4611      	mov	r1, r2
 80a09b4:	47a0      	blx	r4
}
 80a09b6:	b002      	add	sp, #8
 80a09b8:	bd10      	pop	{r4, pc}

080a09ba <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 80a09ba:	4770      	bx	lr

080a09bc <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a09bc:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 80a09be:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 80a09c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a09c4:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
 80a09c6:	4d07      	ldr	r5, [pc, #28]	; (80a09e4 <_ZN12Adafruit_GFXC1Ess+0x28>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a09c8:	2400      	movs	r4, #0
 80a09ca:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 80a09cc:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 80a09ce:	2201      	movs	r2, #1
 80a09d0:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a09d2:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 80a09d4:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
 80a09d6:	8204      	strh	r4, [r0, #16]
 80a09d8:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
 80a09da:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 80a09dc:	82c1      	strh	r1, [r0, #22]
 80a09de:	8281      	strh	r1, [r0, #20]
  wrap      = true;
 80a09e0:	7682      	strb	r2, [r0, #26]
}
 80a09e2:	bd30      	pop	{r4, r5, pc}
 80a09e4:	080a52a0 	.word	0x080a52a0

080a09e8 <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a09e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a09ec:	b08f      	sub	sp, #60	; 0x3c
 80a09ee:	9106      	str	r1, [sp, #24]
 80a09f0:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80a09f4:	4604      	mov	r4, r0
 80a09f6:	9107      	str	r1, [sp, #28]
 80a09f8:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80a09fc:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80a0a00:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
 80a0a02:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80a0a06:	9806      	ldr	r0, [sp, #24]
 80a0a08:	4281      	cmp	r1, r0
 80a0a0a:	dd7d      	ble.n	80a0b08 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
 80a0a0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a0a10:	4291      	cmp	r1, r2
 80a0a12:	dd79      	ble.n	80a0b08 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     (y >= _height)           || // Clip bottom
 80a0a14:	2106      	movs	r1, #6
 80a0a16:	fb01 0008 	mla	r0, r1, r8, r0
 80a0a1a:	2800      	cmp	r0, #0
 80a0a1c:	dd74      	ble.n	80a0b08 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     ((x + 6 * size - 1) < 0) || // Clip left
 80a0a1e:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
 80a0a22:	2800      	cmp	r0, #0
 80a0a24:	dd70      	ble.n	80a0b08 <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a0a26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a0a2a:	b295      	uxth	r5, r2
 80a0a2c:	930c      	str	r3, [sp, #48]	; 0x30
 80a0a2e:	f105 0308 	add.w	r3, r5, #8
 80a0a32:	b29b      	uxth	r3, r3
 80a0a34:	9109      	str	r1, [sp, #36]	; 0x24
 80a0a36:	2600      	movs	r6, #0
 80a0a38:	930d      	str	r3, [sp, #52]	; 0x34
 80a0a3a:	462f      	mov	r7, r5
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0a3c:	46a9      	mov	r9, r5
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
 80a0a3e:	2e05      	cmp	r6, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a0a40:	bf1f      	itttt	ne
 80a0a42:	4b33      	ldrne	r3, [pc, #204]	; (80a0b10 <_ZN12Adafruit_GFX8drawCharEsshtth+0x128>)
 80a0a44:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
 80a0a46:	199b      	addne	r3, r3, r6
 80a0a48:	f813 a002 	ldrbne.w	sl, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0a4c:	fa1f f388 	uxth.w	r3, r8
 80a0a50:	9304      	str	r3, [sp, #16]
 80a0a52:	9904      	ldr	r1, [sp, #16]
 80a0a54:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a0a58:	b2b2      	uxth	r2, r6
 80a0a5a:	fb01 3102 	mla	r1, r1, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0a5e:	4413      	add	r3, r2
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0a60:	b209      	sxth	r1, r1
 80a0a62:	910a      	str	r1, [sp, #40]	; 0x28
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0a64:	b21b      	sxth	r3, r3
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0a66:	fa0f f188 	sxth.w	r1, r8
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
 80a0a6a:	bf08      	it	eq
 80a0a6c:	f04f 0a00 	moveq.w	sl, #0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0a70:	9505      	str	r5, [sp, #20]
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0a72:	9103      	str	r1, [sp, #12]
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0a74:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
 80a0a76:	f01a 0f01 	tst.w	sl, #1
 80a0a7a:	d011      	beq.n	80a0aa0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
        if (size == 1) // default size
 80a0a7c:	f1b8 0f01 	cmp.w	r8, #1
 80a0a80:	6823      	ldr	r3, [r4, #0]
 80a0a82:	d103      	bne.n	80a0a8c <_ZN12Adafruit_GFX8drawCharEsshtth+0xa4>
          drawPixel(x+i, y+j, color);
 80a0a84:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0a88:	9b07      	ldr	r3, [sp, #28]
 80a0a8a:	e014      	b.n	80a0ab6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0a8c:	9a07      	ldr	r2, [sp, #28]
 80a0a8e:	9201      	str	r2, [sp, #4]
 80a0a90:	9a03      	ldr	r2, [sp, #12]
 80a0a92:	9200      	str	r2, [sp, #0]
 80a0a94:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a0a98:	4613      	mov	r3, r2
 80a0a9a:	fa0f f289 	sxth.w	r2, r9
 80a0a9e:	e018      	b.n	80a0ad2 <_ZN12Adafruit_GFX8drawCharEsshtth+0xea>
        } 
      } else if (bg != color) {
 80a0aa0:	9b07      	ldr	r3, [sp, #28]
 80a0aa2:	9a08      	ldr	r2, [sp, #32]
 80a0aa4:	4293      	cmp	r3, r2
 80a0aa6:	d017      	beq.n	80a0ad8 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        if (size == 1) // default size
 80a0aa8:	f1b8 0f01 	cmp.w	r8, #1
 80a0aac:	6823      	ldr	r3, [r4, #0]
 80a0aae:	d107      	bne.n	80a0ac0 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, bg);
 80a0ab0:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0ab4:	4613      	mov	r3, r2
 80a0ab6:	b23a      	sxth	r2, r7
 80a0ab8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a0aba:	4620      	mov	r0, r4
 80a0abc:	47d8      	blx	fp
 80a0abe:	e00b      	b.n	80a0ad8 <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0ac0:	9a08      	ldr	r2, [sp, #32]
 80a0ac2:	9201      	str	r2, [sp, #4]
 80a0ac4:	9a03      	ldr	r2, [sp, #12]
 80a0ac6:	9200      	str	r2, [sp, #0]
 80a0ac8:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a0acc:	4613      	mov	r3, r2
 80a0ace:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80a0ad2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a0ad4:	4620      	mov	r0, r4
 80a0ad6:	47d8      	blx	fp
 80a0ad8:	9b04      	ldr	r3, [sp, #16]
 80a0ada:	9a04      	ldr	r2, [sp, #16]
 80a0adc:	4499      	add	r9, r3
 80a0ade:	9b05      	ldr	r3, [sp, #20]
 80a0ae0:	3701      	adds	r7, #1
 80a0ae2:	4413      	add	r3, r2
 80a0ae4:	b29b      	uxth	r3, r3
 80a0ae6:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a0ae8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a0aea:	b2bf      	uxth	r7, r7
 80a0aec:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
 80a0aee:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80a0af2:	fa1f f989 	uxth.w	r9, r9
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a0af6:	d1be      	bne.n	80a0a76 <_ZN12Adafruit_GFX8drawCharEsshtth+0x8e>
 80a0af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
 80a0afa:	3601      	adds	r6, #1
 80a0afc:	3b01      	subs	r3, #1
 80a0afe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a0b02:	b276      	sxtb	r6, r6
 80a0b04:	9309      	str	r3, [sp, #36]	; 0x24
 80a0b06:	d198      	bne.n	80a0a3a <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
 80a0b08:	b00f      	add	sp, #60	; 0x3c
 80a0b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0b0e:	bf00      	nop
 80a0b10:	080a52d0 	.word	0x080a52d0

080a0b14 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0b14:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
 80a0b16:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0b18:	b085      	sub	sp, #20
 80a0b1a:	4604      	mov	r4, r0
 80a0b1c:	460b      	mov	r3, r1

  if (c == '\n') {
 80a0b1e:	d104      	bne.n	80a0b2a <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
 80a0b20:	7e02      	ldrb	r2, [r0, #24]
 80a0b22:	8a43      	ldrh	r3, [r0, #18]
 80a0b24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a0b28:	e023      	b.n	80a0b72 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
 80a0b2a:	290d      	cmp	r1, #13
 80a0b2c:	d024      	beq.n	80a0b78 <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a0b2e:	7e05      	ldrb	r5, [r0, #24]
 80a0b30:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80a0b34:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80a0b38:	9502      	str	r5, [sp, #8]
 80a0b3a:	8ac5      	ldrh	r5, [r0, #22]
 80a0b3c:	9501      	str	r5, [sp, #4]
 80a0b3e:	8a85      	ldrh	r5, [r0, #20]
 80a0b40:	9500      	str	r5, [sp, #0]
 80a0b42:	f7ff ff51 	bl	80a09e8 <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 80a0b46:	7e22      	ldrb	r2, [r4, #24]
 80a0b48:	8a23      	ldrh	r3, [r4, #16]
 80a0b4a:	b291      	uxth	r1, r2
 80a0b4c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80a0b50:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a0b54:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
 80a0b56:	b21b      	sxth	r3, r3
 80a0b58:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a0b5a:	b168      	cbz	r0, 80a0b78 <_ZN12Adafruit_GFX5writeEh+0x64>
 80a0b5c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a0b60:	f06f 0505 	mvn.w	r5, #5
 80a0b64:	fb05 0202 	mla	r2, r5, r2, r0
 80a0b68:	4293      	cmp	r3, r2
 80a0b6a:	dd05      	ble.n	80a0b78 <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
 80a0b6c:	8a63      	ldrh	r3, [r4, #18]
 80a0b6e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80a0b72:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 80a0b74:	2300      	movs	r3, #0
 80a0b76:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
 80a0b78:	2001      	movs	r0, #1
 80a0b7a:	b005      	add	sp, #20
 80a0b7c:	bd30      	pop	{r4, r5, pc}

080a0b7e <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
 80a0b7e:	7e40      	ldrb	r0, [r0, #25]
 80a0b80:	4770      	bx	lr

080a0b82 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
 80a0b82:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80a0b86:	4770      	bx	lr

080a0b88 <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
 80a0b88:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a0b8c:	4770      	bx	lr

080a0b8e <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a0b8e:	f001 b9bf 	b.w	80a1f10 <HAL_Pin_Map>
	...

080a0b94 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0b94:	b538      	push	{r3, r4, r5, lr}
 80a0b96:	4b0b      	ldr	r3, [pc, #44]	; (80a0bc4 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0b98:	6984      	ldr	r4, [r0, #24]
 80a0b9a:	4605      	mov	r5, r0
 80a0b9c:	6003      	str	r3, [r0, #0]
 80a0b9e:	b17c      	cbz	r4, 80a0bc0 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0ba0:	6863      	ldr	r3, [r4, #4]
 80a0ba2:	3b01      	subs	r3, #1
 80a0ba4:	6063      	str	r3, [r4, #4]
 80a0ba6:	b95b      	cbnz	r3, 80a0bc0 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a0ba8:	6823      	ldr	r3, [r4, #0]
 80a0baa:	4620      	mov	r0, r4
 80a0bac:	689b      	ldr	r3, [r3, #8]
 80a0bae:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0bb0:	68a3      	ldr	r3, [r4, #8]
 80a0bb2:	3b01      	subs	r3, #1
 80a0bb4:	60a3      	str	r3, [r4, #8]
 80a0bb6:	b91b      	cbnz	r3, 80a0bc0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0bb8:	6823      	ldr	r3, [r4, #0]
 80a0bba:	4620      	mov	r0, r4
 80a0bbc:	68db      	ldr	r3, [r3, #12]
 80a0bbe:	4798      	blx	r3
 80a0bc0:	4628      	mov	r0, r5
 80a0bc2:	bd38      	pop	{r3, r4, r5, pc}
 80a0bc4:	080a58c8 	.word	0x080a58c8

080a0bc8 <_ZN9TCPClientD0Ev>:
 80a0bc8:	b510      	push	{r4, lr}
 80a0bca:	4604      	mov	r4, r0
 80a0bcc:	f7ff ffe2 	bl	80a0b94 <_ZN9TCPClientD1Ev>
 80a0bd0:	4620      	mov	r0, r4
 80a0bd2:	211c      	movs	r1, #28
 80a0bd4:	f002 fdfb 	bl	80a37ce <_ZdlPvj>
 80a0bd8:	4620      	mov	r0, r4
 80a0bda:	bd10      	pop	{r4, pc}

080a0bdc <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0bdc:	b538      	push	{r3, r4, r5, lr}
 80a0bde:	461d      	mov	r5, r3
    this->callback = callback;
 80a0be0:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0be2:	4604      	mov	r4, r0
    this->callback = callback;
 80a0be4:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a0be6:	2300      	movs	r3, #0
 80a0be8:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a0bea:	b102      	cbz	r2, 80a0bee <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a0bec:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a0bee:	b119      	cbz	r1, 80a0bf8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a0bf0:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0bf4:	f002 f808 	bl	80a2c08 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0bf8:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a0bfa:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a0bfc:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0bfe:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a0c00:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0c04:	2bff      	cmp	r3, #255	; 0xff
 80a0c06:	bfb8      	it	lt
 80a0c08:	23ff      	movlt	r3, #255	; 0xff
 80a0c0a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a0c0e:	b108      	cbz	r0, 80a0c14 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a0c10:	f7ff fa49 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a0c14:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a0c18:	f7ff fa41 	bl	80a009e <_Znaj>
 80a0c1c:	61e0      	str	r0, [r4, #28]
 80a0c1e:	bd38      	pop	{r3, r4, r5, pc}

080a0c20 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0c20:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0c24:	4604      	mov	r4, r0
 80a0c26:	4617      	mov	r7, r2
 80a0c28:	4698      	mov	r8, r3
 80a0c2a:	460e      	mov	r6, r1
 80a0c2c:	2500      	movs	r5, #0
 80a0c2e:	f001 ff39 	bl	80a2aa4 <_ZN9TCPClientC1Ev>
 80a0c32:	61e5      	str	r5, [r4, #28]
 80a0c34:	490a      	ldr	r1, [pc, #40]	; (80a0c60 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
 80a0c36:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0c3a:	f001 ffd2 	bl	80a2be2 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a0c3e:	23ff      	movs	r3, #255	; 0xff
 80a0c40:	9302      	str	r3, [sp, #8]
 80a0c42:	230f      	movs	r3, #15
 80a0c44:	9300      	str	r3, [sp, #0]
 80a0c46:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0c48:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a0c4a:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0c4e:	463b      	mov	r3, r7
 80a0c50:	462a      	mov	r2, r5
 80a0c52:	4631      	mov	r1, r6
 80a0c54:	f7ff ffc2 	bl	80a0bdc <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a0c58:	4620      	mov	r0, r4
 80a0c5a:	b004      	add	sp, #16
 80a0c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0c60:	080a59ce 	.word	0x080a59ce

080a0c64 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a0c64:	b510      	push	{r4, lr}
 80a0c66:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0c68:	4620      	mov	r0, r4
 80a0c6a:	f001 fdaf 	bl	80a27cc <_ZN9TCPClient9availableEv>
 80a0c6e:	2800      	cmp	r0, #0
 80a0c70:	d0fa      	beq.n	80a0c68 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a0c72:	4620      	mov	r0, r4
 80a0c74:	f001 fd5f 	bl	80a2736 <_ZN9TCPClient4readEv>
}
 80a0c78:	b2c0      	uxtb	r0, r0
 80a0c7a:	bd10      	pop	{r4, pc}

080a0c7c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0c80:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0c82:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0c84:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0c86:	f7ff ffed 	bl	80a0c64 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a0c8a:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0c8e:	4646      	mov	r6, r8
 80a0c90:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a0c92:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a0c94:	2700      	movs	r7, #0
 80a0c96:	f893 9000 	ldrb.w	r9, [r3]
 80a0c9a:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a0c9e:	4628      	mov	r0, r5
 80a0ca0:	f7ff ffe0 	bl	80a0c64 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a0ca4:	69eb      	ldr	r3, [r5, #28]
 80a0ca6:	1c74      	adds	r4, r6, #1
 80a0ca8:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0caa:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a0cae:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a0cb2:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0cb4:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0cb6:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a0cb8:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a0cbc:	d501      	bpl.n	80a0cc2 <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0cbe:	4626      	mov	r6, r4
 80a0cc0:	e7ed      	b.n	80a0c9e <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0cc2:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a0cc4:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0cc8:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a0ccc:	d113      	bne.n	80a0cf6 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a0cce:	4628      	mov	r0, r5
 80a0cd0:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a0cd4:	f7ff ffc6 	bl	80a0c64 <_ZN4MQTT8readByteEv>
 80a0cd8:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a0cdc:	4628      	mov	r0, r5
 80a0cde:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a0ce2:	f7ff ffbf 	bl	80a0c64 <_ZN4MQTT8readByteEv>
 80a0ce6:	1cf4      	adds	r4, r6, #3
 80a0ce8:	3602      	adds	r6, #2
 80a0cea:	b2b6      	uxth	r6, r6
 80a0cec:	b2a4      	uxth	r4, r4
 80a0cee:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a0cf2:	2302      	movs	r3, #2
 80a0cf4:	e000      	b.n	80a0cf8 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a0cf6:	2300      	movs	r3, #0
 80a0cf8:	1b1b      	subs	r3, r3, r4
 80a0cfa:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0cfc:	19a3      	adds	r3, r4, r6
 80a0cfe:	b29b      	uxth	r3, r3
 80a0d00:	429f      	cmp	r7, r3
 80a0d02:	d90b      	bls.n	80a0d1c <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a0d04:	4628      	mov	r0, r5
 80a0d06:	f7ff ffad 	bl	80a0c64 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a0d0a:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a0d0e:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a0d10:	bf84      	itt	hi
 80a0d12:	69eb      	ldrhi	r3, [r5, #28]
 80a0d14:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a0d16:	3401      	adds	r4, #1
 80a0d18:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0d1a:	e7ef      	b.n	80a0cfc <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a0d1c:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a0d20:	42a0      	cmp	r0, r4
 80a0d22:	bf2c      	ite	cs
 80a0d24:	4620      	movcs	r0, r4
 80a0d26:	2000      	movcc	r0, #0
 80a0d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0d2c <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0d2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0d2e:	4607      	mov	r7, r0
 80a0d30:	468e      	mov	lr, r1
 80a0d32:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a0d34:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a0d36:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a0d38:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0d3c:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a0d3e:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0d40:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a0d42:	bf18      	it	ne
 80a0d44:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a0d48:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0d4a:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a0d4e:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a0d50:	2d00      	cmp	r5, #0
 80a0d52:	d1f1      	bne.n	80a0d38 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a0d54:	f1c4 0304 	rsb	r3, r4, #4
 80a0d58:	18d1      	adds	r1, r2, r3
 80a0d5a:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a0d5e:	42a5      	cmp	r5, r4
 80a0d60:	da06      	bge.n	80a0d70 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a0d62:	a801      	add	r0, sp, #4
 80a0d64:	1b2b      	subs	r3, r5, r4
 80a0d66:	5c28      	ldrb	r0, [r5, r0]
 80a0d68:	4413      	add	r3, r2
 80a0d6a:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a0d6c:	3501      	adds	r5, #1
 80a0d6e:	e7f6      	b.n	80a0d5e <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a0d70:	1c72      	adds	r2, r6, #1
 80a0d72:	4422      	add	r2, r4
 80a0d74:	4638      	mov	r0, r7
 80a0d76:	f001 fc86 	bl	80a2686 <_ZN9TCPClient5writeEPKhj>
 80a0d7a:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0d7c:	f001 f930 	bl	80a1fe0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0d80:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a0d82:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0d84:	4434      	add	r4, r6
 80a0d86:	b2a8      	uxth	r0, r5
}
 80a0d88:	1a23      	subs	r3, r4, r0
 80a0d8a:	4258      	negs	r0, r3
 80a0d8c:	4158      	adcs	r0, r3
 80a0d8e:	b003      	add	sp, #12
 80a0d90:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0d92 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a0d92:	b510      	push	{r4, lr}
 80a0d94:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a0d96:	69c3      	ldr	r3, [r0, #28]
 80a0d98:	22e0      	movs	r2, #224	; 0xe0
 80a0d9a:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a0d9c:	69c3      	ldr	r3, [r0, #28]
 80a0d9e:	2200      	movs	r2, #0
 80a0da0:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a0da2:	69c1      	ldr	r1, [r0, #28]
 80a0da4:	2202      	movs	r2, #2
 80a0da6:	f001 fc6e 	bl	80a2686 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a0daa:	4620      	mov	r0, r4
 80a0dac:	f001 fd4a 	bl	80a2844 <_ZN9TCPClient4stopEv>
 80a0db0:	f001 f916 	bl	80a1fe0 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a0db4:	6260      	str	r0, [r4, #36]	; 0x24
 80a0db6:	62a0      	str	r0, [r4, #40]	; 0x28
 80a0db8:	bd10      	pop	{r4, pc}

080a0dba <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0dba:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a0dbc:	460d      	mov	r5, r1
 80a0dbe:	3302      	adds	r3, #2
 80a0dc0:	b29b      	uxth	r3, r3
 80a0dc2:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a0dc4:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a0dc8:	b2a4      	uxth	r4, r4
 80a0dca:	b13e      	cbz	r6, 80a0ddc <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a0dcc:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a0dd0:	429f      	cmp	r7, r3
 80a0dd2:	d903      	bls.n	80a0ddc <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a0dd4:	1c5c      	adds	r4, r3, #1
 80a0dd6:	54d6      	strb	r6, [r2, r3]
 80a0dd8:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a0dda:	e7f2      	b.n	80a0dc2 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a0ddc:	1b19      	subs	r1, r3, r4
 80a0dde:	440a      	add	r2, r1
 80a0de0:	1221      	asrs	r1, r4, #8
 80a0de2:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a0de6:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a0dea:	4618      	mov	r0, r3
 80a0dec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0dee <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a0dee:	b538      	push	{r3, r4, r5, lr}
 80a0df0:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a0df2:	f001 fde8 	bl	80a29c6 <_ZN9TCPClient9connectedEv>
 80a0df6:	2800      	cmp	r0, #0
 80a0df8:	bf14      	ite	ne
 80a0dfa:	2401      	movne	r4, #1
 80a0dfc:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a0dfe:	d102      	bne.n	80a0e06 <_ZN4MQTT11isConnectedEv+0x18>
 80a0e00:	4628      	mov	r0, r5
 80a0e02:	f001 fd1f 	bl	80a2844 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a0e06:	4620      	mov	r0, r4
 80a0e08:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0e0c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a0e0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0e10:	b087      	sub	sp, #28
 80a0e12:	4604      	mov	r4, r0
 80a0e14:	4689      	mov	r9, r1
 80a0e16:	4617      	mov	r7, r2
 80a0e18:	461e      	mov	r6, r3
 80a0e1a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a0e1e:	f7ff ffe6 	bl	80a0dee <_ZN4MQTT11isConnectedEv>
 80a0e22:	4605      	mov	r5, r0
 80a0e24:	2800      	cmp	r0, #0
 80a0e26:	f040 80bd 	bne.w	80a0fa4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a0e2a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0e2c:	b939      	cbnz	r1, 80a0e3e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0e2e:	4603      	mov	r3, r0
 80a0e30:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0e34:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0e36:	4620      	mov	r0, r4
 80a0e38:	f001 fe56 	bl	80a2ae8 <_ZN9TCPClient7connectEPKctm>
 80a0e3c:	e009      	b.n	80a0e52 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a0e3e:	4668      	mov	r0, sp
 80a0e40:	f002 f974 	bl	80a312c <_ZN9IPAddressC1EPKh>
 80a0e44:	462b      	mov	r3, r5
 80a0e46:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0e4a:	4669      	mov	r1, sp
 80a0e4c:	4620      	mov	r0, r4
 80a0e4e:	f001 fd13 	bl	80a2878 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a0e52:	2800      	cmp	r0, #0
 80a0e54:	f000 80a2 	beq.w	80a0f9c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a0e58:	2301      	movs	r3, #1
 80a0e5a:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a0e5c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a0e60:	2b04      	cmp	r3, #4
 80a0e62:	d115      	bne.n	80a0e90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0e64:	4b52      	ldr	r3, [pc, #328]	; (80a0fb0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a0e66:	6818      	ldr	r0, [r3, #0]
 80a0e68:	889a      	ldrh	r2, [r3, #4]
 80a0e6a:	9000      	str	r0, [sp, #0]
 80a0e6c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a0e70:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0e72:	69e2      	ldr	r2, [r4, #28]
 80a0e74:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0e76:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0e7a:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0e7e:	1d53      	adds	r3, r2, #5
 80a0e80:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a0e84:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0e88:	8099      	strh	r1, [r3, #4]
 80a0e8a:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a0e8c:	230c      	movs	r3, #12
 80a0e8e:	e012      	b.n	80a0eb6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0e90:	466a      	mov	r2, sp
 80a0e92:	4b48      	ldr	r3, [pc, #288]	; (80a0fb4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0e94:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0e98:	6818      	ldr	r0, [r3, #0]
 80a0e9a:	6859      	ldr	r1, [r3, #4]
 80a0e9c:	7a1b      	ldrb	r3, [r3, #8]
 80a0e9e:	c203      	stmia	r2!, {r0, r1}
 80a0ea0:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0ea2:	466b      	mov	r3, sp
 80a0ea4:	cb03      	ldmia	r3!, {r0, r1}
 80a0ea6:	f8cc 0005 	str.w	r0, [ip, #5]
 80a0eaa:	f8cc 1009 	str.w	r1, [ip, #9]
 80a0eae:	7813      	ldrb	r3, [r2, #0]
 80a0eb0:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a0eb4:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a0eb6:	f1b8 0f00 	cmp.w	r8, #0
 80a0eba:	d00a      	beq.n	80a0ed2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a0ebc:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a0ec0:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a0ec4:	0152      	lsls	r2, r2, #5
 80a0ec6:	f042 0206 	orr.w	r2, r2, #6
 80a0eca:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a0ece:	b2d2      	uxtb	r2, r2
 80a0ed0:	e000      	b.n	80a0ed4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a0ed2:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a0ed4:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a0ed8:	b909      	cbnz	r1, 80a0ede <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a0eda:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a0ede:	b12f      	cbz	r7, 80a0eec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a0ee0:	b916      	cbnz	r6, 80a0ee8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a0ee2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a0ee6:	e001      	b.n	80a0eec <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a0ee8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a0eec:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a0eee:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a0ef0:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a0ef2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0ef4:	69e1      	ldr	r1, [r4, #28]
 80a0ef6:	1212      	asrs	r2, r2, #8
 80a0ef8:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a0efa:	69e1      	ldr	r1, [r4, #28]
 80a0efc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a0efe:	1c9a      	adds	r2, r3, #2
 80a0f00:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a0f02:	3303      	adds	r3, #3
 80a0f04:	69e2      	ldr	r2, [r4, #28]
 80a0f06:	4649      	mov	r1, r9
 80a0f08:	4620      	mov	r0, r4
 80a0f0a:	f7ff ff56 	bl	80a0dba <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a0f0e:	f1b8 0f00 	cmp.w	r8, #0
 80a0f12:	d00b      	beq.n	80a0f2c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a0f14:	4603      	mov	r3, r0
 80a0f16:	69e2      	ldr	r2, [r4, #28]
 80a0f18:	4641      	mov	r1, r8
 80a0f1a:	4620      	mov	r0, r4
 80a0f1c:	f7ff ff4d 	bl	80a0dba <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a0f20:	69e2      	ldr	r2, [r4, #28]
 80a0f22:	4603      	mov	r3, r0
 80a0f24:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a0f26:	4620      	mov	r0, r4
 80a0f28:	f7ff ff47 	bl	80a0dba <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a0f2c:	b167      	cbz	r7, 80a0f48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a0f2e:	4603      	mov	r3, r0
 80a0f30:	69e2      	ldr	r2, [r4, #28]
 80a0f32:	4639      	mov	r1, r7
 80a0f34:	4620      	mov	r0, r4
 80a0f36:	f7ff ff40 	bl	80a0dba <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a0f3a:	b12e      	cbz	r6, 80a0f48 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a0f3c:	4603      	mov	r3, r0
 80a0f3e:	69e2      	ldr	r2, [r4, #28]
 80a0f40:	4631      	mov	r1, r6
 80a0f42:	4620      	mov	r0, r4
 80a0f44:	f7ff ff39 	bl	80a0dba <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a0f48:	1f43      	subs	r3, r0, #5
 80a0f4a:	b29b      	uxth	r3, r3
 80a0f4c:	69e2      	ldr	r2, [r4, #28]
 80a0f4e:	2110      	movs	r1, #16
 80a0f50:	4620      	mov	r0, r4
 80a0f52:	f7ff feeb 	bl	80a0d2c <_ZN4MQTT5writeEhPht>
 80a0f56:	f001 f843 	bl	80a1fe0 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0f5a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a0f5e:	6260      	str	r0, [r4, #36]	; 0x24
 80a0f60:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a0f62:	4620      	mov	r0, r4
 80a0f64:	f001 fc32 	bl	80a27cc <_ZN9TCPClient9availableEv>
 80a0f68:	b940      	cbnz	r0, 80a0f7c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a0f6a:	f001 f839 	bl	80a1fe0 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0f6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0f70:	1ac0      	subs	r0, r0, r3
 80a0f72:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0f74:	4373      	muls	r3, r6
 80a0f76:	4298      	cmp	r0, r3
 80a0f78:	d9f3      	bls.n	80a0f62 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a0f7a:	e00f      	b.n	80a0f9c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a0f7c:	4669      	mov	r1, sp
 80a0f7e:	4620      	mov	r0, r4
 80a0f80:	f7ff fe7c 	bl	80a0c7c <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a0f84:	2804      	cmp	r0, #4
 80a0f86:	d109      	bne.n	80a0f9c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a0f88:	69e3      	ldr	r3, [r4, #28]
 80a0f8a:	78de      	ldrb	r6, [r3, #3]
 80a0f8c:	b936      	cbnz	r6, 80a0f9c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a0f8e:	f001 f827 	bl	80a1fe0 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a0f92:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a0f94:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a0f96:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a0f9a:	e004      	b.n	80a0fa6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a0f9c:	4620      	mov	r0, r4
 80a0f9e:	f001 fc51 	bl	80a2844 <_ZN9TCPClient4stopEv>
 80a0fa2:	e000      	b.n	80a0fa6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a0fa4:	2500      	movs	r5, #0
}
 80a0fa6:	4628      	mov	r0, r5
 80a0fa8:	b007      	add	sp, #28
 80a0faa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0fae:	bf00      	nop
 80a0fb0:	080a57cb 	.word	0x080a57cb
 80a0fb4:	080a57d2 	.word	0x080a57d2

080a0fb8 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a0fb8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a0fba:	2304      	movs	r3, #4
 80a0fbc:	9305      	str	r3, [sp, #20]
 80a0fbe:	2301      	movs	r3, #1
 80a0fc0:	9304      	str	r3, [sp, #16]
 80a0fc2:	2300      	movs	r3, #0
 80a0fc4:	9303      	str	r3, [sp, #12]
 80a0fc6:	9302      	str	r3, [sp, #8]
 80a0fc8:	9301      	str	r3, [sp, #4]
 80a0fca:	9300      	str	r3, [sp, #0]
 80a0fcc:	461a      	mov	r2, r3
 80a0fce:	f7ff ff1d 	bl	80a0e0c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a0fd2:	b007      	add	sp, #28
 80a0fd4:	f85d fb04 	ldr.w	pc, [sp], #4

080a0fd8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0fd8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fdc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a0fde:	4604      	mov	r4, r0
 80a0fe0:	468b      	mov	fp, r1
 80a0fe2:	4691      	mov	r9, r2
 80a0fe4:	469a      	mov	sl, r3
 80a0fe6:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a0fea:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a0fee:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a0ff2:	f7ff fefc 	bl	80a0dee <_ZN4MQTT11isConnectedEv>
 80a0ff6:	2800      	cmp	r0, #0
 80a0ff8:	d04b      	beq.n	80a1092 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a0ffa:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a0ffe:	2100      	movs	r1, #0
 80a1000:	69e0      	ldr	r0, [r4, #28]
 80a1002:	f003 fce2 	bl	80a49ca <memset>

        length = writeString(topic, buffer, length);
 80a1006:	2305      	movs	r3, #5
 80a1008:	69e2      	ldr	r2, [r4, #28]
 80a100a:	4659      	mov	r1, fp
 80a100c:	4620      	mov	r0, r4
 80a100e:	f7ff fed4 	bl	80a0dba <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a1012:	1e6b      	subs	r3, r5, #1
 80a1014:	2b01      	cmp	r3, #1
 80a1016:	d812      	bhi.n	80a103e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a1018:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a101a:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a101c:	3301      	adds	r3, #1
 80a101e:	b29b      	uxth	r3, r3
 80a1020:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a1022:	121b      	asrs	r3, r3, #8
 80a1024:	5413      	strb	r3, [r2, r0]
 80a1026:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a1028:	69e3      	ldr	r3, [r4, #28]
 80a102a:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a102c:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a102e:	3002      	adds	r0, #2
 80a1030:	b280      	uxth	r0, r0
 80a1032:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a1034:	b11e      	cbz	r6, 80a103e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a1036:	8c23      	ldrh	r3, [r4, #32]
 80a1038:	1c5a      	adds	r2, r3, #1
 80a103a:	8422      	strh	r2, [r4, #32]
 80a103c:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a103e:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a1040:	b291      	uxth	r1, r2
 80a1042:	1883      	adds	r3, r0, r2
 80a1044:	458a      	cmp	sl, r1
 80a1046:	b29b      	uxth	r3, r3
 80a1048:	d909      	bls.n	80a105e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a104a:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a104e:	3201      	adds	r2, #1
 80a1050:	429e      	cmp	r6, r3
 80a1052:	d904      	bls.n	80a105e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a1054:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a1058:	69e1      	ldr	r1, [r4, #28]
 80a105a:	54ce      	strb	r6, [r1, r3]
 80a105c:	e7f0      	b.n	80a1040 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a105e:	f1b8 0f00 	cmp.w	r8, #0
 80a1062:	bf0c      	ite	eq
 80a1064:	2130      	moveq	r1, #48	; 0x30
 80a1066:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a1068:	b10f      	cbz	r7, 80a106e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a106a:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a106e:	2d02      	cmp	r5, #2
 80a1070:	d102      	bne.n	80a1078 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a1072:	f041 0104 	orr.w	r1, r1, #4
 80a1076:	e003      	b.n	80a1080 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a1078:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a107a:	bf08      	it	eq
 80a107c:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a1080:	4620      	mov	r0, r4
 80a1082:	3b05      	subs	r3, #5
 80a1084:	69e2      	ldr	r2, [r4, #28]
 80a1086:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a1088:	b001      	add	sp, #4
 80a108a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a108e:	f7ff be4d 	b.w	80a0d2c <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a1092:	b001      	add	sp, #4
 80a1094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1098 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a1098:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a109a:	9c08      	ldr	r4, [sp, #32]
 80a109c:	9403      	str	r4, [sp, #12]
 80a109e:	2400      	movs	r4, #0
 80a10a0:	9402      	str	r4, [sp, #8]
 80a10a2:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a10a6:	9401      	str	r4, [sp, #4]
 80a10a8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a10ac:	9400      	str	r4, [sp, #0]
 80a10ae:	f7ff ff93 	bl	80a0fd8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a10b2:	b004      	add	sp, #16
 80a10b4:	bd10      	pop	{r4, pc}

080a10b6 <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a10b6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a10b8:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a10ba:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a10bc:	460e      	mov	r6, r1
 80a10be:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a10c0:	f003 fcc6 	bl	80a4a50 <strlen>
 80a10c4:	2300      	movs	r3, #0
 80a10c6:	9302      	str	r3, [sp, #8]
 80a10c8:	9301      	str	r3, [sp, #4]
 80a10ca:	9300      	str	r3, [sp, #0]
 80a10cc:	4622      	mov	r2, r4
 80a10ce:	4603      	mov	r3, r0
 80a10d0:	4631      	mov	r1, r6
 80a10d2:	4628      	mov	r0, r5
 80a10d4:	f7ff ffe0 	bl	80a1098 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a10d8:	b004      	add	sp, #16
 80a10da:	bd70      	pop	{r4, r5, r6, pc}

080a10dc <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
 80a10dc:	b538      	push	{r3, r4, r5, lr}
 80a10de:	4604      	mov	r4, r0
 80a10e0:	460d      	mov	r5, r1
    if (isConnected()) {
 80a10e2:	f7ff fe84 	bl	80a0dee <_ZN4MQTT11isConnectedEv>
 80a10e6:	b190      	cbz	r0, 80a110e <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a10e8:	69e3      	ldr	r3, [r4, #28]
 80a10ea:	2262      	movs	r2, #98	; 0x62
 80a10ec:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a10ee:	69e3      	ldr	r3, [r4, #28]
 80a10f0:	2202      	movs	r2, #2
 80a10f2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a10f4:	69e3      	ldr	r3, [r4, #28]
 80a10f6:	122a      	asrs	r2, r5, #8
 80a10f8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a10fa:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a10fc:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a10fe:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a1100:	69e1      	ldr	r1, [r4, #28]
 80a1102:	4620      	mov	r0, r4
 80a1104:	f001 fabf 	bl	80a2686 <_ZN9TCPClient5writeEPKhj>
 80a1108:	3000      	adds	r0, #0
 80a110a:	bf18      	it	ne
 80a110c:	2001      	movne	r0, #1
    }
    return false;
}
 80a110e:	bd38      	pop	{r3, r4, r5, pc}

080a1110 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 80a1110:	b538      	push	{r3, r4, r5, lr}
 80a1112:	4604      	mov	r4, r0
 80a1114:	460d      	mov	r5, r1
    if (isConnected()) {
 80a1116:	f7ff fe6a 	bl	80a0dee <_ZN4MQTT11isConnectedEv>
 80a111a:	b190      	cbz	r0, 80a1142 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a111c:	69e3      	ldr	r3, [r4, #28]
 80a111e:	2272      	movs	r2, #114	; 0x72
 80a1120:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a1122:	69e3      	ldr	r3, [r4, #28]
 80a1124:	2202      	movs	r2, #2
 80a1126:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a1128:	69e3      	ldr	r3, [r4, #28]
 80a112a:	122a      	asrs	r2, r5, #8
 80a112c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a112e:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a1130:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a1132:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a1134:	69e1      	ldr	r1, [r4, #28]
 80a1136:	4620      	mov	r0, r4
 80a1138:	f001 faa5 	bl	80a2686 <_ZN9TCPClient5writeEPKhj>
 80a113c:	3000      	adds	r0, #0
 80a113e:	bf18      	it	ne
 80a1140:	2001      	movne	r0, #1
    }
    return false;
}
 80a1142:	bd38      	pop	{r3, r4, r5, pc}

080a1144 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a1144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1148:	b083      	sub	sp, #12
 80a114a:	af00      	add	r7, sp, #0
 80a114c:	4604      	mov	r4, r0
    if (isConnected()) {
 80a114e:	f7ff fe4e 	bl	80a0dee <_ZN4MQTT11isConnectedEv>
 80a1152:	4681      	mov	r9, r0
 80a1154:	2800      	cmp	r0, #0
 80a1156:	f000 80f6 	beq.w	80a1346 <_ZN4MQTT4loopEv+0x202>
 80a115a:	f000 ff41 	bl	80a1fe0 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a115e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a1160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1164:	4353      	muls	r3, r2
 80a1166:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a1168:	4605      	mov	r5, r0
 80a116a:	1a82      	subs	r2, r0, r2
 80a116c:	429a      	cmp	r2, r3
 80a116e:	d803      	bhi.n	80a1178 <_ZN4MQTT4loopEv+0x34>
 80a1170:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a1172:	1a82      	subs	r2, r0, r2
 80a1174:	4293      	cmp	r3, r2
 80a1176:	d217      	bcs.n	80a11a8 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a1178:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a117c:	b12b      	cbz	r3, 80a118a <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a117e:	4620      	mov	r0, r4
 80a1180:	f001 fb60 	bl	80a2844 <_ZN9TCPClient4stopEv>
                return false;
 80a1184:	f04f 0900 	mov.w	r9, #0
 80a1188:	e0dd      	b.n	80a1346 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a118a:	69e2      	ldr	r2, [r4, #28]
 80a118c:	21c0      	movs	r1, #192	; 0xc0
 80a118e:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a1190:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a1192:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a1194:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a1196:	69e1      	ldr	r1, [r4, #28]
 80a1198:	2202      	movs	r2, #2
 80a119a:	f001 fa74 	bl	80a2686 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a119e:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a11a0:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a11a2:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a11a4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a11a8:	4620      	mov	r0, r4
 80a11aa:	f001 fb0f 	bl	80a27cc <_ZN9TCPClient9availableEv>
 80a11ae:	2800      	cmp	r0, #0
 80a11b0:	f000 80c9 	beq.w	80a1346 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a11b4:	1df9      	adds	r1, r7, #7
 80a11b6:	4620      	mov	r0, r4
 80a11b8:	f7ff fd60 	bl	80a0c7c <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a11bc:	4602      	mov	r2, r0
 80a11be:	2800      	cmp	r0, #0
 80a11c0:	f000 80c1 	beq.w	80a1346 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a11c4:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a11c6:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a11c8:	7818      	ldrb	r0, [r3, #0]
 80a11ca:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a11ce:	2930      	cmp	r1, #48	; 0x30
 80a11d0:	d17d      	bne.n	80a12ce <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 80a11d2:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a11d6:	f1bb 0f00 	cmp.w	fp, #0
 80a11da:	f000 80b4 	beq.w	80a1346 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a11de:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a11e2:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a11e4:	eb03 000c 	add.w	r0, r3, ip
 80a11e8:	7881      	ldrb	r1, [r0, #2]
 80a11ea:	f890 e001 	ldrb.w	lr, [r0, #1]
 80a11ee:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 80a11f2:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 80a11f6:	f10e 0108 	add.w	r1, lr, #8
 80a11fa:	f021 0107 	bic.w	r1, r1, #7
 80a11fe:	ebad 0d01 	sub.w	sp, sp, r1
 80a1202:	4668      	mov	r0, sp
 80a1204:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a1206:	b28e      	uxth	r6, r1
 80a1208:	45b6      	cmp	lr, r6
 80a120a:	d906      	bls.n	80a121a <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a120c:	eb0c 0601 	add.w	r6, ip, r1
 80a1210:	441e      	add	r6, r3
 80a1212:	78f6      	ldrb	r6, [r6, #3]
 80a1214:	5446      	strb	r6, [r0, r1]
 80a1216:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a1218:	e7f5      	b.n	80a1206 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a121a:	2100      	movs	r1, #0
 80a121c:	f800 100e 	strb.w	r1, [r0, lr]
 80a1220:	781e      	ldrb	r6, [r3, #0]
 80a1222:	f10c 0103 	add.w	r1, ip, #3
 80a1226:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a122a:	2e02      	cmp	r6, #2
 80a122c:	ebcc 0202 	rsb	r2, ip, r2
 80a1230:	d11e      	bne.n	80a1270 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1232:	4471      	add	r1, lr
 80a1234:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a1238:	4419      	add	r1, r3
 80a123a:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a123c:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1240:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a1244:	f10c 0105 	add.w	r1, ip, #5
 80a1248:	4471      	add	r1, lr
 80a124a:	3a05      	subs	r2, #5
 80a124c:	4419      	add	r1, r3
 80a124e:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a1250:	69e3      	ldr	r3, [r4, #28]
 80a1252:	2240      	movs	r2, #64	; 0x40
 80a1254:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a1256:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1258:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 80a125c:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a125e:	69e3      	ldr	r3, [r4, #28]
 80a1260:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a1264:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a1266:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a1268:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a126a:	f883 8003 	strb.w	r8, [r3, #3]
 80a126e:	e020      	b.n	80a12b2 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a1270:	2e04      	cmp	r6, #4
 80a1272:	d124      	bne.n	80a12be <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1274:	4471      	add	r1, lr
 80a1276:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a127a:	4419      	add	r1, r3
 80a127c:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a127e:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1282:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a1286:	f10c 0105 	add.w	r1, ip, #5
 80a128a:	4471      	add	r1, lr
 80a128c:	3a05      	subs	r2, #5
 80a128e:	4419      	add	r1, r3
 80a1290:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a1292:	69e3      	ldr	r3, [r4, #28]
 80a1294:	2250      	movs	r2, #80	; 0x50
 80a1296:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a1298:	69e3      	ldr	r3, [r4, #28]
 80a129a:	2202      	movs	r2, #2
 80a129c:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a129e:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a12a0:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 80a12a4:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a12a8:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 80a12aa:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 80a12ac:	69e3      	ldr	r3, [r4, #28]
 80a12ae:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 80a12b2:	69e1      	ldr	r1, [r4, #28]
 80a12b4:	4620      	mov	r0, r4
 80a12b6:	f001 f9e6 	bl	80a2686 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 80a12ba:	6265      	str	r5, [r4, #36]	; 0x24
 80a12bc:	e005      	b.n	80a12ca <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a12be:	3a03      	subs	r2, #3
 80a12c0:	4471      	add	r1, lr
 80a12c2:	ebce 0202 	rsb	r2, lr, r2
 80a12c6:	4419      	add	r1, r3
 80a12c8:	47d8      	blx	fp
 80a12ca:	46d5      	mov	sp, sl
 80a12cc:	e03b      	b.n	80a1346 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 80a12ce:	2950      	cmp	r1, #80	; 0x50
 80a12d0:	d108      	bne.n	80a12e4 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 80a12d2:	7899      	ldrb	r1, [r3, #2]
 80a12d4:	78db      	ldrb	r3, [r3, #3]
 80a12d6:	4620      	mov	r0, r4
 80a12d8:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a12dc:	b289      	uxth	r1, r1
 80a12de:	f7ff fefd 	bl	80a10dc <_ZN4MQTT14publishReleaseEt>
 80a12e2:	e030      	b.n	80a1346 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 80a12e4:	2940      	cmp	r1, #64	; 0x40
 80a12e6:	d00c      	beq.n	80a1302 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 80a12e8:	2960      	cmp	r1, #96	; 0x60
 80a12ea:	d108      	bne.n	80a12fe <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 80a12ec:	7899      	ldrb	r1, [r3, #2]
 80a12ee:	78db      	ldrb	r3, [r3, #3]
 80a12f0:	4620      	mov	r0, r4
 80a12f2:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a12f6:	b289      	uxth	r1, r1
 80a12f8:	f7ff ff0a 	bl	80a1110 <_ZN4MQTT15publishCompleteEt>
 80a12fc:	e023      	b.n	80a1346 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 80a12fe:	2970      	cmp	r1, #112	; 0x70
 80a1300:	d10d      	bne.n	80a131e <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 80a1302:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a1304:	b1f9      	cbz	r1, 80a1346 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a1306:	2a04      	cmp	r2, #4
 80a1308:	d11d      	bne.n	80a1346 <_ZN4MQTT4loopEv+0x202>
 80a130a:	f010 0f06 	tst.w	r0, #6
 80a130e:	d11a      	bne.n	80a1346 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 80a1310:	7898      	ldrb	r0, [r3, #2]
 80a1312:	78db      	ldrb	r3, [r3, #3]
 80a1314:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a1318:	b280      	uxth	r0, r0
 80a131a:	4788      	blx	r1
 80a131c:	e013      	b.n	80a1346 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 80a131e:	2990      	cmp	r1, #144	; 0x90
 80a1320:	d011      	beq.n	80a1346 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a1322:	29c0      	cmp	r1, #192	; 0xc0
 80a1324:	d10a      	bne.n	80a133c <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 80a1326:	22d0      	movs	r2, #208	; 0xd0
 80a1328:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a132a:	69e3      	ldr	r3, [r4, #28]
 80a132c:	2200      	movs	r2, #0
 80a132e:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a1330:	69e1      	ldr	r1, [r4, #28]
 80a1332:	2202      	movs	r2, #2
 80a1334:	4620      	mov	r0, r4
 80a1336:	f001 f9a6 	bl	80a2686 <_ZN9TCPClient5writeEPKhj>
 80a133a:	e004      	b.n	80a1346 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 80a133c:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 80a133e:	bf04      	itt	eq
 80a1340:	2300      	moveq	r3, #0
 80a1342:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a1346:	4648      	mov	r0, r9
 80a1348:	370c      	adds	r7, #12
 80a134a:	46bd      	mov	sp, r7
 80a134c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1350 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a1350:	b510      	push	{r4, lr}
 80a1352:	4604      	mov	r4, r0
    if (isConnected()) {
 80a1354:	f7ff fd4b 	bl	80a0dee <_ZN4MQTT11isConnectedEv>
 80a1358:	b110      	cbz	r0, 80a1360 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a135a:	4620      	mov	r0, r4
 80a135c:	f7ff fd19 	bl	80a0d92 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a1360:	69e0      	ldr	r0, [r4, #28]
 80a1362:	b108      	cbz	r0, 80a1368 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a1364:	f7fe fe9f 	bl	80a00a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a1368:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a136c:	f001 fbf2 	bl	80a2b54 <_ZN6StringD1Ev>
 80a1370:	4620      	mov	r0, r4
 80a1372:	f7ff fc0f 	bl	80a0b94 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a1376:	4620      	mov	r0, r4
 80a1378:	bd10      	pop	{r4, pc}

080a137a <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a137a:	f000 bdc9 	b.w	80a1f10 <HAL_Pin_Map>
	...

080a1380 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a1380:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a1382:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 80a1384:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a1386:	4608      	mov	r0, r1
 80a1388:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 80a138a:	b133      	cbz	r3, 80a139a <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 80a138c:	b93d      	cbnz	r5, 80a139e <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 80a138e:	490c      	ldr	r1, [pc, #48]	; (80a13c0 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 80a1390:	b004      	add	sp, #16
 80a1392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 80a1396:	f001 bc6e 	b.w	80a2c76 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 80a139a:	4b0a      	ldr	r3, [pc, #40]	; (80a13c4 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 80a139c:	e000      	b.n	80a13a0 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 80a139e:	4b0a      	ldr	r3, [pc, #40]	; (80a13c8 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 80a13a0:	7b16      	ldrb	r6, [r2, #12]
 80a13a2:	4c0a      	ldr	r4, [pc, #40]	; (80a13cc <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 80a13a4:	490a      	ldr	r1, [pc, #40]	; (80a13d0 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a13a6:	7b52      	ldrb	r2, [r2, #13]
 80a13a8:	2e01      	cmp	r6, #1
 80a13aa:	bf08      	it	eq
 80a13ac:	4621      	moveq	r1, r4
 80a13ae:	9202      	str	r2, [sp, #8]
 80a13b0:	9101      	str	r1, [sp, #4]
 80a13b2:	9500      	str	r5, [sp, #0]
 80a13b4:	4a07      	ldr	r2, [pc, #28]	; (80a13d4 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 80a13b6:	2100      	movs	r1, #0
 80a13b8:	f001 fca6 	bl	80a2d08 <_ZN5Print11printf_implEbPKcz>
  }
 80a13bc:	b004      	add	sp, #16
 80a13be:	bd70      	pop	{r4, r5, r6, pc}
 80a13c0:	080a57f9 	.word	0x080a57f9
 80a13c4:	080a59ce 	.word	0x080a59ce
 80a13c8:	080a57e8 	.word	0x080a57e8
 80a13cc:	080a57f1 	.word	0x080a57f1
 80a13d0:	080a57f5 	.word	0x080a57f5
 80a13d4:	080a580f 	.word	0x080a580f

080a13d8 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
 80a13d8:	22ff      	movs	r2, #255	; 0xff
 80a13da:	7402      	strb	r2, [r0, #16]
 80a13dc:	7442      	strb	r2, [r0, #17]
 80a13de:	7482      	strb	r2, [r0, #18]
 80a13e0:	74c2      	strb	r2, [r0, #19]
{ }
 80a13e2:	4770      	bx	lr

080a13e4 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a13e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
 80a13e8:	f990 3013 	ldrsb.w	r3, [r0, #19]
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a13ec:	4605      	mov	r5, r0
    // hardware SPI
    if (_sck == -1)
 80a13ee:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a13f0:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
 80a13f2:	d104      	bne.n	80a13fe <_ZN15Adafruit_BME2807spixferEh+0x1a>
        return SPI.transfer(x);
 80a13f4:	4816      	ldr	r0, [pc, #88]	; (80a1450 <_ZN15Adafruit_BME2807spixferEh+0x6c>)
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
 80a13f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
    // hardware SPI
    if (_sck == -1)
        return SPI.transfer(x);
 80a13fa:	f001 b909 	b.w	80a2610 <_ZN8SPIClass8transferEh>
 80a13fe:	2607      	movs	r6, #7
 80a1400:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
 80a1402:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
 80a1406:	f995 0013 	ldrsb.w	r0, [r5, #19]
 80a140a:	2100      	movs	r1, #0
 80a140c:	b280      	uxth	r0, r0
 80a140e:	f002 f952 	bl	80a36b6 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
 80a1412:	f995 0011 	ldrsb.w	r0, [r5, #17]
 80a1416:	fa08 f106 	lsl.w	r1, r8, r6
 80a141a:	4039      	ands	r1, r7
 80a141c:	b280      	uxth	r0, r0
 80a141e:	f002 f94a 	bl	80a36b6 <digitalWrite>
        digitalWrite(_sck, HIGH);
 80a1422:	f995 0013 	ldrsb.w	r0, [r5, #19]
 80a1426:	2101      	movs	r1, #1
 80a1428:	b280      	uxth	r0, r0
 80a142a:	f002 f944 	bl	80a36b6 <digitalWrite>
        if (digitalRead(_miso))
 80a142e:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
 80a1432:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
 80a1434:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
 80a1436:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
 80a1438:	f002 f956 	bl	80a36e8 <digitalRead>
 80a143c:	b108      	cbz	r0, 80a1442 <_ZN15Adafruit_BME2807spixferEh+0x5e>
            reply |= 1;
 80a143e:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
 80a1442:	f116 36ff 	adds.w	r6, r6, #4294967295
 80a1446:	d2de      	bcs.n	80a1406 <_ZN15Adafruit_BME2807spixferEh+0x22>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
 80a1448:	4620      	mov	r0, r4
 80a144a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a144e:	bf00      	nop
 80a1450:	20000aa0 	.word	0x20000aa0

080a1454 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 80a1454:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
 80a1456:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 80a145a:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a145c:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 80a145e:	460e      	mov	r6, r1
 80a1460:	4615      	mov	r5, r2
    if (_cs == -1) {
 80a1462:	d111      	bne.n	80a1488 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a1464:	7901      	ldrb	r1, [r0, #4]
 80a1466:	6800      	ldr	r0, [r0, #0]
 80a1468:	f002 f814 	bl	80a3494 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a146c:	6820      	ldr	r0, [r4, #0]
 80a146e:	4631      	mov	r1, r6
 80a1470:	6803      	ldr	r3, [r0, #0]
 80a1472:	689b      	ldr	r3, [r3, #8]
 80a1474:	4798      	blx	r3
        _wire -> write((uint8_t)value);
 80a1476:	6820      	ldr	r0, [r4, #0]
 80a1478:	4629      	mov	r1, r5
 80a147a:	6803      	ldr	r3, [r0, #0]
 80a147c:	689b      	ldr	r3, [r3, #8]
 80a147e:	4798      	blx	r3
        _wire -> endTransmission();
 80a1480:	6820      	ldr	r0, [r4, #0]
 80a1482:	f002 f80f 	bl	80a34a4 <_ZN7TwoWire15endTransmissionEv>
 80a1486:	e02f      	b.n	80a14e8 <_ZN15Adafruit_BME2806write8Ehh+0x94>
    } else {
        if (_sck == -1)
 80a1488:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a148c:	3301      	adds	r3, #1
 80a148e:	d10f      	bne.n	80a14b0 <_ZN15Adafruit_BME2806write8Ehh+0x5c>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 80a1490:	4b16      	ldr	r3, [pc, #88]	; (80a14ec <_ZN15Adafruit_BME2806write8Ehh+0x98>)
 80a1492:	4a17      	ldr	r2, [pc, #92]	; (80a14f0 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
 80a1494:	9300      	str	r3, [sp, #0]
 80a1496:	9202      	str	r2, [sp, #8]
 80a1498:	2300      	movs	r3, #0
 80a149a:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a149c:	4669      	mov	r1, sp
 80a149e:	4815      	ldr	r0, [pc, #84]	; (80a14f4 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
 80a14a0:	f88d 3004 	strb.w	r3, [sp, #4]
 80a14a4:	f88d 200c 	strb.w	r2, [sp, #12]
 80a14a8:	f88d 300d 	strb.w	r3, [sp, #13]
 80a14ac:	f001 f840 	bl	80a2530 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
 80a14b0:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a14b4:	2100      	movs	r1, #0
 80a14b6:	b280      	uxth	r0, r0
 80a14b8:	f002 f8fd 	bl	80a36b6 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
 80a14bc:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 80a14c0:	4620      	mov	r0, r4
 80a14c2:	f7ff ff8f 	bl	80a13e4 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
 80a14c6:	4629      	mov	r1, r5
 80a14c8:	4620      	mov	r0, r4
 80a14ca:	f7ff ff8b 	bl	80a13e4 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
 80a14ce:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a14d2:	2101      	movs	r1, #1
 80a14d4:	b280      	uxth	r0, r0
 80a14d6:	f002 f8ee 	bl	80a36b6 <digitalWrite>
    if (_sck == -1)
 80a14da:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a14de:	3301      	adds	r3, #1
 80a14e0:	d102      	bne.n	80a14e8 <_ZN15Adafruit_BME2806write8Ehh+0x94>
        SPI.endTransaction(); // release the SPI bus
 80a14e2:	4804      	ldr	r0, [pc, #16]	; (80a14f4 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
 80a14e4:	f001 f80b 	bl	80a24fe <_ZN8SPIClass14endTransactionEv>
    }
}
 80a14e8:	b004      	add	sp, #16
 80a14ea:	bd70      	pop	{r4, r5, r6, pc}
 80a14ec:	080a57e4 	.word	0x080a57e4
 80a14f0:	0007a120 	.word	0x0007a120
 80a14f4:	20000aa0 	.word	0x20000aa0

080a14f8 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a14f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a14fa:	4604      	mov	r4, r0
    _measReg.mode     = mode;
 80a14fc:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a1500:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.mode     = mode;
 80a1504:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
 80a1508:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
 80a150c:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
 80a1510:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a1514:	f89d e01c 	ldrb.w	lr, [sp, #28]
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
 80a1518:	f366 1347 	bfi	r3, r6, #5, #3
 80a151c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
 80a1520:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a1524:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
 80a1528:	f36e 03c5 	bfi	r3, lr, #3, #3
    _configReg.t_sb   = duration;
 80a152c:	f367 0302 	bfi	r3, r7, #0, #3
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
 80a1530:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
 80a1534:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
 80a1538:	f006 0207 	and.w	r2, r6, #7
 80a153c:	21f2      	movs	r1, #242	; 0xf2
 80a153e:	f7ff ff89 	bl	80a1454 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
 80a1542:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
 80a1546:	4620      	mov	r0, r4
 80a1548:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a154c:	f002 0107 	and.w	r1, r2, #7
 80a1550:	009b      	lsls	r3, r3, #2
 80a1552:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a1556:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
 80a155a:	21f5      	movs	r1, #245	; 0xf5
 80a155c:	f7ff ff7a 	bl	80a1454 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
 80a1560:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a1564:	4620      	mov	r0, r4
 80a1566:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a156a:	f002 0107 	and.w	r1, r2, #7
 80a156e:	009b      	lsls	r3, r3, #2
 80a1570:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a1574:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 80a1578:	21f4      	movs	r1, #244	; 0xf4
}
 80a157a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a157e:	f7ff bf69 	b.w	80a1454 <_ZN15Adafruit_BME2806write8Ehh>
	...

080a1584 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 80a1584:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
 80a1586:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 80a158a:	b085      	sub	sp, #20
    uint8_t value;
    
    if (_cs == -1) {
 80a158c:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 80a158e:	4604      	mov	r4, r0
 80a1590:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
 80a1592:	d116      	bne.n	80a15c2 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a1594:	7901      	ldrb	r1, [r0, #4]
 80a1596:	6800      	ldr	r0, [r0, #0]
 80a1598:	f001 ff7c 	bl	80a3494 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a159c:	6820      	ldr	r0, [r4, #0]
 80a159e:	4629      	mov	r1, r5
 80a15a0:	6803      	ldr	r3, [r0, #0]
 80a15a2:	689b      	ldr	r3, [r3, #8]
 80a15a4:	4798      	blx	r3
        _wire -> endTransmission();
 80a15a6:	6820      	ldr	r0, [r4, #0]
 80a15a8:	f001 ff7c 	bl	80a34a4 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
 80a15ac:	2201      	movs	r2, #1
 80a15ae:	7921      	ldrb	r1, [r4, #4]
 80a15b0:	6820      	ldr	r0, [r4, #0]
 80a15b2:	f001 ff6c 	bl	80a348e <_ZN7TwoWire11requestFromEhh>
        value = _wire -> read();
 80a15b6:	6820      	ldr	r0, [r4, #0]
 80a15b8:	6803      	ldr	r3, [r0, #0]
 80a15ba:	695b      	ldr	r3, [r3, #20]
 80a15bc:	4798      	blx	r3
 80a15be:	b2c5      	uxtb	r5, r0
 80a15c0:	e030      	b.n	80a1624 <_ZN15Adafruit_BME2805read8Eh+0xa0>
    } else {
        if (_sck == -1)
 80a15c2:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a15c6:	3301      	adds	r3, #1
 80a15c8:	d10f      	bne.n	80a15ea <_ZN15Adafruit_BME2805read8Eh+0x66>
 80a15ca:	4b18      	ldr	r3, [pc, #96]	; (80a162c <_ZN15Adafruit_BME2805read8Eh+0xa8>)
 80a15cc:	4a18      	ldr	r2, [pc, #96]	; (80a1630 <_ZN15Adafruit_BME2805read8Eh+0xac>)
 80a15ce:	9300      	str	r3, [sp, #0]
 80a15d0:	9202      	str	r2, [sp, #8]
 80a15d2:	2300      	movs	r3, #0
 80a15d4:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a15d6:	4669      	mov	r1, sp
 80a15d8:	4816      	ldr	r0, [pc, #88]	; (80a1634 <_ZN15Adafruit_BME2805read8Eh+0xb0>)
 80a15da:	f88d 3004 	strb.w	r3, [sp, #4]
 80a15de:	f88d 200c 	strb.w	r2, [sp, #12]
 80a15e2:	f88d 300d 	strb.w	r3, [sp, #13]
 80a15e6:	f000 ffa3 	bl	80a2530 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
 80a15ea:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a15ee:	2100      	movs	r1, #0
 80a15f0:	b280      	uxth	r0, r0
 80a15f2:	f002 f860 	bl	80a36b6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a15f6:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a15fa:	4620      	mov	r0, r4
 80a15fc:	f7ff fef2 	bl	80a13e4 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
 80a1600:	2100      	movs	r1, #0
 80a1602:	4620      	mov	r0, r4
 80a1604:	f7ff feee 	bl	80a13e4 <_ZN15Adafruit_BME2807spixferEh>
 80a1608:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
 80a160a:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a160e:	2101      	movs	r1, #1
 80a1610:	b280      	uxth	r0, r0
 80a1612:	f002 f850 	bl	80a36b6 <digitalWrite>
        if (_sck == -1)
 80a1616:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a161a:	3301      	adds	r3, #1
 80a161c:	d102      	bne.n	80a1624 <_ZN15Adafruit_BME2805read8Eh+0xa0>
            SPI.endTransaction(); // release the SPI bus
 80a161e:	4805      	ldr	r0, [pc, #20]	; (80a1634 <_ZN15Adafruit_BME2805read8Eh+0xb0>)
 80a1620:	f000 ff6d 	bl	80a24fe <_ZN8SPIClass14endTransactionEv>
    }
    return value;
}
 80a1624:	4628      	mov	r0, r5
 80a1626:	b005      	add	sp, #20
 80a1628:	bd30      	pop	{r4, r5, pc}
 80a162a:	bf00      	nop
 80a162c:	080a57e4 	.word	0x080a57e4
 80a1630:	0007a120 	.word	0x0007a120
 80a1634:	20000aa0 	.word	0x20000aa0

080a1638 <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
 80a1638:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
 80a163a:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
 80a163e:	b085      	sub	sp, #20
    uint16_t value;

    if (_cs == -1) {
 80a1640:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
 80a1642:	4604      	mov	r4, r0
 80a1644:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
 80a1646:	d11d      	bne.n	80a1684 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a1648:	7901      	ldrb	r1, [r0, #4]
 80a164a:	6800      	ldr	r0, [r0, #0]
 80a164c:	f001 ff22 	bl	80a3494 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a1650:	6820      	ldr	r0, [r4, #0]
 80a1652:	4629      	mov	r1, r5
 80a1654:	6803      	ldr	r3, [r0, #0]
 80a1656:	689b      	ldr	r3, [r3, #8]
 80a1658:	4798      	blx	r3
        _wire -> endTransmission();
 80a165a:	6820      	ldr	r0, [r4, #0]
 80a165c:	f001 ff22 	bl	80a34a4 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
 80a1660:	2202      	movs	r2, #2
 80a1662:	7921      	ldrb	r1, [r4, #4]
 80a1664:	6820      	ldr	r0, [r4, #0]
 80a1666:	f001 ff12 	bl	80a348e <_ZN7TwoWire11requestFromEhh>
        value = (_wire -> read() << 8) | _wire -> read();
 80a166a:	6820      	ldr	r0, [r4, #0]
 80a166c:	6803      	ldr	r3, [r0, #0]
 80a166e:	695b      	ldr	r3, [r3, #20]
 80a1670:	4798      	blx	r3
 80a1672:	4605      	mov	r5, r0
 80a1674:	6820      	ldr	r0, [r4, #0]
 80a1676:	6803      	ldr	r3, [r0, #0]
 80a1678:	695b      	ldr	r3, [r3, #20]
 80a167a:	4798      	blx	r3
 80a167c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80a1680:	b285      	uxth	r5, r0
 80a1682:	e037      	b.n	80a16f4 <_ZN15Adafruit_BME2806read16Eh+0xbc>
    } else {
        if (_sck == -1)
 80a1684:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a1688:	3301      	adds	r3, #1
 80a168a:	d10f      	bne.n	80a16ac <_ZN15Adafruit_BME2806read16Eh+0x74>
 80a168c:	4b1b      	ldr	r3, [pc, #108]	; (80a16fc <_ZN15Adafruit_BME2806read16Eh+0xc4>)
 80a168e:	4a1c      	ldr	r2, [pc, #112]	; (80a1700 <_ZN15Adafruit_BME2806read16Eh+0xc8>)
 80a1690:	9300      	str	r3, [sp, #0]
 80a1692:	9202      	str	r2, [sp, #8]
 80a1694:	2300      	movs	r3, #0
 80a1696:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a1698:	4669      	mov	r1, sp
 80a169a:	481a      	ldr	r0, [pc, #104]	; (80a1704 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
 80a169c:	f88d 3004 	strb.w	r3, [sp, #4]
 80a16a0:	f88d 200c 	strb.w	r2, [sp, #12]
 80a16a4:	f88d 300d 	strb.w	r3, [sp, #13]
 80a16a8:	f000 ff42 	bl	80a2530 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
 80a16ac:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a16b0:	2100      	movs	r1, #0
 80a16b2:	b280      	uxth	r0, r0
 80a16b4:	f001 ffff 	bl	80a36b6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a16b8:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a16bc:	4620      	mov	r0, r4
 80a16be:	f7ff fe91 	bl	80a13e4 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
 80a16c2:	2100      	movs	r1, #0
 80a16c4:	4620      	mov	r0, r4
 80a16c6:	f7ff fe8d 	bl	80a13e4 <_ZN15Adafruit_BME2807spixferEh>
 80a16ca:	2100      	movs	r1, #0
 80a16cc:	4605      	mov	r5, r0
 80a16ce:	4620      	mov	r0, r4
 80a16d0:	f7ff fe88 	bl	80a13e4 <_ZN15Adafruit_BME2807spixferEh>
 80a16d4:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80a16d8:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
 80a16da:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a16de:	2101      	movs	r1, #1
 80a16e0:	b280      	uxth	r0, r0
 80a16e2:	f001 ffe8 	bl	80a36b6 <digitalWrite>
        if (_sck == -1)
 80a16e6:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a16ea:	3301      	adds	r3, #1
 80a16ec:	d102      	bne.n	80a16f4 <_ZN15Adafruit_BME2806read16Eh+0xbc>
            SPI.endTransaction(); // release the SPI bus
 80a16ee:	4805      	ldr	r0, [pc, #20]	; (80a1704 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
 80a16f0:	f000 ff05 	bl	80a24fe <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
 80a16f4:	4628      	mov	r0, r5
 80a16f6:	b005      	add	sp, #20
 80a16f8:	bd30      	pop	{r4, r5, pc}
 80a16fa:	bf00      	nop
 80a16fc:	080a57e4 	.word	0x080a57e4
 80a1700:	0007a120 	.word	0x0007a120
 80a1704:	20000aa0 	.word	0x20000aa0

080a1708 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
 80a1708:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
 80a170a:	f7ff ff95 	bl	80a1638 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
 80a170e:	ba40      	rev16	r0, r0
}
 80a1710:	b280      	uxth	r0, r0
 80a1712:	bd08      	pop	{r3, pc}

080a1714 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
 80a1714:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
 80a1716:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
 80a171a:	b085      	sub	sp, #20
    uint32_t value;

    if (_cs == -1) {
 80a171c:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
 80a171e:	4604      	mov	r4, r0
 80a1720:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
 80a1722:	d121      	bne.n	80a1768 <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a1724:	7901      	ldrb	r1, [r0, #4]
 80a1726:	6800      	ldr	r0, [r0, #0]
 80a1728:	f001 feb4 	bl	80a3494 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a172c:	6820      	ldr	r0, [r4, #0]
 80a172e:	4629      	mov	r1, r5
 80a1730:	6803      	ldr	r3, [r0, #0]
 80a1732:	689b      	ldr	r3, [r3, #8]
 80a1734:	4798      	blx	r3
        _wire -> endTransmission();
 80a1736:	6820      	ldr	r0, [r4, #0]
 80a1738:	f001 feb4 	bl	80a34a4 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
 80a173c:	2203      	movs	r2, #3
 80a173e:	7921      	ldrb	r1, [r4, #4]
 80a1740:	6820      	ldr	r0, [r4, #0]
 80a1742:	f001 fea4 	bl	80a348e <_ZN7TwoWire11requestFromEhh>

        value = _wire -> read();
 80a1746:	6820      	ldr	r0, [r4, #0]
 80a1748:	6803      	ldr	r3, [r0, #0]
 80a174a:	695b      	ldr	r3, [r3, #20]
 80a174c:	4798      	blx	r3
        value <<= 8;
 80a174e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
 80a1750:	6820      	ldr	r0, [r4, #0]
 80a1752:	6803      	ldr	r3, [r0, #0]
 80a1754:	695b      	ldr	r3, [r3, #20]
 80a1756:	4798      	blx	r3
 80a1758:	4328      	orrs	r0, r5
        value <<= 8;
 80a175a:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
 80a175c:	6820      	ldr	r0, [r4, #0]
 80a175e:	6803      	ldr	r3, [r0, #0]
 80a1760:	695b      	ldr	r3, [r3, #20]
 80a1762:	4798      	blx	r3
 80a1764:	4305      	orrs	r5, r0
 80a1766:	e03b      	b.n	80a17e0 <_ZN15Adafruit_BME2806read24Eh+0xcc>
    } else {
        if (_sck == -1)
 80a1768:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a176c:	3301      	adds	r3, #1
 80a176e:	d10f      	bne.n	80a1790 <_ZN15Adafruit_BME2806read24Eh+0x7c>
 80a1770:	4b1d      	ldr	r3, [pc, #116]	; (80a17e8 <_ZN15Adafruit_BME2806read24Eh+0xd4>)
 80a1772:	4a1e      	ldr	r2, [pc, #120]	; (80a17ec <_ZN15Adafruit_BME2806read24Eh+0xd8>)
 80a1774:	9300      	str	r3, [sp, #0]
 80a1776:	9202      	str	r2, [sp, #8]
 80a1778:	2300      	movs	r3, #0
 80a177a:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a177c:	4669      	mov	r1, sp
 80a177e:	481c      	ldr	r0, [pc, #112]	; (80a17f0 <_ZN15Adafruit_BME2806read24Eh+0xdc>)
 80a1780:	f88d 3004 	strb.w	r3, [sp, #4]
 80a1784:	f88d 200c 	strb.w	r2, [sp, #12]
 80a1788:	f88d 300d 	strb.w	r3, [sp, #13]
 80a178c:	f000 fed0 	bl	80a2530 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
 80a1790:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1794:	2100      	movs	r1, #0
 80a1796:	b280      	uxth	r0, r0
 80a1798:	f001 ff8d 	bl	80a36b6 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a179c:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a17a0:	4620      	mov	r0, r4
 80a17a2:	f7ff fe1f 	bl	80a13e4 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
 80a17a6:	2100      	movs	r1, #0
 80a17a8:	4620      	mov	r0, r4
 80a17aa:	f7ff fe1b 	bl	80a13e4 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
 80a17ae:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
 80a17b0:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
 80a17b2:	4620      	mov	r0, r4
 80a17b4:	f7ff fe16 	bl	80a13e4 <_ZN15Adafruit_BME2807spixferEh>
 80a17b8:	4328      	orrs	r0, r5
        value <<= 8;
 80a17ba:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
 80a17bc:	2100      	movs	r1, #0
 80a17be:	4620      	mov	r0, r4
 80a17c0:	f7ff fe10 	bl	80a13e4 <_ZN15Adafruit_BME2807spixferEh>
 80a17c4:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
 80a17c6:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a17ca:	2101      	movs	r1, #1
 80a17cc:	b280      	uxth	r0, r0
 80a17ce:	f001 ff72 	bl	80a36b6 <digitalWrite>
        if (_sck == -1)
 80a17d2:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a17d6:	3301      	adds	r3, #1
 80a17d8:	d102      	bne.n	80a17e0 <_ZN15Adafruit_BME2806read24Eh+0xcc>
            SPI.endTransaction(); // release the SPI bus
 80a17da:	4805      	ldr	r0, [pc, #20]	; (80a17f0 <_ZN15Adafruit_BME2806read24Eh+0xdc>)
 80a17dc:	f000 fe8f 	bl	80a24fe <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
 80a17e0:	4628      	mov	r0, r5
 80a17e2:	b005      	add	sp, #20
 80a17e4:	bd30      	pop	{r4, r5, pc}
 80a17e6:	bf00      	nop
 80a17e8:	080a57e4 	.word	0x080a57e4
 80a17ec:	0007a120 	.word	0x0007a120
 80a17f0:	20000aa0 	.word	0x20000aa0

080a17f4 <_ZN15Adafruit_BME28021takeForcedMeasurementEv>:
/*!
    @brief  Take a new measurement (only possible in forced mode)
*/
/**************************************************************************/
void Adafruit_BME280::takeForcedMeasurement()
{   
 80a17f4:	b510      	push	{r4, lr}
    // If we are in forced mode, the BME sensor goes back to sleep after each
    // measurement and we need to set it to forced mode once at this point, so
    // it will take the next measurement and then return to sleep again.
    // In normal mode simply does new measurements periodically.
    if (_measReg.mode == MODE_FORCED) {
 80a17f6:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
/*!
    @brief  Take a new measurement (only possible in forced mode)
*/
/**************************************************************************/
void Adafruit_BME280::takeForcedMeasurement()
{   
 80a17fa:	4604      	mov	r4, r0
    // If we are in forced mode, the BME sensor goes back to sleep after each
    // measurement and we need to set it to forced mode once at this point, so
    // it will take the next measurement and then return to sleep again.
    // In normal mode simply does new measurements periodically.
    if (_measReg.mode == MODE_FORCED) {
 80a17fc:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
 80a1800:	2b40      	cmp	r3, #64	; 0x40
 80a1802:	d115      	bne.n	80a1830 <_ZN15Adafruit_BME28021takeForcedMeasurementEv+0x3c>
        // set to forced mode, i.e. "take next measurement"
        write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a1804:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a1808:	f002 0107 	and.w	r1, r2, #7
 80a180c:	009b      	lsls	r3, r3, #2
 80a180e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a1812:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 80a1816:	21f4      	movs	r1, #244	; 0xf4
 80a1818:	f7ff fe1c 	bl	80a1454 <_ZN15Adafruit_BME2806write8Ehh>
        // wait until measurement has been completed, otherwise we would read
        // the values from the last measurement
        while (read8(BME280_REGISTER_STATUS) & 0x08)
 80a181c:	21f3      	movs	r1, #243	; 0xf3
 80a181e:	4620      	mov	r0, r4
 80a1820:	f7ff feb0 	bl	80a1584 <_ZN15Adafruit_BME2805read8Eh>
 80a1824:	0703      	lsls	r3, r0, #28
 80a1826:	d503      	bpl.n	80a1830 <_ZN15Adafruit_BME28021takeForcedMeasurementEv+0x3c>
		delay(1);
 80a1828:	2001      	movs	r0, #1
 80a182a:	f001 fb53 	bl	80a2ed4 <delay>
    if (_measReg.mode == MODE_FORCED) {
        // set to forced mode, i.e. "take next measurement"
        write8(BME280_REGISTER_CONTROL, _measReg.get());
        // wait until measurement has been completed, otherwise we would read
        // the values from the last measurement
        while (read8(BME280_REGISTER_STATUS) & 0x08)
 80a182e:	e7f5      	b.n	80a181c <_ZN15Adafruit_BME28021takeForcedMeasurementEv+0x28>
 80a1830:	bd10      	pop	{r4, pc}

080a1832 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
 80a1832:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a1834:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
 80a1836:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a1838:	f7ff ff66 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a183c:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a183e:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1840:	4620      	mov	r0, r4
 80a1842:	f7ff ff61 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1846:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 80a1848:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a184a:	4620      	mov	r0, r4
 80a184c:	f7ff ff5c 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a1850:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 80a1852:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a1854:	4620      	mov	r0, r4
 80a1856:	f7ff ff57 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a185a:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a185c:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a185e:	4620      	mov	r0, r4
 80a1860:	f7ff ff52 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1864:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 80a1866:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1868:	4620      	mov	r0, r4
 80a186a:	f7ff ff4d 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
 80a186e:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 80a1870:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1872:	4620      	mov	r0, r4
 80a1874:	f7ff ff48 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1878:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 80a187a:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a187c:	4620      	mov	r0, r4
 80a187e:	f7ff ff43 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1882:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 80a1884:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1886:	4620      	mov	r0, r4
 80a1888:	f7ff ff3e 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
 80a188c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 80a188e:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1890:	4620      	mov	r0, r4
 80a1892:	f7ff ff39 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
 80a1896:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 80a1898:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a189a:	4620      	mov	r0, r4
 80a189c:	f7ff ff34 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
 80a18a0:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 80a18a2:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a18a4:	4620      	mov	r0, r4
 80a18a6:	f7ff ff2f 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a18aa:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 80a18ac:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a18ae:	4620      	mov	r0, r4
 80a18b0:	f7ff fe68 	bl	80a1584 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a18b4:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a18b6:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a18ba:	4620      	mov	r0, r4
 80a18bc:	f7ff ff24 	bl	80a1708 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a18c0:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 80a18c2:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a18c4:	4620      	mov	r0, r4
 80a18c6:	f7ff fe5d 	bl	80a1584 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a18ca:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a18cc:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a18d0:	4620      	mov	r0, r4
 80a18d2:	f7ff fe57 	bl	80a1584 <_ZN15Adafruit_BME2805read8Eh>
 80a18d6:	21e5      	movs	r1, #229	; 0xe5
 80a18d8:	4605      	mov	r5, r0
 80a18da:	4620      	mov	r0, r4
 80a18dc:	f7ff fe52 	bl	80a1584 <_ZN15Adafruit_BME2805read8Eh>
 80a18e0:	f000 000f 	and.w	r0, r0, #15
 80a18e4:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 80a18e8:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 80a18ea:	21e6      	movs	r1, #230	; 0xe6
 80a18ec:	4620      	mov	r0, r4
 80a18ee:	f7ff fe49 	bl	80a1584 <_ZN15Adafruit_BME2805read8Eh>
 80a18f2:	21e5      	movs	r1, #229	; 0xe5
 80a18f4:	4605      	mov	r5, r0
 80a18f6:	4620      	mov	r0, r4
 80a18f8:	f7ff fe44 	bl	80a1584 <_ZN15Adafruit_BME2805read8Eh>
 80a18fc:	1100      	asrs	r0, r0, #4
 80a18fe:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 80a1902:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 80a1904:	21e7      	movs	r1, #231	; 0xe7
 80a1906:	4620      	mov	r0, r4
 80a1908:	f7ff fe3c 	bl	80a1584 <_ZN15Adafruit_BME2805read8Eh>
 80a190c:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
 80a1910:	bd38      	pop	{r3, r4, r5, pc}

080a1912 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
 80a1912:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 80a1914:	21f3      	movs	r1, #243	; 0xf3
 80a1916:	f7ff fe35 	bl	80a1584 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
 80a191a:	f000 0001 	and.w	r0, r0, #1
 80a191e:	bd08      	pop	{r3, pc}

080a1920 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
 80a1920:	b530      	push	{r4, r5, lr}
 80a1922:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
 80a1924:	f990 0010 	ldrsb.w	r0, [r0, #16]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
 80a1928:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
 80a192a:	1c42      	adds	r2, r0, #1
 80a192c:	d103      	bne.n	80a1936 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
 80a192e:	6820      	ldr	r0, [r4, #0]
 80a1930:	f001 fd9e 	bl	80a3470 <_ZN7TwoWire5beginEv>
 80a1934:	e021      	b.n	80a197a <_ZN15Adafruit_BME2804initEv+0x5a>
    } else {
        digitalWrite(_cs, HIGH);
 80a1936:	2101      	movs	r1, #1
 80a1938:	b280      	uxth	r0, r0
 80a193a:	f001 febc 	bl	80a36b6 <digitalWrite>
        pinMode(_cs, OUTPUT);
 80a193e:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1942:	2101      	movs	r1, #1
 80a1944:	b280      	uxth	r0, r0
 80a1946:	f001 fea5 	bl	80a3694 <pinMode>
        if (_sck == -1) {
 80a194a:	f994 0013 	ldrsb.w	r0, [r4, #19]
 80a194e:	1c43      	adds	r3, r0, #1
 80a1950:	d103      	bne.n	80a195a <_ZN15Adafruit_BME2804initEv+0x3a>
            // hardware SPI
            SPI.begin();
 80a1952:	481f      	ldr	r0, [pc, #124]	; (80a19d0 <_ZN15Adafruit_BME2804initEv+0xb0>)
 80a1954:	f000 fdce 	bl	80a24f4 <_ZN8SPIClass5beginEv>
 80a1958:	e00f      	b.n	80a197a <_ZN15Adafruit_BME2804initEv+0x5a>
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
 80a195a:	2101      	movs	r1, #1
 80a195c:	b280      	uxth	r0, r0
 80a195e:	f001 fe99 	bl	80a3694 <pinMode>
            pinMode(_mosi, OUTPUT);
 80a1962:	f994 0011 	ldrsb.w	r0, [r4, #17]
 80a1966:	2101      	movs	r1, #1
 80a1968:	b280      	uxth	r0, r0
 80a196a:	f001 fe93 	bl	80a3694 <pinMode>
            pinMode(_miso, INPUT);
 80a196e:	f994 0012 	ldrsb.w	r0, [r4, #18]
 80a1972:	2100      	movs	r1, #0
 80a1974:	b280      	uxth	r0, r0
 80a1976:	f001 fe8d 	bl	80a3694 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
 80a197a:	21d0      	movs	r1, #208	; 0xd0
 80a197c:	4620      	mov	r0, r4
 80a197e:	f7ff fe01 	bl	80a1584 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
 80a1982:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
 80a1984:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
 80a1986:	d120      	bne.n	80a19ca <_ZN15Adafruit_BME2804initEv+0xaa>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
 80a1988:	4620      	mov	r0, r4
 80a198a:	22b6      	movs	r2, #182	; 0xb6
 80a198c:	21e0      	movs	r1, #224	; 0xe0
 80a198e:	f7ff fd61 	bl	80a1454 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
 80a1992:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a1996:	f001 fa9d 	bl	80a2ed4 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
 80a199a:	4620      	mov	r0, r4
 80a199c:	f7ff ffb9 	bl	80a1912 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
 80a19a0:	4605      	mov	r5, r0
 80a19a2:	b108      	cbz	r0, 80a19a8 <_ZN15Adafruit_BME2804initEv+0x88>
          delay(100);
 80a19a4:	2064      	movs	r0, #100	; 0x64
 80a19a6:	e7f6      	b.n	80a1996 <_ZN15Adafruit_BME2804initEv+0x76>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
 80a19a8:	4620      	mov	r0, r4
 80a19aa:	f7ff ff42 	bl	80a1832 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
 80a19ae:	2305      	movs	r3, #5
 80a19b0:	9300      	str	r3, [sp, #0]
 80a19b2:	461a      	mov	r2, r3
 80a19b4:	2103      	movs	r1, #3
 80a19b6:	4620      	mov	r0, r4
 80a19b8:	9502      	str	r5, [sp, #8]
 80a19ba:	9501      	str	r5, [sp, #4]
 80a19bc:	f7ff fd9c 	bl	80a14f8 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
 80a19c0:	2064      	movs	r0, #100	; 0x64
 80a19c2:	f001 fa87 	bl	80a2ed4 <delay>

    return true;
 80a19c6:	2001      	movs	r0, #1
 80a19c8:	e000      	b.n	80a19cc <_ZN15Adafruit_BME2804initEv+0xac>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
 80a19ca:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
 80a19cc:	b005      	add	sp, #20
 80a19ce:	bd30      	pop	{r4, r5, pc}
 80a19d0:	20000aa0 	.word	0x20000aa0

080a19d4 <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
 80a19d4:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
 80a19d6:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
 80a19d8:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
 80a19da:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
 80a19dc:	f001 fed2 	bl	80a3784 <_Z19__fetch_global_Wirev>
 80a19e0:	6020      	str	r0, [r4, #0]
	status = init();
 80a19e2:	4620      	mov	r0, r4
 80a19e4:	f7ff ff9c 	bl	80a1920 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
 80a19e8:	b930      	cbnz	r0, 80a19f8 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 80a19ea:	2376      	movs	r3, #118	; 0x76
 80a19ec:	7123      	strb	r3, [r4, #4]
 		status = init();
 80a19ee:	4620      	mov	r0, r4
 		}
	return status;
}
 80a19f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
 80a19f4:	f7ff bf94 	b.w	80a1920 <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
 80a19f8:	bd10      	pop	{r4, pc}
	...

080a19fc <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
 80a19fc:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 80a19fe:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
 80a1a00:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 80a1a02:	f7ff fe87 	bl	80a1714 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
 80a1a06:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a1a0a:	d01b      	beq.n	80a1a44 <_ZN15Adafruit_BME28015readTemperatureEv+0x48>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 80a1a0c:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
 80a1a0e:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
 80a1a12:	435b      	muls	r3, r3
 80a1a14:	0052      	lsls	r2, r2, #1
 80a1a16:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
 80a1a1a:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80a1a1e:	131b      	asrs	r3, r3, #12
 80a1a20:	4350      	muls	r0, r2
 80a1a22:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80a1a26:	4353      	muls	r3, r2
 80a1a28:	139b      	asrs	r3, r3, #14
 80a1a2a:	eb03 20e0 	add.w	r0, r3, r0, asr #11
 80a1a2e:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
 80a1a30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80a1a34:	3080      	adds	r0, #128	; 0x80
 80a1a36:	1200      	asrs	r0, r0, #8
 80a1a38:	f002 fb0e 	bl	80a4058 <__aeabi_i2f>
 80a1a3c:	4902      	ldr	r1, [pc, #8]	; (80a1a48 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>)
 80a1a3e:	f002 fc13 	bl	80a4268 <__aeabi_fdiv>
 80a1a42:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
 80a1a44:	4801      	ldr	r0, [pc, #4]	; (80a1a4c <_ZN15Adafruit_BME28015readTemperatureEv+0x50>)

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
 80a1a46:	bd10      	pop	{r4, pc}
 80a1a48:	42c80000 	.word	0x42c80000
 80a1a4c:	7fc00000 	.word	0x7fc00000

080a1a50 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
 80a1a50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1a54:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
 80a1a56:	f7ff ffd1 	bl	80a19fc <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 80a1a5a:	21f7      	movs	r1, #247	; 0xf7
 80a1a5c:	4630      	mov	r0, r6
 80a1a5e:	f7ff fe59 	bl	80a1714 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
 80a1a62:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 80a1a66:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
 80a1a68:	f000 80bf 	beq.w	80a1bea <_ZN15Adafruit_BME28012readPressureEv+0x19a>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
 80a1a6c:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a1a6e:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
 80a1a72:	17e5      	asrs	r5, r4, #31
 80a1a74:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
 80a1a78:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a1a7c:	fba4 8904 	umull	r8, r9, r4, r4
 80a1a80:	fb04 f305 	mul.w	r3, r4, r5
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a1a84:	fb02 f105 	mul.w	r1, r2, r5
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a1a88:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a1a8c:	17d3      	asrs	r3, r2, #31
 80a1a8e:	fb04 1103 	mla	r1, r4, r3, r1
 80a1a92:	fba2 2304 	umull	r2, r3, r2, r4
 80a1a96:	440b      	add	r3, r1
 80a1a98:	0319      	lsls	r1, r3, #12
 80a1a9a:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80a1a9e:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 80a1aa0:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
 80a1aa4:	fb02 fe09 	mul.w	lr, r2, r9
 80a1aa8:	17d3      	asrs	r3, r2, #31
 80a1aaa:	fb08 ee03 	mla	lr, r8, r3, lr
 80a1aae:	fba2 2308 	umull	r2, r3, r2, r8
 80a1ab2:	4473      	add	r3, lr
 80a1ab4:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 80a1ab8:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
 80a1abc:	eb1a 0a00 	adds.w	sl, sl, r0
 80a1ac0:	8b72      	ldrh	r2, [r6, #26]
 80a1ac2:	ea4f 2b23 	mov.w	fp, r3, asr #8
 80a1ac6:	eb4b 0b01 	adc.w	fp, fp, r1
 80a1aca:	f11a 0000 	adds.w	r0, sl, #0
 80a1ace:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
 80a1ad2:	fba0 ab02 	umull	sl, fp, r0, r2
 80a1ad6:	fb02 bb01 	mla	fp, r2, r1, fp
 80a1ada:	ea4f 026b 	mov.w	r2, fp, asr #1
 80a1ade:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
 80a1ae2:	ea52 0103 	orrs.w	r1, r2, r3
 80a1ae6:	f000 8083 	beq.w	80a1bf0 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
 80a1aea:	1138      	asrs	r0, r7, #4
 80a1aec:	f640 4735 	movw	r7, #3125	; 0xc35
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a1af0:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
 80a1af4:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a1af8:	fb0a f109 	mul.w	r1, sl, r9
 80a1afc:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80a1b00:	fb08 110b 	mla	r1, r8, fp, r1
 80a1b04:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a1b08:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a1b0c:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a1b0e:	fb0a f105 	mul.w	r1, sl, r5
 80a1b12:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80a1b16:	fb04 110b 	mla	r1, r4, fp, r1
 80a1b1a:	fbaa 4504 	umull	r4, r5, sl, r4
 80a1b1e:	440d      	add	r5, r1
 80a1b20:	ea4f 4b45 	mov.w	fp, r5, lsl #17
 80a1b24:	ea4f 4a44 	mov.w	sl, r4, lsl #17
 80a1b28:	eb1a 0a08 	adds.w	sl, sl, r8
 80a1b2c:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
 80a1b30:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
 80a1b34:	ea4f 79e0 	mov.w	r9, r0, asr #31
 80a1b38:	ea4f 75c9 	mov.w	r5, r9, lsl #31
 80a1b3c:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
 80a1b40:	07c4      	lsls	r4, r0, #31
 80a1b42:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
 80a1b46:	f04f 0800 	mov.w	r8, #0
 80a1b4a:	eb18 080a 	adds.w	r8, r8, sl
 80a1b4e:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 80a1b52:	eb49 090b 	adc.w	r9, r9, fp
 80a1b56:	ebb4 0408 	subs.w	r4, r4, r8
 80a1b5a:	fba4 0107 	umull	r0, r1, r4, r7
 80a1b5e:	eb65 0509 	sbc.w	r5, r5, r9
 80a1b62:	fb07 1105 	mla	r1, r7, r5, r1
 80a1b66:	f002 fc1b 	bl	80a43a0 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a1b6a:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80a1b6e:	134c      	asrs	r4, r1, #13
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a1b70:	fb02 f704 	mul.w	r7, r2, r4
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80a1b74:	0b45      	lsrs	r5, r0, #13
 80a1b76:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a1b7a:	17d3      	asrs	r3, r2, #31
 80a1b7c:	fb05 7703 	mla	r7, r5, r3, r7
 80a1b80:	fba2 2305 	umull	r2, r3, r2, r5
 80a1b84:	4354      	muls	r4, r2
 80a1b86:	443b      	add	r3, r7
 80a1b88:	fb05 4403 	mla	r4, r5, r3, r4
 80a1b8c:	fba2 2305 	umull	r2, r3, r2, r5
 80a1b90:	4423      	add	r3, r4
 80a1b92:	0e54      	lsrs	r4, r2, #25
 80a1b94:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
 80a1b98:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
 80a1b9c:	1824      	adds	r4, r4, r0
 80a1b9e:	ea4f 6563 	mov.w	r5, r3, asr #25
 80a1ba2:	414d      	adcs	r5, r1
 80a1ba4:	4351      	muls	r1, r2
 80a1ba6:	17d3      	asrs	r3, r2, #31
 80a1ba8:	fb00 1303 	mla	r3, r0, r3, r1
 80a1bac:	fba2 0100 	umull	r0, r1, r2, r0
 80a1bb0:	4419      	add	r1, r3
 80a1bb2:	0cc2      	lsrs	r2, r0, #19
 80a1bb4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80a1bb8:	1912      	adds	r2, r2, r4
    return (float)p/256;
 80a1bba:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a1bbe:	ea4f 43e1 	mov.w	r3, r1, asr #19
 80a1bc2:	416b      	adcs	r3, r5
 80a1bc4:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
 80a1bc6:	17e5      	asrs	r5, r4, #31
 80a1bc8:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a1bca:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80a1bce:	1219      	asrs	r1, r3, #8
    return (float)p/256;
 80a1bd0:	012b      	lsls	r3, r5, #4
 80a1bd2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80a1bd6:	1880      	adds	r0, r0, r2
 80a1bd8:	4159      	adcs	r1, r3
 80a1bda:	f002 fa53 	bl	80a4084 <__aeabi_l2f>
 80a1bde:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a1be2:	f002 fa8d 	bl	80a4100 <__aeabi_fmul>
 80a1be6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
 80a1bea:	4803      	ldr	r0, [pc, #12]	; (80a1bf8 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>)
 80a1bec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
 80a1bf0:	2000      	movs	r0, #0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
 80a1bf2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1bf6:	bf00      	nop
 80a1bf8:	7fc00000 	.word	0x7fc00000

080a1bfc <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
 80a1bfc:	b510      	push	{r4, lr}
 80a1bfe:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
 80a1c00:	f7ff fefc 	bl	80a19fc <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 80a1c04:	21fd      	movs	r1, #253	; 0xfd
 80a1c06:	4620      	mov	r0, r4
 80a1c08:	f7ff fd16 	bl	80a1638 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
 80a1c0c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80a1c10:	d03a      	beq.n	80a1c88 <_ZN15Adafruit_BME28012readHumidityEv+0x8c>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a1c12:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
 80a1c16:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a1c18:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 80a1c1c:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
 80a1c1e:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a1c22:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
 80a1c26:	fb02 3311 	mls	r3, r2, r1, r3
 80a1c2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80a1c2e:	13d8      	asrs	r0, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
 80a1c30:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80a1c34:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
 80a1c38:	4353      	muls	r3, r2
 80a1c3a:	434a      	muls	r2, r1
 80a1c3c:	12db      	asrs	r3, r3, #11
 80a1c3e:	1292      	asrs	r2, r2, #10
 80a1c40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80a1c44:	4353      	muls	r3, r2
 80a1c46:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 80a1c4a:	129b      	asrs	r3, r3, #10
 80a1c4c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a1c50:	4353      	muls	r3, r2
 80a1c52:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80a1c56:	139b      	asrs	r3, r3, #14
 80a1c58:	4343      	muls	r3, r0

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80a1c5a:	13d8      	asrs	r0, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
 80a1c5c:	4340      	muls	r0, r0
 80a1c5e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80a1c62:	11c0      	asrs	r0, r0, #7
 80a1c64:	4350      	muls	r0, r2
 80a1c66:	eba3 1020 	sub.w	r0, r3, r0, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80a1c6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
 80a1c6e:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 80a1c72:	bfa8      	it	ge
 80a1c74:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
 80a1c78:	1300      	asrs	r0, r0, #12
 80a1c7a:	f002 f9ed 	bl	80a4058 <__aeabi_i2f>
 80a1c7e:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80a1c82:	f002 fa3d 	bl	80a4100 <__aeabi_fmul>
 80a1c86:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
 80a1c88:	4800      	ldr	r0, [pc, #0]	; (80a1c8c <_ZN15Adafruit_BME28012readHumidityEv+0x90>)

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
 80a1c8a:	bd10      	pop	{r4, pc}
 80a1c8c:	7fc00000 	.word	0x7fc00000

080a1c90 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
 80a1c90:	f000 b93e 	b.w	80a1f10 <HAL_Pin_Map>

080a1c94 <_Z14init_rainGuagev>:
int rain = 0;



void init_rainGuage()
{
 80a1c94:	b508      	push	{r3, lr}
  pinMode(Q0, INPUT);
 80a1c96:	4b15      	ldr	r3, [pc, #84]	; (80a1cec <_Z14init_rainGuagev+0x58>)
 80a1c98:	2100      	movs	r1, #0
 80a1c9a:	8818      	ldrh	r0, [r3, #0]
 80a1c9c:	f001 fcfa 	bl	80a3694 <pinMode>
  pinMode(Q1, INPUT);
 80a1ca0:	4b13      	ldr	r3, [pc, #76]	; (80a1cf0 <_Z14init_rainGuagev+0x5c>)
 80a1ca2:	2100      	movs	r1, #0
 80a1ca4:	8818      	ldrh	r0, [r3, #0]
 80a1ca6:	f001 fcf5 	bl	80a3694 <pinMode>
  pinMode(Q2, INPUT);
 80a1caa:	4b12      	ldr	r3, [pc, #72]	; (80a1cf4 <_Z14init_rainGuagev+0x60>)
 80a1cac:	2100      	movs	r1, #0
 80a1cae:	8818      	ldrh	r0, [r3, #0]
 80a1cb0:	f001 fcf0 	bl	80a3694 <pinMode>
  pinMode(Q3, INPUT);
 80a1cb4:	4b10      	ldr	r3, [pc, #64]	; (80a1cf8 <_Z14init_rainGuagev+0x64>)
 80a1cb6:	2100      	movs	r1, #0
 80a1cb8:	8818      	ldrh	r0, [r3, #0]
 80a1cba:	f001 fceb 	bl	80a3694 <pinMode>
  pinMode(Q4, INPUT);
 80a1cbe:	4b0f      	ldr	r3, [pc, #60]	; (80a1cfc <_Z14init_rainGuagev+0x68>)
 80a1cc0:	2100      	movs	r1, #0
 80a1cc2:	8818      	ldrh	r0, [r3, #0]
 80a1cc4:	f001 fce6 	bl	80a3694 <pinMode>
  pinMode(Q5, INPUT);
 80a1cc8:	4b0d      	ldr	r3, [pc, #52]	; (80a1d00 <_Z14init_rainGuagev+0x6c>)
 80a1cca:	2100      	movs	r1, #0
 80a1ccc:	8818      	ldrh	r0, [r3, #0]
 80a1cce:	f001 fce1 	bl	80a3694 <pinMode>
  pinMode(Q6, INPUT);
 80a1cd2:	4b0c      	ldr	r3, [pc, #48]	; (80a1d04 <_Z14init_rainGuagev+0x70>)
 80a1cd4:	2100      	movs	r1, #0
 80a1cd6:	8818      	ldrh	r0, [r3, #0]
 80a1cd8:	f001 fcdc 	bl	80a3694 <pinMode>
  pinMode(Q_reset, OUTPUT);
 80a1cdc:	4b0a      	ldr	r3, [pc, #40]	; (80a1d08 <_Z14init_rainGuagev+0x74>)
 80a1cde:	2101      	movs	r1, #1
 80a1ce0:	8818      	ldrh	r0, [r3, #0]
}
 80a1ce2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pinMode(Q2, INPUT);
  pinMode(Q3, INPUT);
  pinMode(Q4, INPUT);
  pinMode(Q5, INPUT);
  pinMode(Q6, INPUT);
  pinMode(Q_reset, OUTPUT);
 80a1ce6:	f001 bcd5 	b.w	80a3694 <pinMode>
 80a1cea:	bf00      	nop
 80a1cec:	20000440 	.word	0x20000440
 80a1cf0:	20000444 	.word	0x20000444
 80a1cf4:	20000448 	.word	0x20000448
 80a1cf8:	2000042c 	.word	0x2000042c
 80a1cfc:	20000430 	.word	0x20000430
 80a1d00:	20000434 	.word	0x20000434
 80a1d04:	20000438 	.word	0x20000438
 80a1d08:	2000043c 	.word	0x2000043c

080a1d0c <_Z18get_rainGuageCountv>:
}

int get_rainGuageCount()
{
 80a1d0c:	b570      	push	{r4, r5, r6, lr}
  rain = 0;
  rain += digitalRead(Q0)*1;
 80a1d0e:	4b24      	ldr	r3, [pc, #144]	; (80a1da0 <_Z18get_rainGuageCountv+0x94>)
  pinMode(Q_reset, OUTPUT);
}

int get_rainGuageCount()
{
  rain = 0;
 80a1d10:	4c24      	ldr	r4, [pc, #144]	; (80a1da4 <_Z18get_rainGuageCountv+0x98>)
 80a1d12:	2500      	movs	r5, #0
  rain += digitalRead(Q0)*1;
 80a1d14:	8818      	ldrh	r0, [r3, #0]
  pinMode(Q_reset, OUTPUT);
}

int get_rainGuageCount()
{
  rain = 0;
 80a1d16:	6025      	str	r5, [r4, #0]
  rain += digitalRead(Q0)*1;
 80a1d18:	f001 fce6 	bl	80a36e8 <digitalRead>
 80a1d1c:	6823      	ldr	r3, [r4, #0]
  rain += digitalRead(Q2)*4;
  rain += digitalRead(Q3)*8;
  rain += digitalRead(Q4)*16;
  rain += digitalRead(Q5)*32;
  rain += digitalRead(Q6)*64;
  digitalWrite(Q_reset, HIGH);
 80a1d1e:	4e22      	ldr	r6, [pc, #136]	; (80a1da8 <_Z18get_rainGuageCountv+0x9c>)
}

int get_rainGuageCount()
{
  rain = 0;
  rain += digitalRead(Q0)*1;
 80a1d20:	4418      	add	r0, r3
  rain += digitalRead(Q1)*2;
 80a1d22:	4b22      	ldr	r3, [pc, #136]	; (80a1dac <_Z18get_rainGuageCountv+0xa0>)
}

int get_rainGuageCount()
{
  rain = 0;
  rain += digitalRead(Q0)*1;
 80a1d24:	6020      	str	r0, [r4, #0]
  rain += digitalRead(Q1)*2;
 80a1d26:	8818      	ldrh	r0, [r3, #0]
 80a1d28:	f001 fcde 	bl	80a36e8 <digitalRead>
 80a1d2c:	6823      	ldr	r3, [r4, #0]
 80a1d2e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
  rain += digitalRead(Q2)*4;
 80a1d32:	4b1f      	ldr	r3, [pc, #124]	; (80a1db0 <_Z18get_rainGuageCountv+0xa4>)

int get_rainGuageCount()
{
  rain = 0;
  rain += digitalRead(Q0)*1;
  rain += digitalRead(Q1)*2;
 80a1d34:	6020      	str	r0, [r4, #0]
  rain += digitalRead(Q2)*4;
 80a1d36:	8818      	ldrh	r0, [r3, #0]
 80a1d38:	f001 fcd6 	bl	80a36e8 <digitalRead>
 80a1d3c:	6823      	ldr	r3, [r4, #0]
 80a1d3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  rain += digitalRead(Q3)*8;
 80a1d42:	4b1c      	ldr	r3, [pc, #112]	; (80a1db4 <_Z18get_rainGuageCountv+0xa8>)
int get_rainGuageCount()
{
  rain = 0;
  rain += digitalRead(Q0)*1;
  rain += digitalRead(Q1)*2;
  rain += digitalRead(Q2)*4;
 80a1d44:	6020      	str	r0, [r4, #0]
  rain += digitalRead(Q3)*8;
 80a1d46:	8818      	ldrh	r0, [r3, #0]
 80a1d48:	f001 fcce 	bl	80a36e8 <digitalRead>
 80a1d4c:	6823      	ldr	r3, [r4, #0]
 80a1d4e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
  rain += digitalRead(Q4)*16;
 80a1d52:	4b19      	ldr	r3, [pc, #100]	; (80a1db8 <_Z18get_rainGuageCountv+0xac>)
{
  rain = 0;
  rain += digitalRead(Q0)*1;
  rain += digitalRead(Q1)*2;
  rain += digitalRead(Q2)*4;
  rain += digitalRead(Q3)*8;
 80a1d54:	6020      	str	r0, [r4, #0]
  rain += digitalRead(Q4)*16;
 80a1d56:	8818      	ldrh	r0, [r3, #0]
 80a1d58:	f001 fcc6 	bl	80a36e8 <digitalRead>
 80a1d5c:	6823      	ldr	r3, [r4, #0]
 80a1d5e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
  rain += digitalRead(Q5)*32;
 80a1d62:	4b16      	ldr	r3, [pc, #88]	; (80a1dbc <_Z18get_rainGuageCountv+0xb0>)
  rain = 0;
  rain += digitalRead(Q0)*1;
  rain += digitalRead(Q1)*2;
  rain += digitalRead(Q2)*4;
  rain += digitalRead(Q3)*8;
  rain += digitalRead(Q4)*16;
 80a1d64:	6020      	str	r0, [r4, #0]
  rain += digitalRead(Q5)*32;
 80a1d66:	8818      	ldrh	r0, [r3, #0]
 80a1d68:	f001 fcbe 	bl	80a36e8 <digitalRead>
 80a1d6c:	6823      	ldr	r3, [r4, #0]
 80a1d6e:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  rain += digitalRead(Q6)*64;
 80a1d72:	4b13      	ldr	r3, [pc, #76]	; (80a1dc0 <_Z18get_rainGuageCountv+0xb4>)
  rain += digitalRead(Q0)*1;
  rain += digitalRead(Q1)*2;
  rain += digitalRead(Q2)*4;
  rain += digitalRead(Q3)*8;
  rain += digitalRead(Q4)*16;
  rain += digitalRead(Q5)*32;
 80a1d74:	6020      	str	r0, [r4, #0]
  rain += digitalRead(Q6)*64;
 80a1d76:	8818      	ldrh	r0, [r3, #0]
 80a1d78:	f001 fcb6 	bl	80a36e8 <digitalRead>
 80a1d7c:	6823      	ldr	r3, [r4, #0]
  digitalWrite(Q_reset, HIGH);
 80a1d7e:	2101      	movs	r1, #1
  rain += digitalRead(Q1)*2;
  rain += digitalRead(Q2)*4;
  rain += digitalRead(Q3)*8;
  rain += digitalRead(Q4)*16;
  rain += digitalRead(Q5)*32;
  rain += digitalRead(Q6)*64;
 80a1d80:	eb03 1080 	add.w	r0, r3, r0, lsl #6
 80a1d84:	6020      	str	r0, [r4, #0]
  digitalWrite(Q_reset, HIGH);
 80a1d86:	8830      	ldrh	r0, [r6, #0]
 80a1d88:	f001 fc95 	bl	80a36b6 <digitalWrite>
  delay(20);              // waits for 20mS
 80a1d8c:	2014      	movs	r0, #20
 80a1d8e:	f001 f8a1 	bl	80a2ed4 <delay>
  digitalWrite(Q_reset, LOW);
 80a1d92:	8830      	ldrh	r0, [r6, #0]
 80a1d94:	4629      	mov	r1, r5
 80a1d96:	f001 fc8e 	bl	80a36b6 <digitalWrite>
  return rain;
}
 80a1d9a:	6820      	ldr	r0, [r4, #0]
 80a1d9c:	bd70      	pop	{r4, r5, r6, pc}
 80a1d9e:	bf00      	nop
 80a1da0:	20000440 	.word	0x20000440
 80a1da4:	200005c8 	.word	0x200005c8
 80a1da8:	2000043c 	.word	0x2000043c
 80a1dac:	20000444 	.word	0x20000444
 80a1db0:	20000448 	.word	0x20000448
 80a1db4:	2000042c 	.word	0x2000042c
 80a1db8:	20000430 	.word	0x20000430
 80a1dbc:	20000434 	.word	0x20000434
 80a1dc0:	20000438 	.word	0x20000438

080a1dc4 <_GLOBAL__sub_I_Q0>:
 80a1dc4:	f000 b8a4 	b.w	80a1f10 <HAL_Pin_Map>

080a1dc8 <_ZN10CloudClass12syncTimeDoneEv.isra.5>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a1dc8:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a1dca:	2000      	movs	r0, #0
 80a1dcc:	f000 fb1e 	bl	80a240c <spark_sync_time_pending>
 80a1dd0:	b128      	cbz	r0, 80a1dde <_ZN10CloudClass12syncTimeDoneEv.isra.5+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1dd2:	f000 fb0b 	bl	80a23ec <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a1dd6:	f080 0001 	eor.w	r0, r0, #1
 80a1dda:	b2c0      	uxtb	r0, r0
 80a1ddc:	bd08      	pop	{r3, pc}
 80a1dde:	2001      	movs	r0, #1
    }
 80a1de0:	bd08      	pop	{r3, pc}
	...

080a1de4 <_Z9checktimev>:
time_t lastSyncTimestamp;
int currentTime;
int timeAtSleep;

void checktime()
{
 80a1de4:	b5f0      	push	{r4, r5, r6, r7, lr}
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
 80a1de6:	4c2d      	ldr	r4, [pc, #180]	; (80a1e9c <_Z9checktimev+0xb8>)
 80a1de8:	2100      	movs	r1, #0
 80a1dea:	b085      	sub	sp, #20
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
 80a1dec:	4620      	mov	r0, r4
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
 80a1dee:	6021      	str	r1, [r4, #0]
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
 80a1df0:	f000 fb14 	bl	80a241c <spark_sync_time_last>
 80a1df4:	4605      	mov	r5, r0
 80a1df6:	f000 f8f3 	bl	80a1fe0 <HAL_Timer_Get_Milli_Seconds>
// Control the time
unsigned long lastSync = Particle.timeSyncedLast(lastSyncTimestamp);
if (millis() - lastSync > ONE_DAY_MILLIS) 
 80a1dfa:	4b29      	ldr	r3, [pc, #164]	; (80a1ea0 <_Z9checktimev+0xbc>)
 80a1dfc:	1b40      	subs	r0, r0, r5
 80a1dfe:	4298      	cmp	r0, r3
 80a1e00:	d94a      	bls.n	80a1e98 <_Z9checktimev+0xb4>
 80a1e02:	f000 f8ed 	bl	80a1fe0 <HAL_Timer_Get_Milli_Seconds>
 80a1e06:	4606      	mov	r6, r0
{
    unsigned long cur = millis();
    Serial.printlnf("Time was last synchronized %lu milliseconds ago", millis() - lastSync);
 80a1e08:	f001 fa10 	bl	80a322c <_Z16_fetch_usbserialv>
 80a1e0c:	4607      	mov	r7, r0
 80a1e0e:	f000 f8e7 	bl	80a1fe0 <HAL_Timer_Get_Milli_Seconds>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 80a1e12:	4a24      	ldr	r2, [pc, #144]	; (80a1ea4 <_Z9checktimev+0xc0>)
 80a1e14:	1b43      	subs	r3, r0, r5
 80a1e16:	2101      	movs	r1, #1
 80a1e18:	4638      	mov	r0, r7
 80a1e1a:	f000 ff75 	bl	80a2d08 <_ZN5Print11printf_implEbPKcz>
    if (lastSyncTimestamp > 0)
 80a1e1e:	6823      	ldr	r3, [r4, #0]
 80a1e20:	2b00      	cmp	r3, #0
 80a1e22:	dd12      	ble.n	80a1e4a <_Z9checktimev+0x66>
    {
        Serial.print("Time received from Particle Device Cloud was: ");
 80a1e24:	f001 fa02 	bl	80a322c <_Z16_fetch_usbserialv>
 80a1e28:	491f      	ldr	r1, [pc, #124]	; (80a1ea8 <_Z9checktimev+0xc4>)
 80a1e2a:	f000 ff24 	bl	80a2c76 <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr(lastSyncTimestamp));
 80a1e2e:	f001 f9fd 	bl	80a322c <_Z16_fetch_usbserialv>
 80a1e32:	4605      	mov	r5, r0
 80a1e34:	6821      	ldr	r1, [r4, #0]
 80a1e36:	4668      	mov	r0, sp
 80a1e38:	f000 ffee 	bl	80a2e18 <_ZN9TimeClass7timeStrEl>
 80a1e3c:	9900      	ldr	r1, [sp, #0]
 80a1e3e:	4628      	mov	r0, r5
 80a1e40:	f000 ff2c 	bl	80a2c9c <_ZN5Print7printlnEPKc>
 80a1e44:	4668      	mov	r0, sp
 80a1e46:	f000 fe85 	bl	80a2b54 <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1e4a:	f000 facf 	bl	80a23ec <spark_cloud_flag_connected>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 80a1e4e:	b110      	cbz	r0, 80a1e56 <_Z9checktimev+0x72>
            return false;
        }
        return CLOUD_FN(spark_sync_time(NULL), false);
 80a1e50:	2000      	movs	r0, #0
 80a1e52:	f000 fad3 	bl	80a23fc <spark_sync_time>
    }
    // Request time synchronization from Particle Device Cloud
    Particle.syncTime();
    // Wait until Photon receives time from Particle Device Cloud (or connection to Particle Device Cloud is lost)
    waitUntil(Particle.syncTimeDone);
 80a1e56:	f7ff ffb7 	bl	80a1dc8 <_ZN10CloudClass12syncTimeDoneEv.isra.5>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a1e5a:	b910      	cbnz	r0, 80a1e62 <_Z9checktimev+0x7e>
            spark_process();
 80a1e5c:	f000 fabe 	bl	80a23dc <spark_process>
 80a1e60:	e7f9      	b.n	80a1e56 <_Z9checktimev+0x72>
 80a1e62:	f7ff ffb1 	bl	80a1dc8 <_ZN10CloudClass12syncTimeDoneEv.isra.5>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
 80a1e66:	ac04      	add	r4, sp, #16
 80a1e68:	2100      	movs	r1, #0
 80a1e6a:	f844 1d10 	str.w	r1, [r4, #-16]!
        return CLOUD_FN(spark_sync_time_last(&tm, nullptr), 0);
 80a1e6e:	4620      	mov	r0, r4
 80a1e70:	f000 fad4 	bl	80a241c <spark_sync_time_last>
    // Check if synchronized successfully
    if (Particle.timeSyncedLast() >= cur)
 80a1e74:	4286      	cmp	r6, r0
 80a1e76:	d80f      	bhi.n	80a1e98 <_Z9checktimev+0xb4>
        {
            // Print current time
            Serial.println(Time.timeStr());
 80a1e78:	f001 f9d8 	bl	80a322c <_Z16_fetch_usbserialv>
 80a1e7c:	4605      	mov	r5, r0
 80a1e7e:	f001 f80e 	bl	80a2e9e <_ZN9TimeClass3nowEv>
 80a1e82:	4601      	mov	r1, r0
 80a1e84:	4620      	mov	r0, r4
 80a1e86:	f000 ffc7 	bl	80a2e18 <_ZN9TimeClass7timeStrEl>
 80a1e8a:	9900      	ldr	r1, [sp, #0]
 80a1e8c:	4628      	mov	r0, r5
 80a1e8e:	f000 ff05 	bl	80a2c9c <_ZN5Print7printlnEPKc>
 80a1e92:	4620      	mov	r0, r4
 80a1e94:	f000 fe5e 	bl	80a2b54 <_ZN6StringD1Ev>
        }
    }
}
 80a1e98:	b005      	add	sp, #20
 80a1e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1e9c:	200005cc 	.word	0x200005cc
 80a1ea0:	05265c00 	.word	0x05265c00
 80a1ea4:	080a582d 	.word	0x080a582d
 80a1ea8:	080a585d 	.word	0x080a585d

080a1eac <_Z13goToDeepSleepii>:

void goToDeepSleep(int timer,int bTime)
{
 80a1eac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80a1eb0:	4604      	mov	r4, r0
 80a1eb2:	460d      	mov	r5, r1
    timeAtSleep = (Time.second()%timer);
 80a1eb4:	f000 fffa 	bl	80a2eac <_ZN9TimeClass6secondEv>
 80a1eb8:	fb90 f3f4 	sdiv	r3, r0, r4
 80a1ebc:	4a0d      	ldr	r2, [pc, #52]	; (80a1ef4 <_Z13goToDeepSleepii+0x48>)
 80a1ebe:	fb03 0014 	mls	r0, r3, r4, r0
 80a1ec2:	4616      	mov	r6, r2
    while(true)
    {
        currentTime = (Time.second()%timer);
 80a1ec4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 80a1efc <_Z13goToDeepSleepii+0x50>
 80a1ec8:	4f0b      	ldr	r7, [pc, #44]	; (80a1ef8 <_Z13goToDeepSleepii+0x4c>)
    }
}

void goToDeepSleep(int timer,int bTime)
{
    timeAtSleep = (Time.second()%timer);
 80a1eca:	6010      	str	r0, [r2, #0]
    while(true)
    {
        currentTime = (Time.second()%timer);
 80a1ecc:	f000 ffee 	bl	80a2eac <_ZN9TimeClass6secondEv>
 80a1ed0:	fb90 f2f4 	sdiv	r2, r0, r4
 80a1ed4:	fb02 0014 	mls	r0, r2, r4, r0
        if (currentTime != timeAtSleep)
 80a1ed8:	6833      	ldr	r3, [r6, #0]
void goToDeepSleep(int timer,int bTime)
{
    timeAtSleep = (Time.second()%timer);
    while(true)
    {
        currentTime = (Time.second()%timer);
 80a1eda:	f8c8 0000 	str.w	r0, [r8]
        if (currentTime != timeAtSleep)
 80a1ede:	4298      	cmp	r0, r3
 80a1ee0:	d0f4      	beq.n	80a1ecc <_Z13goToDeepSleepii+0x20>
        {
            int sleepTime = timer-currentTime-bTime;
            System.sleep(SLEEP_MODE_DEEP,sleepTime);
 80a1ee2:	1a22      	subs	r2, r4, r0
 80a1ee4:	683b      	ldr	r3, [r7, #0]
 80a1ee6:	1b52      	subs	r2, r2, r5
 80a1ee8:	2101      	movs	r1, #1
 80a1eea:	4668      	mov	r0, sp
 80a1eec:	f000 fb9a 	bl	80a2624 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
 80a1ef0:	e7ec      	b.n	80a1ecc <_Z13goToDeepSleepii+0x20>
 80a1ef2:	bf00      	nop
 80a1ef4:	200005d0 	.word	0x200005d0
 80a1ef8:	200005d4 	.word	0x200005d4
 80a1efc:	200005d8 	.word	0x200005d8

080a1f00 <_GLOBAL__sub_I_lastSyncTimestamp>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1f00:	4b02      	ldr	r3, [pc, #8]	; (80a1f0c <_GLOBAL__sub_I_lastSyncTimestamp+0xc>)
 80a1f02:	2200      	movs	r2, #0
 80a1f04:	601a      	str	r2, [r3, #0]
 80a1f06:	f000 b803 	b.w	80a1f10 <HAL_Pin_Map>
 80a1f0a:	bf00      	nop
 80a1f0c:	200005d4 	.word	0x200005d4

080a1f10 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1f10:	b508      	push	{r3, lr}
 80a1f12:	4b02      	ldr	r3, [pc, #8]	; (80a1f1c <HAL_Pin_Map+0xc>)
 80a1f14:	681b      	ldr	r3, [r3, #0]
 80a1f16:	681b      	ldr	r3, [r3, #0]
 80a1f18:	9301      	str	r3, [sp, #4]
 80a1f1a:	bd08      	pop	{r3, pc}
 80a1f1c:	080601b0 	.word	0x080601b0

080a1f20 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1f20:	b508      	push	{r3, lr}
 80a1f22:	4b02      	ldr	r3, [pc, #8]	; (80a1f2c <HAL_Pin_Mode+0xc>)
 80a1f24:	681b      	ldr	r3, [r3, #0]
 80a1f26:	689b      	ldr	r3, [r3, #8]
 80a1f28:	9301      	str	r3, [sp, #4]
 80a1f2a:	bd08      	pop	{r3, pc}
 80a1f2c:	080601b0 	.word	0x080601b0

080a1f30 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1f30:	b508      	push	{r3, lr}
 80a1f32:	4b02      	ldr	r3, [pc, #8]	; (80a1f3c <HAL_Get_Pin_Mode+0xc>)
 80a1f34:	681b      	ldr	r3, [r3, #0]
 80a1f36:	68db      	ldr	r3, [r3, #12]
 80a1f38:	9301      	str	r3, [sp, #4]
 80a1f3a:	bd08      	pop	{r3, pc}
 80a1f3c:	080601b0 	.word	0x080601b0

080a1f40 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1f40:	b508      	push	{r3, lr}
 80a1f42:	4b02      	ldr	r3, [pc, #8]	; (80a1f4c <HAL_GPIO_Write+0xc>)
 80a1f44:	681b      	ldr	r3, [r3, #0]
 80a1f46:	691b      	ldr	r3, [r3, #16]
 80a1f48:	9301      	str	r3, [sp, #4]
 80a1f4a:	bd08      	pop	{r3, pc}
 80a1f4c:	080601b0 	.word	0x080601b0

080a1f50 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1f50:	b508      	push	{r3, lr}
 80a1f52:	4b02      	ldr	r3, [pc, #8]	; (80a1f5c <HAL_GPIO_Read+0xc>)
 80a1f54:	681b      	ldr	r3, [r3, #0]
 80a1f56:	695b      	ldr	r3, [r3, #20]
 80a1f58:	9301      	str	r3, [sp, #4]
 80a1f5a:	bd08      	pop	{r3, pc}
 80a1f5c:	080601b0 	.word	0x080601b0

080a1f60 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a1f60:	b508      	push	{r3, lr}
 80a1f62:	4b02      	ldr	r3, [pc, #8]	; (80a1f6c <HAL_SPI_Begin+0xc>)
 80a1f64:	681b      	ldr	r3, [r3, #0]
 80a1f66:	681b      	ldr	r3, [r3, #0]
 80a1f68:	9301      	str	r3, [sp, #4]
 80a1f6a:	bd08      	pop	{r3, pc}
 80a1f6c:	080601b4 	.word	0x080601b4

080a1f70 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a1f70:	b508      	push	{r3, lr}
 80a1f72:	4b02      	ldr	r3, [pc, #8]	; (80a1f7c <HAL_SPI_Send_Receive_Data+0xc>)
 80a1f74:	681b      	ldr	r3, [r3, #0]
 80a1f76:	695b      	ldr	r3, [r3, #20]
 80a1f78:	9301      	str	r3, [sp, #4]
 80a1f7a:	bd08      	pop	{r3, pc}
 80a1f7c:	080601b4 	.word	0x080601b4

080a1f80 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1f80:	b508      	push	{r3, lr}
 80a1f82:	4b02      	ldr	r3, [pc, #8]	; (80a1f8c <HAL_SPI_Init+0xc>)
 80a1f84:	681b      	ldr	r3, [r3, #0]
 80a1f86:	69db      	ldr	r3, [r3, #28]
 80a1f88:	9301      	str	r3, [sp, #4]
 80a1f8a:	bd08      	pop	{r3, pc}
 80a1f8c:	080601b4 	.word	0x080601b4

080a1f90 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1f90:	b508      	push	{r3, lr}
 80a1f92:	4b02      	ldr	r3, [pc, #8]	; (80a1f9c <HAL_SPI_Is_Enabled+0xc>)
 80a1f94:	681b      	ldr	r3, [r3, #0]
 80a1f96:	6a1b      	ldr	r3, [r3, #32]
 80a1f98:	9301      	str	r3, [sp, #4]
 80a1f9a:	bd08      	pop	{r3, pc}
 80a1f9c:	080601b4 	.word	0x080601b4

080a1fa0 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a1fa0:	b508      	push	{r3, lr}
 80a1fa2:	4b02      	ldr	r3, [pc, #8]	; (80a1fac <HAL_SPI_Info+0xc>)
 80a1fa4:	681b      	ldr	r3, [r3, #0]
 80a1fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1fa8:	9301      	str	r3, [sp, #4]
 80a1faa:	bd08      	pop	{r3, pc}
 80a1fac:	080601b4 	.word	0x080601b4

080a1fb0 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a1fb0:	b508      	push	{r3, lr}
 80a1fb2:	4b02      	ldr	r3, [pc, #8]	; (80a1fbc <HAL_SPI_Set_Settings+0xc>)
 80a1fb4:	681b      	ldr	r3, [r3, #0]
 80a1fb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1fb8:	9301      	str	r3, [sp, #4]
 80a1fba:	bd08      	pop	{r3, pc}
 80a1fbc:	080601b4 	.word	0x080601b4

080a1fc0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1fc0:	b508      	push	{r3, lr}
 80a1fc2:	4b02      	ldr	r3, [pc, #8]	; (80a1fcc <HAL_RNG_GetRandomNumber+0xc>)
 80a1fc4:	681b      	ldr	r3, [r3, #0]
 80a1fc6:	685b      	ldr	r3, [r3, #4]
 80a1fc8:	9301      	str	r3, [sp, #4]
 80a1fca:	bd08      	pop	{r3, pc}
 80a1fcc:	0806019c 	.word	0x0806019c

080a1fd0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1fd0:	b508      	push	{r3, lr}
 80a1fd2:	4b02      	ldr	r3, [pc, #8]	; (80a1fdc <HAL_Delay_Microseconds+0xc>)
 80a1fd4:	681b      	ldr	r3, [r3, #0]
 80a1fd6:	68db      	ldr	r3, [r3, #12]
 80a1fd8:	9301      	str	r3, [sp, #4]
 80a1fda:	bd08      	pop	{r3, pc}
 80a1fdc:	0806019c 	.word	0x0806019c

080a1fe0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1fe0:	b508      	push	{r3, lr}
 80a1fe2:	4b02      	ldr	r3, [pc, #8]	; (80a1fec <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1fe4:	681b      	ldr	r3, [r3, #0]
 80a1fe6:	695b      	ldr	r3, [r3, #20]
 80a1fe8:	9301      	str	r3, [sp, #4]
 80a1fea:	bd08      	pop	{r3, pc}
 80a1fec:	0806019c 	.word	0x0806019c

080a1ff0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80a1ff0:	b508      	push	{r3, lr}
 80a1ff2:	4b02      	ldr	r3, [pc, #8]	; (80a1ffc <HAL_RTC_Get_UnixTime+0xc>)
 80a1ff4:	681b      	ldr	r3, [r3, #0]
 80a1ff6:	69db      	ldr	r3, [r3, #28]
 80a1ff8:	9301      	str	r3, [sp, #4]
 80a1ffa:	bd08      	pop	{r3, pc}
 80a1ffc:	0806019c 	.word	0x0806019c

080a2000 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80a2000:	b508      	push	{r3, lr}
 80a2002:	4b02      	ldr	r3, [pc, #8]	; (80a200c <HAL_RTC_Time_Is_Valid+0xc>)
 80a2004:	681b      	ldr	r3, [r3, #0]
 80a2006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2008:	9301      	str	r3, [sp, #4]
 80a200a:	bd08      	pop	{r3, pc}
 80a200c:	0806019c 	.word	0x0806019c

080a2010 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a2010:	b508      	push	{r3, lr}
 80a2012:	4b02      	ldr	r3, [pc, #8]	; (80a201c <HAL_Feature_Set+0xc>)
 80a2014:	681b      	ldr	r3, [r3, #0]
 80a2016:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2018:	9301      	str	r3, [sp, #4]
 80a201a:	bd08      	pop	{r3, pc}
 80a201c:	080601b8 	.word	0x080601b8

080a2020 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a2020:	b508      	push	{r3, lr}
 80a2022:	4b02      	ldr	r3, [pc, #8]	; (80a202c <os_mutex_create+0xc>)
 80a2024:	681b      	ldr	r3, [r3, #0]
 80a2026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2028:	9301      	str	r3, [sp, #4]
 80a202a:	bd08      	pop	{r3, pc}
 80a202c:	080601d0 	.word	0x080601d0

080a2030 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a2030:	b508      	push	{r3, lr}
 80a2032:	4b02      	ldr	r3, [pc, #8]	; (80a203c <os_mutex_lock+0xc>)
 80a2034:	681b      	ldr	r3, [r3, #0]
 80a2036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2038:	9301      	str	r3, [sp, #4]
 80a203a:	bd08      	pop	{r3, pc}
 80a203c:	080601d0 	.word	0x080601d0

080a2040 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a2040:	b508      	push	{r3, lr}
 80a2042:	4b02      	ldr	r3, [pc, #8]	; (80a204c <os_mutex_unlock+0xc>)
 80a2044:	681b      	ldr	r3, [r3, #0]
 80a2046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2048:	9301      	str	r3, [sp, #4]
 80a204a:	bd08      	pop	{r3, pc}
 80a204c:	080601d0 	.word	0x080601d0

080a2050 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2050:	b508      	push	{r3, lr}
 80a2052:	4b02      	ldr	r3, [pc, #8]	; (80a205c <HAL_USART_Init+0xc>)
 80a2054:	681b      	ldr	r3, [r3, #0]
 80a2056:	699b      	ldr	r3, [r3, #24]
 80a2058:	9301      	str	r3, [sp, #4]
 80a205a:	bd08      	pop	{r3, pc}
 80a205c:	080601c4 	.word	0x080601c4

080a2060 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2060:	b508      	push	{r3, lr}
 80a2062:	4b02      	ldr	r3, [pc, #8]	; (80a206c <HAL_USART_Write_Data+0xc>)
 80a2064:	681b      	ldr	r3, [r3, #0]
 80a2066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2068:	9301      	str	r3, [sp, #4]
 80a206a:	bd08      	pop	{r3, pc}
 80a206c:	080601c4 	.word	0x080601c4

080a2070 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2070:	b508      	push	{r3, lr}
 80a2072:	4b02      	ldr	r3, [pc, #8]	; (80a207c <HAL_USART_Available_Data+0xc>)
 80a2074:	681b      	ldr	r3, [r3, #0]
 80a2076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2078:	9301      	str	r3, [sp, #4]
 80a207a:	bd08      	pop	{r3, pc}
 80a207c:	080601c4 	.word	0x080601c4

080a2080 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2080:	b508      	push	{r3, lr}
 80a2082:	4b02      	ldr	r3, [pc, #8]	; (80a208c <HAL_USART_Read_Data+0xc>)
 80a2084:	681b      	ldr	r3, [r3, #0]
 80a2086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2088:	9301      	str	r3, [sp, #4]
 80a208a:	bd08      	pop	{r3, pc}
 80a208c:	080601c4 	.word	0x080601c4

080a2090 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2090:	b508      	push	{r3, lr}
 80a2092:	4b02      	ldr	r3, [pc, #8]	; (80a209c <HAL_USART_Peek_Data+0xc>)
 80a2094:	681b      	ldr	r3, [r3, #0]
 80a2096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2098:	9301      	str	r3, [sp, #4]
 80a209a:	bd08      	pop	{r3, pc}
 80a209c:	080601c4 	.word	0x080601c4

080a20a0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a20a0:	b508      	push	{r3, lr}
 80a20a2:	4b02      	ldr	r3, [pc, #8]	; (80a20ac <HAL_USART_Flush_Data+0xc>)
 80a20a4:	681b      	ldr	r3, [r3, #0]
 80a20a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a20a8:	9301      	str	r3, [sp, #4]
 80a20aa:	bd08      	pop	{r3, pc}
 80a20ac:	080601c4 	.word	0x080601c4

080a20b0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a20b0:	b508      	push	{r3, lr}
 80a20b2:	4b02      	ldr	r3, [pc, #8]	; (80a20bc <HAL_USART_Is_Enabled+0xc>)
 80a20b4:	681b      	ldr	r3, [r3, #0]
 80a20b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a20b8:	9301      	str	r3, [sp, #4]
 80a20ba:	bd08      	pop	{r3, pc}
 80a20bc:	080601c4 	.word	0x080601c4

080a20c0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a20c0:	b508      	push	{r3, lr}
 80a20c2:	4b02      	ldr	r3, [pc, #8]	; (80a20cc <HAL_USART_Available_Data_For_Write+0xc>)
 80a20c4:	681b      	ldr	r3, [r3, #0]
 80a20c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a20c8:	9301      	str	r3, [sp, #4]
 80a20ca:	bd08      	pop	{r3, pc}
 80a20cc:	080601c4 	.word	0x080601c4

080a20d0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a20d0:	b508      	push	{r3, lr}
 80a20d2:	4b02      	ldr	r3, [pc, #8]	; (80a20dc <HAL_I2C_Begin+0xc>)
 80a20d4:	681b      	ldr	r3, [r3, #0]
 80a20d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a20d8:	9301      	str	r3, [sp, #4]
 80a20da:	bd08      	pop	{r3, pc}
 80a20dc:	080601ac 	.word	0x080601ac

080a20e0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a20e0:	b508      	push	{r3, lr}
 80a20e2:	4b02      	ldr	r3, [pc, #8]	; (80a20ec <HAL_I2C_Request_Data+0xc>)
 80a20e4:	681b      	ldr	r3, [r3, #0]
 80a20e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a20e8:	9301      	str	r3, [sp, #4]
 80a20ea:	bd08      	pop	{r3, pc}
 80a20ec:	080601ac 	.word	0x080601ac

080a20f0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a20f0:	b508      	push	{r3, lr}
 80a20f2:	4b02      	ldr	r3, [pc, #8]	; (80a20fc <HAL_I2C_Begin_Transmission+0xc>)
 80a20f4:	681b      	ldr	r3, [r3, #0]
 80a20f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a20f8:	9301      	str	r3, [sp, #4]
 80a20fa:	bd08      	pop	{r3, pc}
 80a20fc:	080601ac 	.word	0x080601ac

080a2100 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a2100:	b508      	push	{r3, lr}
 80a2102:	4b02      	ldr	r3, [pc, #8]	; (80a210c <HAL_I2C_End_Transmission+0xc>)
 80a2104:	681b      	ldr	r3, [r3, #0]
 80a2106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2108:	9301      	str	r3, [sp, #4]
 80a210a:	bd08      	pop	{r3, pc}
 80a210c:	080601ac 	.word	0x080601ac

080a2110 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2110:	b508      	push	{r3, lr}
 80a2112:	4b02      	ldr	r3, [pc, #8]	; (80a211c <HAL_I2C_Write_Data+0xc>)
 80a2114:	681b      	ldr	r3, [r3, #0]
 80a2116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2118:	9301      	str	r3, [sp, #4]
 80a211a:	bd08      	pop	{r3, pc}
 80a211c:	080601ac 	.word	0x080601ac

080a2120 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2120:	b508      	push	{r3, lr}
 80a2122:	4b02      	ldr	r3, [pc, #8]	; (80a212c <HAL_I2C_Available_Data+0xc>)
 80a2124:	681b      	ldr	r3, [r3, #0]
 80a2126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2128:	9301      	str	r3, [sp, #4]
 80a212a:	bd08      	pop	{r3, pc}
 80a212c:	080601ac 	.word	0x080601ac

080a2130 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a2130:	b508      	push	{r3, lr}
 80a2132:	4b02      	ldr	r3, [pc, #8]	; (80a213c <HAL_I2C_Read_Data+0xc>)
 80a2134:	681b      	ldr	r3, [r3, #0]
 80a2136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2138:	9301      	str	r3, [sp, #4]
 80a213a:	bd08      	pop	{r3, pc}
 80a213c:	080601ac 	.word	0x080601ac

080a2140 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a2140:	b508      	push	{r3, lr}
 80a2142:	4b02      	ldr	r3, [pc, #8]	; (80a214c <HAL_I2C_Peek_Data+0xc>)
 80a2144:	681b      	ldr	r3, [r3, #0]
 80a2146:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2148:	9301      	str	r3, [sp, #4]
 80a214a:	bd08      	pop	{r3, pc}
 80a214c:	080601ac 	.word	0x080601ac

080a2150 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a2150:	b508      	push	{r3, lr}
 80a2152:	4b02      	ldr	r3, [pc, #8]	; (80a215c <HAL_I2C_Flush_Data+0xc>)
 80a2154:	681b      	ldr	r3, [r3, #0]
 80a2156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2158:	9301      	str	r3, [sp, #4]
 80a215a:	bd08      	pop	{r3, pc}
 80a215c:	080601ac 	.word	0x080601ac

080a2160 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a2160:	b508      	push	{r3, lr}
 80a2162:	4b02      	ldr	r3, [pc, #8]	; (80a216c <HAL_I2C_Is_Enabled+0xc>)
 80a2164:	681b      	ldr	r3, [r3, #0]
 80a2166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2168:	9301      	str	r3, [sp, #4]
 80a216a:	bd08      	pop	{r3, pc}
 80a216c:	080601ac 	.word	0x080601ac

080a2170 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a2170:	b508      	push	{r3, lr}
 80a2172:	4b03      	ldr	r3, [pc, #12]	; (80a2180 <HAL_I2C_Init+0x10>)
 80a2174:	681b      	ldr	r3, [r3, #0]
 80a2176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a217a:	9301      	str	r3, [sp, #4]
 80a217c:	bd08      	pop	{r3, pc}
 80a217e:	0000      	.short	0x0000
 80a2180:	080601ac 	.word	0x080601ac

080a2184 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a2184:	b508      	push	{r3, lr}
 80a2186:	4b02      	ldr	r3, [pc, #8]	; (80a2190 <socket_active_status+0xc>)
 80a2188:	681b      	ldr	r3, [r3, #0]
 80a218a:	681b      	ldr	r3, [r3, #0]
 80a218c:	9301      	str	r3, [sp, #4]
 80a218e:	bd08      	pop	{r3, pc}
 80a2190:	080601bc 	.word	0x080601bc

080a2194 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a2194:	b508      	push	{r3, lr}
 80a2196:	4b02      	ldr	r3, [pc, #8]	; (80a21a0 <socket_handle_valid+0xc>)
 80a2198:	681b      	ldr	r3, [r3, #0]
 80a219a:	685b      	ldr	r3, [r3, #4]
 80a219c:	9301      	str	r3, [sp, #4]
 80a219e:	bd08      	pop	{r3, pc}
 80a21a0:	080601bc 	.word	0x080601bc

080a21a4 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a21a4:	b508      	push	{r3, lr}
 80a21a6:	4b02      	ldr	r3, [pc, #8]	; (80a21b0 <socket_create+0xc>)
 80a21a8:	681b      	ldr	r3, [r3, #0]
 80a21aa:	689b      	ldr	r3, [r3, #8]
 80a21ac:	9301      	str	r3, [sp, #4]
 80a21ae:	bd08      	pop	{r3, pc}
 80a21b0:	080601bc 	.word	0x080601bc

080a21b4 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a21b4:	b508      	push	{r3, lr}
 80a21b6:	4b02      	ldr	r3, [pc, #8]	; (80a21c0 <socket_connect+0xc>)
 80a21b8:	681b      	ldr	r3, [r3, #0]
 80a21ba:	68db      	ldr	r3, [r3, #12]
 80a21bc:	9301      	str	r3, [sp, #4]
 80a21be:	bd08      	pop	{r3, pc}
 80a21c0:	080601bc 	.word	0x080601bc

080a21c4 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a21c4:	b508      	push	{r3, lr}
 80a21c6:	4b02      	ldr	r3, [pc, #8]	; (80a21d0 <socket_receive+0xc>)
 80a21c8:	681b      	ldr	r3, [r3, #0]
 80a21ca:	691b      	ldr	r3, [r3, #16]
 80a21cc:	9301      	str	r3, [sp, #4]
 80a21ce:	bd08      	pop	{r3, pc}
 80a21d0:	080601bc 	.word	0x080601bc

080a21d4 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a21d4:	b508      	push	{r3, lr}
 80a21d6:	4b02      	ldr	r3, [pc, #8]	; (80a21e0 <socket_close+0xc>)
 80a21d8:	681b      	ldr	r3, [r3, #0]
 80a21da:	6a1b      	ldr	r3, [r3, #32]
 80a21dc:	9301      	str	r3, [sp, #4]
 80a21de:	bd08      	pop	{r3, pc}
 80a21e0:	080601bc 	.word	0x080601bc

080a21e4 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a21e4:	b508      	push	{r3, lr}
 80a21e6:	4b02      	ldr	r3, [pc, #8]	; (80a21f0 <socket_handle_invalid+0xc>)
 80a21e8:	681b      	ldr	r3, [r3, #0]
 80a21ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a21ec:	9301      	str	r3, [sp, #4]
 80a21ee:	bd08      	pop	{r3, pc}
 80a21f0:	080601bc 	.word	0x080601bc

080a21f4 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a21f4:	b508      	push	{r3, lr}
 80a21f6:	4b02      	ldr	r3, [pc, #8]	; (80a2200 <socket_send_ex+0xc>)
 80a21f8:	681b      	ldr	r3, [r3, #0]
 80a21fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a21fc:	9301      	str	r3, [sp, #4]
 80a21fe:	bd08      	pop	{r3, pc}
 80a2200:	080601bc 	.word	0x080601bc

080a2204 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2204:	b508      	push	{r3, lr}
 80a2206:	4b02      	ldr	r3, [pc, #8]	; (80a2210 <HAL_USB_USART_Init+0xc>)
 80a2208:	681b      	ldr	r3, [r3, #0]
 80a220a:	681b      	ldr	r3, [r3, #0]
 80a220c:	9301      	str	r3, [sp, #4]
 80a220e:	bd08      	pop	{r3, pc}
 80a2210:	080601d8 	.word	0x080601d8

080a2214 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a2214:	b508      	push	{r3, lr}
 80a2216:	4b02      	ldr	r3, [pc, #8]	; (80a2220 <HAL_USB_USART_Begin+0xc>)
 80a2218:	681b      	ldr	r3, [r3, #0]
 80a221a:	685b      	ldr	r3, [r3, #4]
 80a221c:	9301      	str	r3, [sp, #4]
 80a221e:	bd08      	pop	{r3, pc}
 80a2220:	080601d8 	.word	0x080601d8

080a2224 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2224:	b508      	push	{r3, lr}
 80a2226:	4b02      	ldr	r3, [pc, #8]	; (80a2230 <HAL_USB_USART_Available_Data+0xc>)
 80a2228:	681b      	ldr	r3, [r3, #0]
 80a222a:	691b      	ldr	r3, [r3, #16]
 80a222c:	9301      	str	r3, [sp, #4]
 80a222e:	bd08      	pop	{r3, pc}
 80a2230:	080601d8 	.word	0x080601d8

080a2234 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2234:	b508      	push	{r3, lr}
 80a2236:	4b02      	ldr	r3, [pc, #8]	; (80a2240 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2238:	681b      	ldr	r3, [r3, #0]
 80a223a:	695b      	ldr	r3, [r3, #20]
 80a223c:	9301      	str	r3, [sp, #4]
 80a223e:	bd08      	pop	{r3, pc}
 80a2240:	080601d8 	.word	0x080601d8

080a2244 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2244:	b508      	push	{r3, lr}
 80a2246:	4b02      	ldr	r3, [pc, #8]	; (80a2250 <HAL_USB_USART_Receive_Data+0xc>)
 80a2248:	681b      	ldr	r3, [r3, #0]
 80a224a:	699b      	ldr	r3, [r3, #24]
 80a224c:	9301      	str	r3, [sp, #4]
 80a224e:	bd08      	pop	{r3, pc}
 80a2250:	080601d8 	.word	0x080601d8

080a2254 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2254:	b508      	push	{r3, lr}
 80a2256:	4b02      	ldr	r3, [pc, #8]	; (80a2260 <HAL_USB_USART_Send_Data+0xc>)
 80a2258:	681b      	ldr	r3, [r3, #0]
 80a225a:	69db      	ldr	r3, [r3, #28]
 80a225c:	9301      	str	r3, [sp, #4]
 80a225e:	bd08      	pop	{r3, pc}
 80a2260:	080601d8 	.word	0x080601d8

080a2264 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2264:	b508      	push	{r3, lr}
 80a2266:	4b02      	ldr	r3, [pc, #8]	; (80a2270 <HAL_USB_USART_Flush_Data+0xc>)
 80a2268:	681b      	ldr	r3, [r3, #0]
 80a226a:	6a1b      	ldr	r3, [r3, #32]
 80a226c:	9301      	str	r3, [sp, #4]
 80a226e:	bd08      	pop	{r3, pc}
 80a2270:	080601d8 	.word	0x080601d8

080a2274 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a2274:	b508      	push	{r3, lr}
 80a2276:	4b02      	ldr	r3, [pc, #8]	; (80a2280 <HAL_USB_USART_Is_Enabled+0xc>)
 80a2278:	681b      	ldr	r3, [r3, #0]
 80a227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a227c:	9301      	str	r3, [sp, #4]
 80a227e:	bd08      	pop	{r3, pc}
 80a2280:	080601d8 	.word	0x080601d8

080a2284 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a2284:	b508      	push	{r3, lr}
 80a2286:	4b02      	ldr	r3, [pc, #8]	; (80a2290 <HAL_NET_SetNetWatchDog+0xc>)
 80a2288:	681b      	ldr	r3, [r3, #0]
 80a228a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a228c:	9301      	str	r3, [sp, #4]
 80a228e:	bd08      	pop	{r3, pc}
 80a2290:	080601c0 	.word	0x080601c0

080a2294 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2294:	b508      	push	{r3, lr}
 80a2296:	4b02      	ldr	r3, [pc, #8]	; (80a22a0 <inet_gethostbyname+0xc>)
 80a2298:	681b      	ldr	r3, [r3, #0]
 80a229a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a229c:	9301      	str	r3, [sp, #4]
 80a229e:	bd08      	pop	{r3, pc}
 80a22a0:	080601c0 	.word	0x080601c0

080a22a4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a22a4:	b508      	push	{r3, lr}
 80a22a6:	4b02      	ldr	r3, [pc, #8]	; (80a22b0 <panic_+0xc>)
 80a22a8:	681b      	ldr	r3, [r3, #0]
 80a22aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a22ac:	9301      	str	r3, [sp, #4]
 80a22ae:	bd08      	pop	{r3, pc}
 80a22b0:	080201a8 	.word	0x080201a8

080a22b4 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a22b4:	b508      	push	{r3, lr}
 80a22b6:	4b02      	ldr	r3, [pc, #8]	; (80a22c0 <log_message+0xc>)
 80a22b8:	681b      	ldr	r3, [r3, #0]
 80a22ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a22bc:	9301      	str	r3, [sp, #4]
 80a22be:	bd08      	pop	{r3, pc}
 80a22c0:	080201a8 	.word	0x080201a8

080a22c4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80a22c4:	b508      	push	{r3, lr}
 80a22c6:	4b02      	ldr	r3, [pc, #8]	; (80a22d0 <system_mode+0xc>)
 80a22c8:	681b      	ldr	r3, [r3, #0]
 80a22ca:	681b      	ldr	r3, [r3, #0]
 80a22cc:	9301      	str	r3, [sp, #4]
 80a22ce:	bd08      	pop	{r3, pc}
 80a22d0:	080601a4 	.word	0x080601a4

080a22d4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a22d4:	b508      	push	{r3, lr}
 80a22d6:	4b02      	ldr	r3, [pc, #8]	; (80a22e0 <set_system_mode+0xc>)
 80a22d8:	681b      	ldr	r3, [r3, #0]
 80a22da:	685b      	ldr	r3, [r3, #4]
 80a22dc:	9301      	str	r3, [sp, #4]
 80a22de:	bd08      	pop	{r3, pc}
 80a22e0:	080601a4 	.word	0x080601a4

080a22e4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a22e4:	b508      	push	{r3, lr}
 80a22e6:	4b02      	ldr	r3, [pc, #8]	; (80a22f0 <system_delay_ms+0xc>)
 80a22e8:	681b      	ldr	r3, [r3, #0]
 80a22ea:	695b      	ldr	r3, [r3, #20]
 80a22ec:	9301      	str	r3, [sp, #4]
 80a22ee:	bd08      	pop	{r3, pc}
 80a22f0:	080601a4 	.word	0x080601a4

080a22f4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80a22f4:	b508      	push	{r3, lr}
 80a22f6:	4b02      	ldr	r3, [pc, #8]	; (80a2300 <system_sleep+0xc>)
 80a22f8:	681b      	ldr	r3, [r3, #0]
 80a22fa:	699b      	ldr	r3, [r3, #24]
 80a22fc:	9301      	str	r3, [sp, #4]
 80a22fe:	bd08      	pop	{r3, pc}
 80a2300:	080601a4 	.word	0x080601a4

080a2304 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80a2304:	b508      	push	{r3, lr}
 80a2306:	4b02      	ldr	r3, [pc, #8]	; (80a2310 <system_thread_get_state+0xc>)
 80a2308:	681b      	ldr	r3, [r3, #0]
 80a230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a230c:	9301      	str	r3, [sp, #4]
 80a230e:	bd08      	pop	{r3, pc}
 80a2310:	080601a4 	.word	0x080601a4

080a2314 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2314:	b508      	push	{r3, lr}
 80a2316:	4b03      	ldr	r3, [pc, #12]	; (80a2324 <system_ctrl_set_app_request_handler+0x10>)
 80a2318:	681b      	ldr	r3, [r3, #0]
 80a231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a231e:	9301      	str	r3, [sp, #4]
 80a2320:	bd08      	pop	{r3, pc}
 80a2322:	0000      	.short	0x0000
 80a2324:	080601a4 	.word	0x080601a4

080a2328 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2328:	b508      	push	{r3, lr}
 80a232a:	4b03      	ldr	r3, [pc, #12]	; (80a2338 <system_ctrl_set_result+0x10>)
 80a232c:	681b      	ldr	r3, [r3, #0]
 80a232e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2332:	9301      	str	r3, [sp, #4]
 80a2334:	bd08      	pop	{r3, pc}
 80a2336:	0000      	.short	0x0000
 80a2338:	080601a4 	.word	0x080601a4

080a233c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a233c:	b508      	push	{r3, lr}
 80a233e:	4b02      	ldr	r3, [pc, #8]	; (80a2348 <network_connect+0xc>)
 80a2340:	681b      	ldr	r3, [r3, #0]
 80a2342:	685b      	ldr	r3, [r3, #4]
 80a2344:	9301      	str	r3, [sp, #4]
 80a2346:	bd08      	pop	{r3, pc}
 80a2348:	080601c8 	.word	0x080601c8

080a234c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a234c:	b508      	push	{r3, lr}
 80a234e:	4b02      	ldr	r3, [pc, #8]	; (80a2358 <network_connecting+0xc>)
 80a2350:	681b      	ldr	r3, [r3, #0]
 80a2352:	689b      	ldr	r3, [r3, #8]
 80a2354:	9301      	str	r3, [sp, #4]
 80a2356:	bd08      	pop	{r3, pc}
 80a2358:	080601c8 	.word	0x080601c8

080a235c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a235c:	b508      	push	{r3, lr}
 80a235e:	4b02      	ldr	r3, [pc, #8]	; (80a2368 <network_disconnect+0xc>)
 80a2360:	681b      	ldr	r3, [r3, #0]
 80a2362:	68db      	ldr	r3, [r3, #12]
 80a2364:	9301      	str	r3, [sp, #4]
 80a2366:	bd08      	pop	{r3, pc}
 80a2368:	080601c8 	.word	0x080601c8

080a236c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a236c:	b508      	push	{r3, lr}
 80a236e:	4b02      	ldr	r3, [pc, #8]	; (80a2378 <network_ready+0xc>)
 80a2370:	681b      	ldr	r3, [r3, #0]
 80a2372:	691b      	ldr	r3, [r3, #16]
 80a2374:	9301      	str	r3, [sp, #4]
 80a2376:	bd08      	pop	{r3, pc}
 80a2378:	080601c8 	.word	0x080601c8

080a237c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a237c:	b508      	push	{r3, lr}
 80a237e:	4b02      	ldr	r3, [pc, #8]	; (80a2388 <network_on+0xc>)
 80a2380:	681b      	ldr	r3, [r3, #0]
 80a2382:	695b      	ldr	r3, [r3, #20]
 80a2384:	9301      	str	r3, [sp, #4]
 80a2386:	bd08      	pop	{r3, pc}
 80a2388:	080601c8 	.word	0x080601c8

080a238c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a238c:	b508      	push	{r3, lr}
 80a238e:	4b02      	ldr	r3, [pc, #8]	; (80a2398 <network_off+0xc>)
 80a2390:	681b      	ldr	r3, [r3, #0]
 80a2392:	699b      	ldr	r3, [r3, #24]
 80a2394:	9301      	str	r3, [sp, #4]
 80a2396:	bd08      	pop	{r3, pc}
 80a2398:	080601c8 	.word	0x080601c8

080a239c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a239c:	b508      	push	{r3, lr}
 80a239e:	4b02      	ldr	r3, [pc, #8]	; (80a23a8 <network_listen+0xc>)
 80a23a0:	681b      	ldr	r3, [r3, #0]
 80a23a2:	69db      	ldr	r3, [r3, #28]
 80a23a4:	9301      	str	r3, [sp, #4]
 80a23a6:	bd08      	pop	{r3, pc}
 80a23a8:	080601c8 	.word	0x080601c8

080a23ac <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a23ac:	b508      	push	{r3, lr}
 80a23ae:	4b02      	ldr	r3, [pc, #8]	; (80a23b8 <network_listening+0xc>)
 80a23b0:	681b      	ldr	r3, [r3, #0]
 80a23b2:	6a1b      	ldr	r3, [r3, #32]
 80a23b4:	9301      	str	r3, [sp, #4]
 80a23b6:	bd08      	pop	{r3, pc}
 80a23b8:	080601c8 	.word	0x080601c8

080a23bc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a23bc:	b508      	push	{r3, lr}
 80a23be:	4b02      	ldr	r3, [pc, #8]	; (80a23c8 <network_set_listen_timeout+0xc>)
 80a23c0:	681b      	ldr	r3, [r3, #0]
 80a23c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a23c4:	9301      	str	r3, [sp, #4]
 80a23c6:	bd08      	pop	{r3, pc}
 80a23c8:	080601c8 	.word	0x080601c8

080a23cc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a23cc:	b508      	push	{r3, lr}
 80a23ce:	4b02      	ldr	r3, [pc, #8]	; (80a23d8 <network_get_listen_timeout+0xc>)
 80a23d0:	681b      	ldr	r3, [r3, #0]
 80a23d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a23d4:	9301      	str	r3, [sp, #4]
 80a23d6:	bd08      	pop	{r3, pc}
 80a23d8:	080601c8 	.word	0x080601c8

080a23dc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a23dc:	b508      	push	{r3, lr}
 80a23de:	4b02      	ldr	r3, [pc, #8]	; (80a23e8 <spark_process+0xc>)
 80a23e0:	681b      	ldr	r3, [r3, #0]
 80a23e2:	689b      	ldr	r3, [r3, #8]
 80a23e4:	9301      	str	r3, [sp, #4]
 80a23e6:	bd08      	pop	{r3, pc}
 80a23e8:	080601cc 	.word	0x080601cc

080a23ec <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a23ec:	b508      	push	{r3, lr}
 80a23ee:	4b02      	ldr	r3, [pc, #8]	; (80a23f8 <spark_cloud_flag_connected+0xc>)
 80a23f0:	681b      	ldr	r3, [r3, #0]
 80a23f2:	695b      	ldr	r3, [r3, #20]
 80a23f4:	9301      	str	r3, [sp, #4]
 80a23f6:	bd08      	pop	{r3, pc}
 80a23f8:	080601cc 	.word	0x080601cc

080a23fc <spark_sync_time>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80a23fc:	b508      	push	{r3, lr}
 80a23fe:	4b02      	ldr	r3, [pc, #8]	; (80a2408 <spark_sync_time+0xc>)
 80a2400:	681b      	ldr	r3, [r3, #0]
 80a2402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2404:	9301      	str	r3, [sp, #4]
 80a2406:	bd08      	pop	{r3, pc}
 80a2408:	080601cc 	.word	0x080601cc

080a240c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80a240c:	b508      	push	{r3, lr}
 80a240e:	4b02      	ldr	r3, [pc, #8]	; (80a2418 <spark_sync_time_pending+0xc>)
 80a2410:	681b      	ldr	r3, [r3, #0]
 80a2412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2414:	9301      	str	r3, [sp, #4]
 80a2416:	bd08      	pop	{r3, pc}
 80a2418:	080601cc 	.word	0x080601cc

080a241c <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
 80a241c:	b508      	push	{r3, lr}
 80a241e:	4b02      	ldr	r3, [pc, #8]	; (80a2428 <spark_sync_time_last+0xc>)
 80a2420:	681b      	ldr	r3, [r3, #0]
 80a2422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2424:	9301      	str	r3, [sp, #4]
 80a2426:	bd08      	pop	{r3, pc}
 80a2428:	080601cc 	.word	0x080601cc

080a242c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a242c:	b508      	push	{r3, lr}
 80a242e:	4b02      	ldr	r3, [pc, #8]	; (80a2438 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2430:	681b      	ldr	r3, [r3, #0]
 80a2432:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2434:	9301      	str	r3, [sp, #4]
 80a2436:	bd08      	pop	{r3, pc}
 80a2438:	080601cc 	.word	0x080601cc

080a243c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a243c:	b508      	push	{r3, lr}
 80a243e:	4b02      	ldr	r3, [pc, #8]	; (80a2448 <malloc+0xc>)
 80a2440:	681b      	ldr	r3, [r3, #0]
 80a2442:	681b      	ldr	r3, [r3, #0]
 80a2444:	9301      	str	r3, [sp, #4]
 80a2446:	bd08      	pop	{r3, pc}
 80a2448:	080601a0 	.word	0x080601a0

080a244c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a244c:	b508      	push	{r3, lr}
 80a244e:	4b02      	ldr	r3, [pc, #8]	; (80a2458 <free+0xc>)
 80a2450:	681b      	ldr	r3, [r3, #0]
 80a2452:	685b      	ldr	r3, [r3, #4]
 80a2454:	9301      	str	r3, [sp, #4]
 80a2456:	bd08      	pop	{r3, pc}
 80a2458:	080601a0 	.word	0x080601a0

080a245c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a245c:	b508      	push	{r3, lr}
 80a245e:	4b02      	ldr	r3, [pc, #8]	; (80a2468 <realloc+0xc>)
 80a2460:	681b      	ldr	r3, [r3, #0]
 80a2462:	689b      	ldr	r3, [r3, #8]
 80a2464:	9301      	str	r3, [sp, #4]
 80a2466:	bd08      	pop	{r3, pc}
 80a2468:	080601a0 	.word	0x080601a0

080a246c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a246c:	b508      	push	{r3, lr}
 80a246e:	4b02      	ldr	r3, [pc, #8]	; (80a2478 <sprintf+0xc>)
 80a2470:	681b      	ldr	r3, [r3, #0]
 80a2472:	68db      	ldr	r3, [r3, #12]
 80a2474:	9301      	str	r3, [sp, #4]
 80a2476:	bd08      	pop	{r3, pc}
 80a2478:	080601a0 	.word	0x080601a0

080a247c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80a247c:	b508      	push	{r3, lr}
 80a247e:	4b02      	ldr	r3, [pc, #8]	; (80a2488 <siprintf+0xc>)
 80a2480:	681b      	ldr	r3, [r3, #0]
 80a2482:	691b      	ldr	r3, [r3, #16]
 80a2484:	9301      	str	r3, [sp, #4]
 80a2486:	bd08      	pop	{r3, pc}
 80a2488:	080601a0 	.word	0x080601a0

080a248c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80a248c:	b508      	push	{r3, lr}
 80a248e:	4b02      	ldr	r3, [pc, #8]	; (80a2498 <siscanf+0xc>)
 80a2490:	681b      	ldr	r3, [r3, #0]
 80a2492:	699b      	ldr	r3, [r3, #24]
 80a2494:	9301      	str	r3, [sp, #4]
 80a2496:	bd08      	pop	{r3, pc}
 80a2498:	080601a0 	.word	0x080601a0

080a249c <vsnprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a249c:	b508      	push	{r3, lr}
 80a249e:	4b02      	ldr	r3, [pc, #8]	; (80a24a8 <vsnprintf+0xc>)
 80a24a0:	681b      	ldr	r3, [r3, #0]
 80a24a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a24a4:	9301      	str	r3, [sp, #4]
 80a24a6:	bd08      	pop	{r3, pc}
 80a24a8:	080601a0 	.word	0x080601a0

080a24ac <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a24ac:	b508      	push	{r3, lr}
 80a24ae:	4b02      	ldr	r3, [pc, #8]	; (80a24b8 <_malloc_r+0xc>)
 80a24b0:	681b      	ldr	r3, [r3, #0]
 80a24b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a24b4:	9301      	str	r3, [sp, #4]
 80a24b6:	bd08      	pop	{r3, pc}
 80a24b8:	080601a0 	.word	0x080601a0

080a24bc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a24bc:	4770      	bx	lr

080a24be <_ZN8SPIClassD0Ev>:
 80a24be:	b510      	push	{r4, lr}
 80a24c0:	4604      	mov	r4, r0
 80a24c2:	2110      	movs	r1, #16
 80a24c4:	f001 f983 	bl	80a37ce <_ZdlPvj>
 80a24c8:	4620      	mov	r0, r4
 80a24ca:	bd10      	pop	{r4, pc}

080a24cc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a24cc:	b570      	push	{r4, r5, r6, lr}
 80a24ce:	4604      	mov	r4, r0
 80a24d0:	460e      	mov	r6, r1
 80a24d2:	4b07      	ldr	r3, [pc, #28]	; (80a24f0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a24d4:	2500      	movs	r5, #0
 80a24d6:	6003      	str	r3, [r0, #0]
 80a24d8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a24dc:	f7ff fda0 	bl	80a2020 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a24e0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a24e2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a24e4:	f7ff fd4c 	bl	80a1f80 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a24e8:	60a5      	str	r5, [r4, #8]
}
 80a24ea:	4620      	mov	r0, r4
 80a24ec:	bd70      	pop	{r4, r5, r6, pc}
 80a24ee:	bf00      	nop
 80a24f0:	080a5894 	.word	0x080a5894

080a24f4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a24f4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a24f8:	7900      	ldrb	r0, [r0, #4]
 80a24fa:	f7ff bd31 	b.w	80a1f60 <HAL_SPI_Begin>

080a24fe <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
 80a24fe:	68c0      	ldr	r0, [r0, #12]
 80a2500:	f7ff bd9e 	b.w	80a2040 <os_mutex_unlock>

080a2504 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2504:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a2506:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2508:	6018      	str	r0, [r3, #0]
 80a250a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a250c:	6818      	ldr	r0, [r3, #0]
 80a250e:	b2e5      	uxtb	r5, r4
 80a2510:	4288      	cmp	r0, r1
 80a2512:	d906      	bls.n	80a2522 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2514:	3401      	adds	r4, #1
 80a2516:	2c08      	cmp	r4, #8
 80a2518:	d002      	beq.n	80a2520 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a251a:	0840      	lsrs	r0, r0, #1
 80a251c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a251e:	e7f5      	b.n	80a250c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a2520:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a2522:	4b02      	ldr	r3, [pc, #8]	; (80a252c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2524:	5d5b      	ldrb	r3, [r3, r5]
 80a2526:	7013      	strb	r3, [r2, #0]
 80a2528:	bd30      	pop	{r4, r5, pc}
 80a252a:	bf00      	nop
 80a252c:	080a589c 	.word	0x080a589c

080a2530 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 80a2530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2534:	4680      	mov	r8, r0
 80a2536:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
 80a2538:	68c0      	ldr	r0, [r0, #12]
 80a253a:	460f      	mov	r7, r1
 80a253c:	f7ff fd78 	bl	80a2030 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
 80a2540:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a2544:	2214      	movs	r2, #20
 80a2546:	2100      	movs	r1, #0
 80a2548:	a809      	add	r0, sp, #36	; 0x24
 80a254a:	f002 fa3e 	bl	80a49ca <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a254e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a2550:	4620      	mov	r0, r4
 80a2552:	2200      	movs	r2, #0
 80a2554:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a2556:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
 80a255a:	f7ff fd21 	bl	80a1fa0 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
 80a255e:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 80a2562:	b14c      	cbz	r4, 80a2578 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 80a2564:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a2568:	b92d      	cbnz	r5, 80a2576 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 80a256a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80a256c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a2570:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 80a2574:	e003      	b.n	80a257e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80a2576:	2400      	movs	r4, #0
 80a2578:	46a1      	mov	r9, r4
 80a257a:	4626      	mov	r6, r4
 80a257c:	2501      	movs	r5, #1
 80a257e:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a2580:	b10d      	cbz	r5, 80a2586 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 80a2582:	2b00      	cmp	r3, #0
 80a2584:	d140      	bne.n	80a2608 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
 80a2586:	429d      	cmp	r5, r3
 80a2588:	d10b      	bne.n	80a25a2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 80a258a:	68ba      	ldr	r2, [r7, #8]
 80a258c:	42b2      	cmp	r2, r6
 80a258e:	d108      	bne.n	80a25a2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a2590:	f88d 9020 	strb.w	r9, [sp, #32]
 80a2594:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a2598:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a259c:	89ba      	ldrh	r2, [r7, #12]
 80a259e:	4291      	cmp	r1, r2
 80a25a0:	d032      	beq.n	80a2608 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
 80a25a2:	bb23      	cbnz	r3, 80a25ee <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
 80a25a4:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
 80a25a8:	f10d 020f 	add.w	r2, sp, #15
 80a25ac:	ab04      	add	r3, sp, #16
 80a25ae:	68b9      	ldr	r1, [r7, #8]
 80a25b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a25b2:	f7ff ffa7 	bl	80a2504 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 80a25b6:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a25b8:	b105      	cbz	r5, 80a25bc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
 80a25ba:	bb13      	cbnz	r3, 80a2602 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
 80a25bc:	42ab      	cmp	r3, r5
 80a25be:	d009      	beq.n	80a25d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
 80a25c0:	2100      	movs	r1, #0
 80a25c2:	7b3b      	ldrb	r3, [r7, #12]
 80a25c4:	9101      	str	r1, [sp, #4]
 80a25c6:	7b7c      	ldrb	r4, [r7, #13]
 80a25c8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a25cc:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a25d0:	9400      	str	r4, [sp, #0]
 80a25d2:	e013      	b.n	80a25fc <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
 80a25d4:	68bb      	ldr	r3, [r7, #8]
 80a25d6:	42b3      	cmp	r3, r6
 80a25d8:	d3f2      	bcc.n	80a25c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a25da:	f88d 9020 	strb.w	r9, [sp, #32]
 80a25de:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a25e2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a25e6:	89bb      	ldrh	r3, [r7, #12]
 80a25e8:	429a      	cmp	r2, r3
 80a25ea:	d1e9      	bne.n	80a25c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
 80a25ec:	e009      	b.n	80a2602 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
 80a25ee:	2300      	movs	r3, #0
 80a25f0:	461a      	mov	r2, r3
 80a25f2:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a25f6:	9301      	str	r3, [sp, #4]
 80a25f8:	9300      	str	r3, [sp, #0]
 80a25fa:	2101      	movs	r1, #1
 80a25fc:	f7ff fcd8 	bl	80a1fb0 <HAL_SPI_Set_Settings>
 80a2600:	e002      	b.n	80a2608 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
 80a2602:	9b04      	ldr	r3, [sp, #16]
 80a2604:	42b3      	cmp	r3, r6
 80a2606:	d1db      	bne.n	80a25c0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
 80a2608:	2000      	movs	r0, #0
 80a260a:	b00f      	add	sp, #60	; 0x3c
 80a260c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a2610 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a2610:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a2612:	7900      	ldrb	r0, [r0, #4]
 80a2614:	f7ff fcac 	bl	80a1f70 <HAL_SPI_Send_Receive_Data>
}
 80a2618:	b2c0      	uxtb	r0, r0
 80a261a:	bd08      	pop	{r3, pc}

080a261c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a261c:	7900      	ldrb	r0, [r0, #4]
 80a261e:	f7ff bcb7 	b.w	80a1f90 <HAL_SPI_Is_Enabled>
	...

080a2624 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 80a2624:	b510      	push	{r4, lr}
 80a2626:	4604      	mov	r4, r0
 80a2628:	4608      	mov	r0, r1
 80a262a:	4611      	mov	r1, r2
 80a262c:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 80a262e:	2300      	movs	r3, #0
 80a2630:	f7ff fe60 	bl	80a22f4 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 80a2634:	4b06      	ldr	r3, [pc, #24]	; (80a2650 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 80a2636:	2200      	movs	r2, #0
 80a2638:	701a      	strb	r2, [r3, #0]
 80a263a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a263e:	8058      	strh	r0, [r3, #2]
 80a2640:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 80a2642:	681a      	ldr	r2, [r3, #0]
 80a2644:	889b      	ldrh	r3, [r3, #4]
 80a2646:	6022      	str	r2, [r4, #0]
 80a2648:	80a3      	strh	r3, [r4, #4]
}
 80a264a:	4620      	mov	r0, r4
 80a264c:	bd10      	pop	{r4, pc}
 80a264e:	bf00      	nop
 80a2650:	200005dc 	.word	0x200005dc

080a2654 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2654:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2658:	4b03      	ldr	r3, [pc, #12]	; (80a2668 <_GLOBAL__sub_I_System+0x14>)
 80a265a:	2000      	movs	r0, #0
 80a265c:	7018      	strb	r0, [r3, #0]
 80a265e:	8058      	strh	r0, [r3, #2]
 80a2660:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2662:	f7ff be37 	b.w	80a22d4 <set_system_mode>
 80a2666:	bf00      	nop
 80a2668:	200005dc 	.word	0x200005dc

080a266c <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a266c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a266e:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2670:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2672:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2676:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a2678:	2201      	movs	r2, #1
 80a267a:	f247 5330 	movw	r3, #30000	; 0x7530
 80a267e:	4621      	mov	r1, r4
 80a2680:	47a8      	blx	r5
}
 80a2682:	b003      	add	sp, #12
 80a2684:	bd30      	pop	{r4, r5, pc}

080a2686 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a2686:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2688:	6803      	ldr	r3, [r0, #0]
 80a268a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a268c:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2690:	46a4      	mov	ip, r4
}
 80a2692:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2694:	4760      	bx	ip

080a2696 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a2696:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2698:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a269a:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a269c:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a26a0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a26a2:	4621      	mov	r1, r4
 80a26a4:	4613      	mov	r3, r2
 80a26a6:	2201      	movs	r2, #1
 80a26a8:	47a8      	blx	r5
}
 80a26aa:	b003      	add	sp, #12
 80a26ac:	bd30      	pop	{r4, r5, pc}

080a26ae <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a26ae:	4770      	bx	lr

080a26b0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a26b0:	4770      	bx	lr

080a26b2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a26b2:	2000      	movs	r0, #0
 80a26b4:	4770      	bx	lr

080a26b6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a26b6:	b510      	push	{r4, lr}
 80a26b8:	4604      	mov	r4, r0
 80a26ba:	2114      	movs	r1, #20
 80a26bc:	f001 f887 	bl	80a37ce <_ZdlPvj>
 80a26c0:	4620      	mov	r0, r4
 80a26c2:	bd10      	pop	{r4, pc}

080a26c4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a26c4:	f7fd bced 	b.w	80a00a2 <_ZdlPv>

080a26c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a26c8:	b510      	push	{r4, lr}
 80a26ca:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a26cc:	6803      	ldr	r3, [r0, #0]
 80a26ce:	689b      	ldr	r3, [r3, #8]
 80a26d0:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a26d2:	68a3      	ldr	r3, [r4, #8]
 80a26d4:	3b01      	subs	r3, #1
 80a26d6:	60a3      	str	r3, [r4, #8]
 80a26d8:	b92b      	cbnz	r3, 80a26e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80a26da:	6823      	ldr	r3, [r4, #0]
 80a26dc:	4620      	mov	r0, r4
        }
    }
 80a26de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a26e2:	68db      	ldr	r3, [r3, #12]
 80a26e4:	4718      	bx	r3
 80a26e6:	bd10      	pop	{r4, pc}

080a26e8 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a26e8:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a26ea:	4604      	mov	r4, r0
 80a26ec:	4606      	mov	r6, r0
 80a26ee:	694d      	ldr	r5, [r1, #20]
 80a26f0:	4b04      	ldr	r3, [pc, #16]	; (80a2704 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a26f2:	358c      	adds	r5, #140	; 0x8c
 80a26f4:	f844 3b04 	str.w	r3, [r4], #4
 80a26f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a26fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a26fc:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a26fe:	4630      	mov	r0, r6
 80a2700:	7023      	strb	r3, [r4, #0]
 80a2702:	bd70      	pop	{r4, r5, r6, pc}
 80a2704:	080a5a34 	.word	0x080a5a34

080a2708 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a2708:	b510      	push	{r4, lr}
 80a270a:	6943      	ldr	r3, [r0, #20]
 80a270c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a270e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2712:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2716:	429a      	cmp	r2, r3
 80a2718:	d005      	beq.n	80a2726 <_ZN9TCPClient4peekEv+0x1e>
 80a271a:	6962      	ldr	r2, [r4, #20]
 80a271c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2720:	4413      	add	r3, r2
 80a2722:	7918      	ldrb	r0, [r3, #4]
 80a2724:	bd10      	pop	{r4, pc}
 80a2726:	6803      	ldr	r3, [r0, #0]
 80a2728:	691b      	ldr	r3, [r3, #16]
 80a272a:	4798      	blx	r3
 80a272c:	2800      	cmp	r0, #0
 80a272e:	d1f4      	bne.n	80a271a <_ZN9TCPClient4peekEv+0x12>
 80a2730:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a2734:	bd10      	pop	{r4, pc}

080a2736 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a2736:	b510      	push	{r4, lr}
 80a2738:	6943      	ldr	r3, [r0, #20]
 80a273a:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a273c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2740:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2744:	429a      	cmp	r2, r3
 80a2746:	d008      	beq.n	80a275a <_ZN9TCPClient4readEv+0x24>
 80a2748:	6962      	ldr	r2, [r4, #20]
 80a274a:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a274e:	1c59      	adds	r1, r3, #1
 80a2750:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a2754:	4413      	add	r3, r2
 80a2756:	7918      	ldrb	r0, [r3, #4]
 80a2758:	bd10      	pop	{r4, pc}
 80a275a:	6803      	ldr	r3, [r0, #0]
 80a275c:	691b      	ldr	r3, [r3, #16]
 80a275e:	4798      	blx	r3
 80a2760:	2800      	cmp	r0, #0
 80a2762:	d1f1      	bne.n	80a2748 <_ZN9TCPClient4readEv+0x12>
 80a2764:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a2768:	bd10      	pop	{r4, pc}

080a276a <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a276a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a276c:	6943      	ldr	r3, [r0, #20]
 80a276e:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a2770:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2774:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2778:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a277a:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a277c:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a277e:	d106      	bne.n	80a278e <_ZN9TCPClient4readEPhj+0x24>
 80a2780:	6803      	ldr	r3, [r0, #0]
 80a2782:	691b      	ldr	r3, [r3, #16]
 80a2784:	4798      	blx	r3
 80a2786:	b910      	cbnz	r0, 80a278e <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a2788:	f04f 34ff 	mov.w	r4, #4294967295
 80a278c:	e014      	b.n	80a27b8 <_ZN9TCPClient4readEPhj+0x4e>
 80a278e:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2790:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a2792:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a2796:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a279a:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a279c:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a279e:	42bc      	cmp	r4, r7
 80a27a0:	bf28      	it	cs
 80a27a2:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a27a4:	3104      	adds	r1, #4
 80a27a6:	4622      	mov	r2, r4
 80a27a8:	f002 f904 	bl	80a49b4 <memcpy>
 80a27ac:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a27ae:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a27b2:	4423      	add	r3, r4
 80a27b4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a27b8:	4620      	mov	r0, r4
 80a27ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a27bc <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a27bc:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a27be:	2300      	movs	r3, #0
 80a27c0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a27c4:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a27c6:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a27ca:	4770      	bx	lr

080a27cc <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a27cc:	b538      	push	{r3, r4, r5, lr}
 80a27ce:	6942      	ldr	r2, [r0, #20]
 80a27d0:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a27d2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a27d6:	b11b      	cbz	r3, 80a27e0 <_ZN9TCPClient9availableEv+0x14>
 80a27d8:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a27dc:	429a      	cmp	r2, r3
 80a27de:	d00c      	beq.n	80a27fa <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a27e0:	6920      	ldr	r0, [r4, #16]
 80a27e2:	f000 ff1d 	bl	80a3620 <_ZN5spark12NetworkClass4fromEm>
 80a27e6:	6803      	ldr	r3, [r0, #0]
 80a27e8:	68db      	ldr	r3, [r3, #12]
 80a27ea:	4798      	blx	r3
 80a27ec:	b318      	cbz	r0, 80a2836 <_ZN9TCPClient9availableEv+0x6a>
 80a27ee:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a27f0:	6818      	ldr	r0, [r3, #0]
 80a27f2:	f7ff fccf 	bl	80a2194 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a27f6:	b918      	cbnz	r0, 80a2800 <_ZN9TCPClient9availableEv+0x34>
 80a27f8:	e01d      	b.n	80a2836 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a27fa:	f7ff ffdf 	bl	80a27bc <_ZN9TCPClient12flush_bufferEv>
 80a27fe:	e7ef      	b.n	80a27e0 <_ZN9TCPClient9availableEv+0x14>
 80a2800:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a2802:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a2806:	297f      	cmp	r1, #127	; 0x7f
 80a2808:	d815      	bhi.n	80a2836 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a280a:	1d05      	adds	r5, r0, #4
 80a280c:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a2810:	2300      	movs	r3, #0
 80a2812:	4429      	add	r1, r5
 80a2814:	6800      	ldr	r0, [r0, #0]
 80a2816:	f7ff fcd5 	bl	80a21c4 <socket_receive>
            if (ret > 0)
 80a281a:	2800      	cmp	r0, #0
 80a281c:	dd0b      	ble.n	80a2836 <_ZN9TCPClient9availableEv+0x6a>
 80a281e:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a2820:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2824:	b90a      	cbnz	r2, 80a282a <_ZN9TCPClient9availableEv+0x5e>
 80a2826:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a282a:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a282c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2830:	4418      	add	r0, r3
 80a2832:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a2836:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a2838:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a283c:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a2840:	1a18      	subs	r0, r3, r0
}
 80a2842:	bd38      	pop	{r3, r4, r5, pc}

080a2844 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a2844:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a2846:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a2848:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a284a:	6818      	ldr	r0, [r3, #0]
 80a284c:	f7ff fca2 	bl	80a2194 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a2850:	b118      	cbz	r0, 80a285a <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a2852:	6963      	ldr	r3, [r4, #20]
 80a2854:	6818      	ldr	r0, [r3, #0]
 80a2856:	f7ff fcbd 	bl	80a21d4 <socket_close>
 80a285a:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a285c:	f7ff fcc2 	bl	80a21e4 <socket_handle_invalid>
 80a2860:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2862:	6960      	ldr	r0, [r4, #20]
 80a2864:	2211      	movs	r2, #17
 80a2866:	2100      	movs	r1, #0
 80a2868:	308c      	adds	r0, #140	; 0x8c
 80a286a:	f002 f8ae 	bl	80a49ca <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a286e:	4620      	mov	r0, r4
}
 80a2870:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a2874:	f7ff bfa2 	b.w	80a27bc <_ZN9TCPClient12flush_bufferEv>

080a2878 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a287c:	461f      	mov	r7, r3
    stop();
 80a287e:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2880:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a2882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2884:	4606      	mov	r6, r0
 80a2886:	460c      	mov	r4, r1
 80a2888:	4615      	mov	r5, r2
    stop();
 80a288a:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a288c:	4638      	mov	r0, r7
 80a288e:	f000 fec7 	bl	80a3620 <_ZN5spark12NetworkClass4fromEm>
 80a2892:	6803      	ldr	r3, [r0, #0]
 80a2894:	68db      	ldr	r3, [r3, #12]
 80a2896:	4798      	blx	r3
 80a2898:	2800      	cmp	r0, #0
 80a289a:	d056      	beq.n	80a294a <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a289c:	9700      	str	r7, [sp, #0]
 80a289e:	462b      	mov	r3, r5
 80a28a0:	2206      	movs	r2, #6
 80a28a2:	2101      	movs	r1, #1
 80a28a4:	2002      	movs	r0, #2
 80a28a6:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a28aa:	f7ff fc7b 	bl	80a21a4 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a28ae:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a28b0:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a28b4:	2700      	movs	r7, #0
 80a28b6:	9302      	str	r3, [sp, #8]
 80a28b8:	6973      	ldr	r3, [r6, #20]
 80a28ba:	9703      	str	r7, [sp, #12]
 80a28bc:	681b      	ldr	r3, [r3, #0]
 80a28be:	2001      	movs	r0, #1
 80a28c0:	9301      	str	r3, [sp, #4]
 80a28c2:	4b23      	ldr	r3, [pc, #140]	; (80a2950 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a28c4:	aa02      	add	r2, sp, #8
 80a28c6:	9300      	str	r3, [sp, #0]
 80a28c8:	4922      	ldr	r1, [pc, #136]	; (80a2954 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a28ca:	463b      	mov	r3, r7
 80a28cc:	f7ff fcf2 	bl	80a22b4 <log_message>

          if (socket_handle_valid(d_->sock))
 80a28d0:	6973      	ldr	r3, [r6, #20]
 80a28d2:	6818      	ldr	r0, [r3, #0]
 80a28d4:	f7ff fc5e 	bl	80a2194 <socket_handle_valid>
 80a28d8:	2800      	cmp	r0, #0
 80a28da:	d036      	beq.n	80a294a <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a28dc:	4630      	mov	r0, r6
 80a28de:	f7ff ff6d 	bl	80a27bc <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a28e2:	2302      	movs	r3, #2
 80a28e4:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a28e8:	0a2b      	lsrs	r3, r5, #8
 80a28ea:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a28ee:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a28f0:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a28f4:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a28f8:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a28fa:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a28fe:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a2902:	7963      	ldrb	r3, [r4, #5]
 80a2904:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a2908:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a290c:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2910:	f7ff fcb8 	bl	80a2284 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2914:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2916:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2918:	2210      	movs	r2, #16
 80a291a:	a902      	add	r1, sp, #8
 80a291c:	6818      	ldr	r0, [r3, #0]
 80a291e:	f7ff fc49 	bl	80a21b4 <socket_connect>
 80a2922:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a2924:	4628      	mov	r0, r5
 80a2926:	f7ff fcad 	bl	80a2284 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a292a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a292c:	6975      	ldr	r5, [r6, #20]
 80a292e:	358c      	adds	r5, #140	; 0x8c
 80a2930:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2932:	6823      	ldr	r3, [r4, #0]
 80a2934:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a2936:	f1b8 0f00 	cmp.w	r8, #0
 80a293a:	d005      	beq.n	80a2948 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a293c:	6833      	ldr	r3, [r6, #0]
 80a293e:	4630      	mov	r0, r6
 80a2940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2942:	4798      	blx	r3
 80a2944:	4638      	mov	r0, r7
 80a2946:	e000      	b.n	80a294a <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a2948:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a294a:	b00a      	add	sp, #40	; 0x28
 80a294c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2950:	080a5913 	.word	0x080a5913
 80a2954:	080a590c 	.word	0x080a590c

080a2958 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a2958:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a295a:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a295c:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a295e:	6818      	ldr	r0, [r3, #0]
 80a2960:	f7ff fc18 	bl	80a2194 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a2964:	b908      	cbnz	r0, 80a296a <_ZN9TCPClient6statusEv+0x12>
 80a2966:	2000      	movs	r0, #0
 80a2968:	bd10      	pop	{r4, pc}
 80a296a:	6920      	ldr	r0, [r4, #16]
 80a296c:	f000 fe58 	bl	80a3620 <_ZN5spark12NetworkClass4fromEm>
 80a2970:	6803      	ldr	r3, [r0, #0]
 80a2972:	68db      	ldr	r3, [r3, #12]
 80a2974:	4798      	blx	r3
 80a2976:	2800      	cmp	r0, #0
 80a2978:	d0f5      	beq.n	80a2966 <_ZN9TCPClient6statusEv+0xe>
 80a297a:	6963      	ldr	r3, [r4, #20]
 80a297c:	6818      	ldr	r0, [r3, #0]
 80a297e:	f7ff fc01 	bl	80a2184 <socket_active_status>
 80a2982:	fab0 f080 	clz	r0, r0
 80a2986:	0940      	lsrs	r0, r0, #5
}
 80a2988:	bd10      	pop	{r4, pc}

080a298a <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a298a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a298e:	2500      	movs	r5, #0
 80a2990:	6045      	str	r5, [r0, #4]
 80a2992:	4604      	mov	r4, r0
 80a2994:	460e      	mov	r6, r1
 80a2996:	4617      	mov	r7, r2
 80a2998:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a299a:	f7ff ffdd 	bl	80a2958 <_ZN9TCPClient6statusEv>
 80a299e:	b160      	cbz	r0, 80a29ba <_ZN9TCPClient5writeEPKhjm+0x30>
 80a29a0:	6960      	ldr	r0, [r4, #20]
 80a29a2:	9501      	str	r5, [sp, #4]
 80a29a4:	f8cd 8000 	str.w	r8, [sp]
 80a29a8:	462b      	mov	r3, r5
 80a29aa:	463a      	mov	r2, r7
 80a29ac:	4631      	mov	r1, r6
 80a29ae:	6800      	ldr	r0, [r0, #0]
 80a29b0:	f7ff fc20 	bl	80a21f4 <socket_send_ex>
    if (ret < 0) {
 80a29b4:	2800      	cmp	r0, #0
 80a29b6:	da03      	bge.n	80a29c0 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a29b8:	e001      	b.n	80a29be <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a29ba:	f04f 30ff 	mov.w	r0, #4294967295
 80a29be:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a29c0:	b002      	add	sp, #8
 80a29c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a29c6 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a29c6:	b538      	push	{r3, r4, r5, lr}
 80a29c8:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a29ca:	f7ff ffc5 	bl	80a2958 <_ZN9TCPClient6statusEv>
 80a29ce:	bb00      	cbnz	r0, 80a2a12 <_ZN9TCPClient9connectedEv+0x4c>
 80a29d0:	6963      	ldr	r3, [r4, #20]
 80a29d2:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a29d6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a29da:	4291      	cmp	r1, r2
 80a29dc:	d119      	bne.n	80a2a12 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a29de:	6818      	ldr	r0, [r3, #0]
 80a29e0:	f7ff fbd8 	bl	80a2194 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a29e4:	b128      	cbz	r0, 80a29f2 <_ZN9TCPClient9connectedEv+0x2c>
 80a29e6:	6963      	ldr	r3, [r4, #20]
 80a29e8:	6818      	ldr	r0, [r3, #0]
 80a29ea:	f7ff fbcb 	bl	80a2184 <socket_active_status>
 80a29ee:	2801      	cmp	r0, #1
 80a29f0:	d001      	beq.n	80a29f6 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a29f2:	2500      	movs	r5, #0
 80a29f4:	e00e      	b.n	80a2a14 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a29f6:	6823      	ldr	r3, [r4, #0]
 80a29f8:	4620      	mov	r0, r4
 80a29fa:	691b      	ldr	r3, [r3, #16]
 80a29fc:	4798      	blx	r3
 80a29fe:	2800      	cmp	r0, #0
 80a2a00:	bf14      	ite	ne
 80a2a02:	2501      	movne	r5, #1
 80a2a04:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a2a06:	d105      	bne.n	80a2a14 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a2a08:	6823      	ldr	r3, [r4, #0]
 80a2a0a:	4620      	mov	r0, r4
 80a2a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2a0e:	4798      	blx	r3
 80a2a10:	e000      	b.n	80a2a14 <_ZN9TCPClient9connectedEv+0x4e>
 80a2a12:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a2a14:	4628      	mov	r0, r5
 80a2a16:	bd38      	pop	{r3, r4, r5, pc}

080a2a18 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a2a18:	b508      	push	{r3, lr}
   return (status()!=0);
 80a2a1a:	f7ff ff9d 	bl	80a2958 <_ZN9TCPClient6statusEv>
}
 80a2a1e:	3000      	adds	r0, #0
 80a2a20:	bf18      	it	ne
 80a2a22:	2001      	movne	r0, #1
 80a2a24:	bd08      	pop	{r3, pc}

080a2a26 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a2a26:	b510      	push	{r4, lr}
 80a2a28:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a2a2a:	2300      	movs	r3, #0
 80a2a2c:	6001      	str	r1, [r0, #0]
 80a2a2e:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a2a32:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a2a36:	3088      	adds	r0, #136	; 0x88
 80a2a38:	f000 fb2a 	bl	80a3090 <_ZN9IPAddressC1Ev>
}
 80a2a3c:	4620      	mov	r0, r4
 80a2a3e:	bd10      	pop	{r4, pc}

080a2a40 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2a40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a2a44:	b570      	push	{r4, r5, r6, lr}
 80a2a46:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a2a48:	4a14      	ldr	r2, [pc, #80]	; (80a2a9c <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2a4a:	2300      	movs	r3, #0
 80a2a4c:	6043      	str	r3, [r0, #4]
 80a2a4e:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a2a50:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a2a52:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a2a54:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a2a56:	20a0      	movs	r0, #160	; 0xa0
 80a2a58:	460e      	mov	r6, r1
 80a2a5a:	f7fd fb1e 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a2a5e:	4605      	mov	r5, r0
 80a2a60:	b110      	cbz	r0, 80a2a68 <_ZN9TCPClientC1Em+0x28>
 80a2a62:	4631      	mov	r1, r6
 80a2a64:	f7ff ffdf 	bl	80a2a26 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a2a68:	2014      	movs	r0, #20
 80a2a6a:	f7fd fb16 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a2a6e:	4603      	mov	r3, r0
 80a2a70:	b128      	cbz	r0, 80a2a7e <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2a72:	2201      	movs	r2, #1
 80a2a74:	6042      	str	r2, [r0, #4]
 80a2a76:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a2a78:	4a09      	ldr	r2, [pc, #36]	; (80a2aa0 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a2a7a:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a2a7c:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a2a7e:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a2a80:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a2a82:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a2a84:	b128      	cbz	r0, 80a2a92 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a2a86:	6843      	ldr	r3, [r0, #4]
 80a2a88:	3b01      	subs	r3, #1
 80a2a8a:	6043      	str	r3, [r0, #4]
 80a2a8c:	b90b      	cbnz	r3, 80a2a92 <_ZN9TCPClientC1Em+0x52>
 80a2a8e:	f7ff fe1b 	bl	80a26c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a2a92:	4620      	mov	r0, r4
 80a2a94:	f7ff fe92 	bl	80a27bc <_ZN9TCPClient12flush_bufferEv>
}
 80a2a98:	4620      	mov	r0, r4
 80a2a9a:	bd70      	pop	{r4, r5, r6, pc}
 80a2a9c:	080a58c8 	.word	0x080a58c8
 80a2aa0:	080a58ac 	.word	0x080a58ac

080a2aa4 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a2aa4:	b510      	push	{r4, lr}
 80a2aa6:	4604      	mov	r4, r0
 80a2aa8:	f7ff fb9c 	bl	80a21e4 <socket_handle_invalid>
 80a2aac:	4601      	mov	r1, r0
 80a2aae:	4620      	mov	r0, r4
 80a2ab0:	f7ff ffc6 	bl	80a2a40 <_ZN9TCPClientC1Em>
{
}
 80a2ab4:	4620      	mov	r0, r4
 80a2ab6:	bd10      	pop	{r4, pc}

080a2ab8 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a2ab8:	b510      	push	{r4, lr}
 80a2aba:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a2abc:	6800      	ldr	r0, [r0, #0]
 80a2abe:	f7ff fb69 	bl	80a2194 <socket_handle_valid>
 80a2ac2:	b110      	cbz	r0, 80a2aca <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a2ac4:	6820      	ldr	r0, [r4, #0]
 80a2ac6:	f7ff fb85 	bl	80a21d4 <socket_close>
    }
}
 80a2aca:	4620      	mov	r0, r4
 80a2acc:	bd10      	pop	{r4, pc}

080a2ace <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a2ace:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a2ad0:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a2ad2:	4620      	mov	r0, r4
 80a2ad4:	f7ff fff0 	bl	80a2ab8 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a2ad8:	b124      	cbz	r4, 80a2ae4 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a2ada:	4620      	mov	r0, r4
 80a2adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2ae0:	f7fd badf 	b.w	80a00a2 <_ZdlPv>
 80a2ae4:	bd10      	pop	{r4, pc}
	...

080a2ae8 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a2ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2aec:	461f      	mov	r7, r3
    stop();
 80a2aee:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a2af0:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a2af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a2af4:	4606      	mov	r6, r0
 80a2af6:	460d      	mov	r5, r1
 80a2af8:	4690      	mov	r8, r2
    stop();
 80a2afa:	4798      	blx	r3
    if (Network.ready())
 80a2afc:	4813      	ldr	r0, [pc, #76]	; (80a2b4c <_ZN9TCPClient7connectEPKctm+0x64>)
 80a2afe:	f000 fd42 	bl	80a3586 <_ZN5spark12NetworkClass5readyEv>
 80a2b02:	b300      	cbz	r0, 80a2b46 <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a2b04:	a802      	add	r0, sp, #8
 80a2b06:	f000 fac3 	bl	80a3090 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a2b0a:	4628      	mov	r0, r5
 80a2b0c:	f001 ffa0 	bl	80a4a50 <strlen>
 80a2b10:	2400      	movs	r4, #0
 80a2b12:	b281      	uxth	r1, r0
 80a2b14:	9400      	str	r4, [sp, #0]
 80a2b16:	463b      	mov	r3, r7
 80a2b18:	aa03      	add	r2, sp, #12
 80a2b1a:	4628      	mov	r0, r5
 80a2b1c:	f7ff fbba 	bl	80a2294 <inet_gethostbyname>
 80a2b20:	b980      	cbnz	r0, 80a2b44 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a2b22:	6833      	ldr	r3, [r6, #0]
 80a2b24:	ad09      	add	r5, sp, #36	; 0x24
 80a2b26:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a2b2a:	4b09      	ldr	r3, [pc, #36]	; (80a2b50 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a2b2c:	ac03      	add	r4, sp, #12
 80a2b2e:	9308      	str	r3, [sp, #32]
 80a2b30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2b32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2b34:	6823      	ldr	r3, [r4, #0]
 80a2b36:	4642      	mov	r2, r8
 80a2b38:	702b      	strb	r3, [r5, #0]
 80a2b3a:	a908      	add	r1, sp, #32
 80a2b3c:	463b      	mov	r3, r7
 80a2b3e:	4630      	mov	r0, r6
 80a2b40:	47c8      	blx	r9
 80a2b42:	e000      	b.n	80a2b46 <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a2b44:	4620      	mov	r0, r4
}
 80a2b46:	b00f      	add	sp, #60	; 0x3c
 80a2b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2b4c:	20000a98 	.word	0x20000a98
 80a2b50:	080a5a34 	.word	0x080a5a34

080a2b54 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2b54:	b510      	push	{r4, lr}
 80a2b56:	4604      	mov	r4, r0
{
	free(buffer);
 80a2b58:	6800      	ldr	r0, [r0, #0]
 80a2b5a:	f7ff fc77 	bl	80a244c <free>
}
 80a2b5e:	4620      	mov	r0, r4
 80a2b60:	bd10      	pop	{r4, pc}

080a2b62 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2b62:	b510      	push	{r4, lr}
 80a2b64:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2b66:	6800      	ldr	r0, [r0, #0]
 80a2b68:	b108      	cbz	r0, 80a2b6e <_ZN6String10invalidateEv+0xc>
 80a2b6a:	f7ff fc6f 	bl	80a244c <free>
	buffer = NULL;
 80a2b6e:	2300      	movs	r3, #0
 80a2b70:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2b72:	60a3      	str	r3, [r4, #8]
 80a2b74:	6063      	str	r3, [r4, #4]
 80a2b76:	bd10      	pop	{r4, pc}

080a2b78 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2b78:	b538      	push	{r3, r4, r5, lr}
 80a2b7a:	4604      	mov	r4, r0
 80a2b7c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a2b7e:	6800      	ldr	r0, [r0, #0]
 80a2b80:	3101      	adds	r1, #1
 80a2b82:	f7ff fc6b 	bl	80a245c <realloc>
	if (newbuffer) {
 80a2b86:	b110      	cbz	r0, 80a2b8e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2b88:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a2b8c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a2b8e:	bd38      	pop	{r3, r4, r5, pc}

080a2b90 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2b90:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2b92:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2b94:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2b96:	b113      	cbz	r3, 80a2b9e <_ZN6String7reserveEj+0xe>
 80a2b98:	6843      	ldr	r3, [r0, #4]
 80a2b9a:	428b      	cmp	r3, r1
 80a2b9c:	d207      	bcs.n	80a2bae <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a2b9e:	4620      	mov	r0, r4
 80a2ba0:	f7ff ffea 	bl	80a2b78 <_ZN6String12changeBufferEj>
 80a2ba4:	b120      	cbz	r0, 80a2bb0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2ba6:	68a3      	ldr	r3, [r4, #8]
 80a2ba8:	b90b      	cbnz	r3, 80a2bae <_ZN6String7reserveEj+0x1e>
 80a2baa:	6822      	ldr	r2, [r4, #0]
 80a2bac:	7013      	strb	r3, [r2, #0]
 80a2bae:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a2bb0:	bd10      	pop	{r4, pc}

080a2bb2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2bb2:	b570      	push	{r4, r5, r6, lr}
 80a2bb4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2bb6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2bb8:	4604      	mov	r4, r0
 80a2bba:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a2bbc:	f7ff ffe8 	bl	80a2b90 <_ZN6String7reserveEj>
 80a2bc0:	b918      	cbnz	r0, 80a2bca <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a2bc2:	4620      	mov	r0, r4
 80a2bc4:	f7ff ffcd 	bl	80a2b62 <_ZN6String10invalidateEv>
		return *this;
 80a2bc8:	e009      	b.n	80a2bde <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a2bca:	462a      	mov	r2, r5
 80a2bcc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a2bce:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a2bd0:	6820      	ldr	r0, [r4, #0]
 80a2bd2:	f001 feef 	bl	80a49b4 <memcpy>
	buffer[len] = 0;
 80a2bd6:	6822      	ldr	r2, [r4, #0]
 80a2bd8:	68a3      	ldr	r3, [r4, #8]
 80a2bda:	2100      	movs	r1, #0
 80a2bdc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a2bde:	4620      	mov	r0, r4
 80a2be0:	bd70      	pop	{r4, r5, r6, pc}

080a2be2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2be2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2be4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2be6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2be8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2bea:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2bec:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a2bee:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a2bf0:	460d      	mov	r5, r1
 80a2bf2:	b139      	cbz	r1, 80a2c04 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a2bf4:	4608      	mov	r0, r1
 80a2bf6:	f001 ff2b 	bl	80a4a50 <strlen>
 80a2bfa:	4629      	mov	r1, r5
 80a2bfc:	4602      	mov	r2, r0
 80a2bfe:	4620      	mov	r0, r4
 80a2c00:	f7ff ffd7 	bl	80a2bb2 <_ZN6String4copyEPKcj>
}
 80a2c04:	4620      	mov	r0, r4
 80a2c06:	bd38      	pop	{r3, r4, r5, pc}

080a2c08 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2c08:	b538      	push	{r3, r4, r5, lr}
 80a2c0a:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2c0c:	460c      	mov	r4, r1
 80a2c0e:	b141      	cbz	r1, 80a2c22 <_ZN6StringaSEPKc+0x1a>
 80a2c10:	4608      	mov	r0, r1
 80a2c12:	f001 ff1d 	bl	80a4a50 <strlen>
 80a2c16:	4621      	mov	r1, r4
 80a2c18:	4602      	mov	r2, r0
 80a2c1a:	4628      	mov	r0, r5
 80a2c1c:	f7ff ffc9 	bl	80a2bb2 <_ZN6String4copyEPKcj>
 80a2c20:	e001      	b.n	80a2c26 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a2c22:	f7ff ff9e 	bl	80a2b62 <_ZN6String10invalidateEv>

	return *this;
}
 80a2c26:	4628      	mov	r0, r5
 80a2c28:	bd38      	pop	{r3, r4, r5, pc}

080a2c2a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2c2c:	4606      	mov	r6, r0
 80a2c2e:	460d      	mov	r5, r1
 80a2c30:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2c32:	2400      	movs	r4, #0
  while (size--) {
 80a2c34:	42bd      	cmp	r5, r7
 80a2c36:	d00c      	beq.n	80a2c52 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2c38:	6833      	ldr	r3, [r6, #0]
 80a2c3a:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2c3e:	689b      	ldr	r3, [r3, #8]
 80a2c40:	4630      	mov	r0, r6
 80a2c42:	4798      	blx	r3
     if (chunk>=0)
 80a2c44:	2800      	cmp	r0, #0
 80a2c46:	db01      	blt.n	80a2c4c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2c48:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2c4a:	e7f3      	b.n	80a2c34 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2c4c:	2c00      	cmp	r4, #0
 80a2c4e:	bf08      	it	eq
 80a2c50:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2c52:	4620      	mov	r0, r4
 80a2c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2c56 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2c56:	b570      	push	{r4, r5, r6, lr}
 80a2c58:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2c5a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2c5c:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2c5e:	b149      	cbz	r1, 80a2c74 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2c60:	f001 fef6 	bl	80a4a50 <strlen>
 80a2c64:	682b      	ldr	r3, [r5, #0]
 80a2c66:	4602      	mov	r2, r0
 80a2c68:	4621      	mov	r1, r4
 80a2c6a:	4628      	mov	r0, r5
    }
 80a2c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2c70:	68db      	ldr	r3, [r3, #12]
 80a2c72:	4718      	bx	r3
    }
 80a2c74:	bd70      	pop	{r4, r5, r6, pc}

080a2c76 <_ZN5Print5printEPKc>:
 80a2c76:	b508      	push	{r3, lr}
 80a2c78:	f7ff ffed 	bl	80a2c56 <_ZN5Print5writeEPKc>
 80a2c7c:	bd08      	pop	{r3, pc}

080a2c7e <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2c7e:	6803      	ldr	r3, [r0, #0]
 80a2c80:	689b      	ldr	r3, [r3, #8]
 80a2c82:	4718      	bx	r3

080a2c84 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2c84:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2c86:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2c88:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a2c8a:	f7ff fff8 	bl	80a2c7e <_ZN5Print5printEc>
  n += print('\n');
 80a2c8e:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a2c90:	4604      	mov	r4, r0
  n += print('\n');
 80a2c92:	4628      	mov	r0, r5
 80a2c94:	f7ff fff3 	bl	80a2c7e <_ZN5Print5printEc>
  return n;
}
 80a2c98:	4420      	add	r0, r4
 80a2c9a:	bd38      	pop	{r3, r4, r5, pc}

080a2c9c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a2c9c:	b538      	push	{r3, r4, r5, lr}
 80a2c9e:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2ca0:	f7ff ffd9 	bl	80a2c56 <_ZN5Print5writeEPKc>
 80a2ca4:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a2ca6:	4628      	mov	r0, r5
 80a2ca8:	f7ff ffec 	bl	80a2c84 <_ZN5Print7printlnEv>
  return n;
}
 80a2cac:	4420      	add	r0, r4
 80a2cae:	bd38      	pop	{r3, r4, r5, pc}

080a2cb0 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a2cb0:	2a01      	cmp	r2, #1
 80a2cb2:	bf98      	it	ls
 80a2cb4:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a2cb6:	b530      	push	{r4, r5, lr}
 80a2cb8:	460b      	mov	r3, r1
 80a2cba:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a2cbc:	2100      	movs	r1, #0
 80a2cbe:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a2cc2:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a2cc6:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a2cca:	fb05 3312 	mls	r3, r5, r2, r3
 80a2cce:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a2cd0:	2b09      	cmp	r3, #9
 80a2cd2:	bf94      	ite	ls
 80a2cd4:	3330      	addls	r3, #48	; 0x30
 80a2cd6:	3337      	addhi	r3, #55	; 0x37
 80a2cd8:	b2db      	uxtb	r3, r3
 80a2cda:	4621      	mov	r1, r4
 80a2cdc:	f804 3901 	strb.w	r3, [r4], #-1
 80a2ce0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a2ce2:	2d00      	cmp	r5, #0
 80a2ce4:	d1ef      	bne.n	80a2cc6 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a2ce6:	f7ff ffb6 	bl	80a2c56 <_ZN5Print5writeEPKc>
}
 80a2cea:	b00b      	add	sp, #44	; 0x2c
 80a2cec:	bd30      	pop	{r4, r5, pc}

080a2cee <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2cee:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a2cf0:	b922      	cbnz	r2, 80a2cfc <_ZN5Print5printEmi+0xe>
 80a2cf2:	6803      	ldr	r3, [r0, #0]
 80a2cf4:	b2c9      	uxtb	r1, r1
 80a2cf6:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2cf8:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2cfa:	4718      	bx	r3
  else return printNumber(n, base);
 80a2cfc:	b2d2      	uxtb	r2, r2
}
 80a2cfe:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2d00:	f7ff bfd6 	b.w	80a2cb0 <_ZN5Print11printNumberEmh>

080a2d04 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2d04:	f7ff bff3 	b.w	80a2cee <_ZN5Print5printEmi>

080a2d08 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a2d08:	b40c      	push	{r2, r3}
 80a2d0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2d0e:	b087      	sub	sp, #28
 80a2d10:	af00      	add	r7, sp, #0
 80a2d12:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a2d16:	f854 9b04 	ldr.w	r9, [r4], #4
 80a2d1a:	4605      	mov	r5, r0
 80a2d1c:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a2d1e:	4623      	mov	r3, r4
 80a2d20:	464a      	mov	r2, r9
 80a2d22:	2114      	movs	r1, #20
 80a2d24:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a2d26:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a2d28:	f7ff fbb8 	bl	80a249c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a2d2c:	2813      	cmp	r0, #19
 80a2d2e:	d805      	bhi.n	80a2d3c <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2d30:	1d39      	adds	r1, r7, #4
 80a2d32:	4628      	mov	r0, r5
 80a2d34:	f7ff ff8f 	bl	80a2c56 <_ZN5Print5writeEPKc>
 80a2d38:	4604      	mov	r4, r0
 80a2d3a:	e013      	b.n	80a2d64 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2d3c:	f100 0308 	add.w	r3, r0, #8
 80a2d40:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a2d44:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2d46:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a2d4a:	1c41      	adds	r1, r0, #1
 80a2d4c:	4623      	mov	r3, r4
 80a2d4e:	464a      	mov	r2, r9
 80a2d50:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a2d52:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a2d54:	f7ff fba2 	bl	80a249c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2d58:	4669      	mov	r1, sp
 80a2d5a:	4628      	mov	r0, r5
 80a2d5c:	f7ff ff7b 	bl	80a2c56 <_ZN5Print5writeEPKc>
 80a2d60:	4604      	mov	r4, r0
 80a2d62:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a2d64:	b11e      	cbz	r6, 80a2d6e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a2d66:	4628      	mov	r0, r5
 80a2d68:	f7ff ff8c 	bl	80a2c84 <_ZN5Print7printlnEv>
 80a2d6c:	4404      	add	r4, r0
    return n;
}
 80a2d6e:	4620      	mov	r0, r4
 80a2d70:	371c      	adds	r7, #28
 80a2d72:	46bd      	mov	sp, r7
 80a2d74:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2d78:	b002      	add	sp, #8
 80a2d7a:	4770      	bx	lr

080a2d7c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2d7c:	2300      	movs	r3, #0
 80a2d7e:	461a      	mov	r2, r3
 80a2d80:	4619      	mov	r1, r3
 80a2d82:	6840      	ldr	r0, [r0, #4]
 80a2d84:	f7ff bafa 	b.w	80a237c <network_on>

080a2d88 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2d88:	4a01      	ldr	r2, [pc, #4]	; (80a2d90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2d8a:	4b02      	ldr	r3, [pc, #8]	; (80a2d94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2d8c:	601a      	str	r2, [r3, #0]
 80a2d8e:	4770      	bx	lr
 80a2d90:	080a599d 	.word	0x080a599d
 80a2d94:	200005e4 	.word	0x200005e4

080a2d98 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2d98:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80a2d9a:	4b14      	ldr	r3, [pc, #80]	; (80a2dec <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2d9c:	4f14      	ldr	r7, [pc, #80]	; (80a2df0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a2d9e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80a2da0:	4b14      	ldr	r3, [pc, #80]	; (80a2df4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80a2da2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80a2da4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80a2da6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80a2da8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80a2daa:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80a2dac:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80a2dae:	d01b      	beq.n	80a2de8 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80a2db0:	a80a      	add	r0, sp, #40	; 0x28
 80a2db2:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80a2db6:	f001 fd05 	bl	80a47c4 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a2dba:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a2dbc:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80a2dbe:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80a2dc0:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80a2dc4:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80a2dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2dce:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2dd2:	4c09      	ldr	r4, [pc, #36]	; (80a2df8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80a2dd4:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2dd8:	ad01      	add	r5, sp, #4
 80a2dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2dde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2de0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 80a2de2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 80a2de4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 80a2de8:	b00b      	add	sp, #44	; 0x2c
 80a2dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2dec:	20000618 	.word	0x20000618
 80a2df0:	20000614 	.word	0x20000614
 80a2df4:	20000610 	.word	0x20000610
 80a2df8:	200005e8 	.word	0x200005e8

080a2dfc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80a2dfc:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a2dfe:	2000      	movs	r0, #0
 80a2e00:	f7ff fb04 	bl	80a240c <spark_sync_time_pending>
 80a2e04:	b128      	cbz	r0, 80a2e12 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a2e06:	f7ff faf1 	bl	80a23ec <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80a2e0a:	f080 0001 	eor.w	r0, r0, #1
 80a2e0e:	b2c0      	uxtb	r0, r0
 80a2e10:	bd08      	pop	{r3, pc}
 80a2e12:	2001      	movs	r0, #1
    }
 80a2e14:	bd08      	pop	{r3, pc}
	...

080a2e18 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2e18:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80a2e1a:	4b0e      	ldr	r3, [pc, #56]	; (80a2e54 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80a2e1c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80a2e1e:	681b      	ldr	r3, [r3, #0]
 80a2e20:	a802      	add	r0, sp, #8
 80a2e22:	4419      	add	r1, r3
 80a2e24:	4b0c      	ldr	r3, [pc, #48]	; (80a2e58 <_ZN9TimeClass7timeStrEl+0x40>)
 80a2e26:	681b      	ldr	r3, [r3, #0]
 80a2e28:	4419      	add	r1, r3
 80a2e2a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80a2e2e:	f001 fcc9 	bl	80a47c4 <localtime>
        char* ascstr = asctime(calendar_time);
 80a2e32:	f001 fc7d 	bl	80a4730 <asctime>
 80a2e36:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80a2e38:	f001 fe0a 	bl	80a4a50 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80a2e3c:	2300      	movs	r3, #0
 80a2e3e:	4428      	add	r0, r5
 80a2e40:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80a2e44:	4629      	mov	r1, r5
 80a2e46:	4620      	mov	r0, r4
 80a2e48:	f7ff fecb 	bl	80a2be2 <_ZN6StringC1EPK19__FlashStringHelper>
}
 80a2e4c:	4620      	mov	r0, r4
 80a2e4e:	b003      	add	sp, #12
 80a2e50:	bd30      	pop	{r4, r5, pc}
 80a2e52:	bf00      	nop
 80a2e54:	20000618 	.word	0x20000618
 80a2e58:	20000610 	.word	0x20000610

080a2e5c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 80a2e5c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 80a2e5e:	2000      	movs	r0, #0
 80a2e60:	f7ff f8ce 	bl	80a2000 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 80a2e64:	4604      	mov	r4, r0
 80a2e66:	b968      	cbnz	r0, 80a2e84 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 80a2e68:	f7ff fa2c 	bl	80a22c4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 80a2e6c:	2801      	cmp	r0, #1
 80a2e6e:	d10b      	bne.n	80a2e88 <_ZN9TimeClass7isValidEv+0x2c>
 80a2e70:	4620      	mov	r0, r4
 80a2e72:	f7ff fa47 	bl	80a2304 <system_thread_get_state>
 80a2e76:	b938      	cbnz	r0, 80a2e88 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80a2e78:	f7ff ffc0 	bl	80a2dfc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80a2e7c:	b930      	cbnz	r0, 80a2e8c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80a2e7e:	f7ff faad 	bl	80a23dc <spark_process>
 80a2e82:	e7f9      	b.n	80a2e78 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80a2e84:	2001      	movs	r0, #1
 80a2e86:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80a2e88:	2000      	movs	r0, #0
 80a2e8a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80a2e8c:	f7ff ffb6 	bl	80a2dfc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80a2e90:	2000      	movs	r0, #0
 80a2e92:	f7ff f8b5 	bl	80a2000 <HAL_RTC_Time_Is_Valid>
 80a2e96:	3000      	adds	r0, #0
 80a2e98:	bf18      	it	ne
 80a2e9a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80a2e9c:	bd10      	pop	{r4, pc}

080a2e9e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80a2e9e:	b508      	push	{r3, lr}
    (void)isValid();
 80a2ea0:	f7ff ffdc 	bl	80a2e5c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80a2ea4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80a2ea8:	f7ff b8a2 	b.w	80a1ff0 <HAL_RTC_Get_UnixTime>

080a2eac <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 80a2eac:	b508      	push	{r3, lr}
	return second(now());
 80a2eae:	f7ff fff6 	bl	80a2e9e <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80a2eb2:	f7ff ff71 	bl	80a2d98 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 80a2eb6:	4b01      	ldr	r3, [pc, #4]	; (80a2ebc <_ZN9TimeClass6secondEv+0x10>)
 80a2eb8:	6818      	ldr	r0, [r3, #0]
 80a2eba:	bd08      	pop	{r3, pc}
 80a2ebc:	200005e8 	.word	0x200005e8

080a2ec0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2ec0:	4b02      	ldr	r3, [pc, #8]	; (80a2ecc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2ec2:	681a      	ldr	r2, [r3, #0]
 80a2ec4:	4b02      	ldr	r3, [pc, #8]	; (80a2ed0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2ec6:	601a      	str	r2, [r3, #0]
 80a2ec8:	4770      	bx	lr
 80a2eca:	bf00      	nop
 80a2ecc:	2000044c 	.word	0x2000044c
 80a2ed0:	2000060c 	.word	0x2000060c

080a2ed4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2ed4:	2100      	movs	r1, #0
 80a2ed6:	f7ff ba05 	b.w	80a22e4 <system_delay_ms>

080a2eda <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2eda:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2edc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2ede:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2ee0:	b113      	cbz	r3, 80a2ee8 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2ee2:	2203      	movs	r2, #3
 80a2ee4:	4601      	mov	r1, r0
 80a2ee6:	4798      	blx	r3
    }
 80a2ee8:	4620      	mov	r0, r4
 80a2eea:	bd10      	pop	{r4, pc}

080a2eec <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2eec:	b510      	push	{r4, lr}
 80a2eee:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2ef0:	f7ff fff3 	bl	80a2eda <_ZNSt14_Function_baseD1Ev>
 80a2ef4:	4620      	mov	r0, r4
 80a2ef6:	bd10      	pop	{r4, pc}

080a2ef8 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2ef8:	4803      	ldr	r0, [pc, #12]	; (80a2f08 <_GLOBAL__sub_I_RGB+0x10>)
 80a2efa:	2300      	movs	r3, #0
 80a2efc:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2efe:	4a03      	ldr	r2, [pc, #12]	; (80a2f0c <_GLOBAL__sub_I_RGB+0x14>)
 80a2f00:	4903      	ldr	r1, [pc, #12]	; (80a2f10 <_GLOBAL__sub_I_RGB+0x18>)
 80a2f02:	f000 bc5f 	b.w	80a37c4 <__aeabi_atexit>
 80a2f06:	bf00      	nop
 80a2f08:	2000061c 	.word	0x2000061c
 80a2f0c:	20000504 	.word	0x20000504
 80a2f10:	080a2eed 	.word	0x080a2eed

080a2f14 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2f14:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2f16:	4b14      	ldr	r3, [pc, #80]	; (80a2f68 <serialEventRun+0x54>)
 80a2f18:	b133      	cbz	r3, 80a2f28 <serialEventRun+0x14>
 80a2f1a:	f000 f987 	bl	80a322c <_Z16_fetch_usbserialv>
 80a2f1e:	6803      	ldr	r3, [r0, #0]
 80a2f20:	691b      	ldr	r3, [r3, #16]
 80a2f22:	4798      	blx	r3
 80a2f24:	2800      	cmp	r0, #0
 80a2f26:	dc16      	bgt.n	80a2f56 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2f28:	4b10      	ldr	r3, [pc, #64]	; (80a2f6c <serialEventRun+0x58>)
 80a2f2a:	b133      	cbz	r3, 80a2f3a <serialEventRun+0x26>
 80a2f2c:	f000 fa3c 	bl	80a33a8 <_Z22__fetch_global_Serial1v>
 80a2f30:	6803      	ldr	r3, [r0, #0]
 80a2f32:	691b      	ldr	r3, [r3, #16]
 80a2f34:	4798      	blx	r3
 80a2f36:	2800      	cmp	r0, #0
 80a2f38:	dc10      	bgt.n	80a2f5c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2f3a:	4b0d      	ldr	r3, [pc, #52]	; (80a2f70 <serialEventRun+0x5c>)
 80a2f3c:	b10b      	cbz	r3, 80a2f42 <serialEventRun+0x2e>
 80a2f3e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2f42:	4b0c      	ldr	r3, [pc, #48]	; (80a2f74 <serialEventRun+0x60>)
 80a2f44:	b17b      	cbz	r3, 80a2f66 <serialEventRun+0x52>
 80a2f46:	f000 f9ad 	bl	80a32a4 <_Z17_fetch_usbserial1v>
 80a2f4a:	6803      	ldr	r3, [r0, #0]
 80a2f4c:	691b      	ldr	r3, [r3, #16]
 80a2f4e:	4798      	blx	r3
 80a2f50:	2800      	cmp	r0, #0
 80a2f52:	dc06      	bgt.n	80a2f62 <serialEventRun+0x4e>
 80a2f54:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2f56:	f3af 8000 	nop.w
 80a2f5a:	e7e5      	b.n	80a2f28 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2f5c:	f3af 8000 	nop.w
 80a2f60:	e7eb      	b.n	80a2f3a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2f62:	f3af 8000 	nop.w
 80a2f66:	bd08      	pop	{r3, pc}
	...

080a2f78 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2f78:	b508      	push	{r3, lr}
	serialEventRun();
 80a2f7a:	f7ff ffcb 	bl	80a2f14 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2f7e:	f7ff f82f 	bl	80a1fe0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2f82:	4b01      	ldr	r3, [pc, #4]	; (80a2f88 <_post_loop+0x10>)
 80a2f84:	6018      	str	r0, [r3, #0]
 80a2f86:	bd08      	pop	{r3, pc}
 80a2f88:	20000ac0 	.word	0x20000ac0

080a2f8c <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2f8c:	4802      	ldr	r0, [pc, #8]	; (80a2f98 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2f8e:	4a03      	ldr	r2, [pc, #12]	; (80a2f9c <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2f90:	4903      	ldr	r1, [pc, #12]	; (80a2fa0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2f92:	1a12      	subs	r2, r2, r0
 80a2f94:	f001 bd0e 	b.w	80a49b4 <memcpy>
 80a2f98:	40024000 	.word	0x40024000
 80a2f9c:	40024008 	.word	0x40024008
 80a2fa0:	080a5de8 	.word	0x080a5de8

080a2fa4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2fa4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2fa6:	2300      	movs	r3, #0
 80a2fa8:	9300      	str	r3, [sp, #0]
 80a2faa:	461a      	mov	r2, r3
 80a2fac:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2fb0:	f7ff f9ba 	bl	80a2328 <system_ctrl_set_result>
}
 80a2fb4:	b003      	add	sp, #12
 80a2fb6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2fbc <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2fbc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2fbe:	8843      	ldrh	r3, [r0, #2]
 80a2fc0:	2b0a      	cmp	r3, #10
 80a2fc2:	d008      	beq.n	80a2fd6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2fc4:	2b50      	cmp	r3, #80	; 0x50
 80a2fc6:	d109      	bne.n	80a2fdc <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2fc8:	4b09      	ldr	r3, [pc, #36]	; (80a2ff0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2fca:	681b      	ldr	r3, [r3, #0]
 80a2fcc:	b13b      	cbz	r3, 80a2fde <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2fce:	b003      	add	sp, #12
 80a2fd0:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2fd4:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2fd6:	f7ff ffe5 	bl	80a2fa4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2fda:	e006      	b.n	80a2fea <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2fdc:	2300      	movs	r3, #0
 80a2fde:	9300      	str	r3, [sp, #0]
 80a2fe0:	461a      	mov	r2, r3
 80a2fe2:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2fe6:	f7ff f99f 	bl	80a2328 <system_ctrl_set_result>
        break;
    }
}
 80a2fea:	b003      	add	sp, #12
 80a2fec:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2ff0:	2000062c 	.word	0x2000062c

080a2ff4 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2ff4:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2ff6:	4c10      	ldr	r4, [pc, #64]	; (80a3038 <module_user_init_hook+0x44>)
 80a2ff8:	4d10      	ldr	r5, [pc, #64]	; (80a303c <module_user_init_hook+0x48>)
 80a2ffa:	6823      	ldr	r3, [r4, #0]
 80a2ffc:	42ab      	cmp	r3, r5
 80a2ffe:	4b10      	ldr	r3, [pc, #64]	; (80a3040 <module_user_init_hook+0x4c>)
 80a3000:	bf0c      	ite	eq
 80a3002:	2201      	moveq	r2, #1
 80a3004:	2200      	movne	r2, #0
 80a3006:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3008:	d002      	beq.n	80a3010 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a300a:	f7ff ffbf 	bl	80a2f8c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a300e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3010:	f7fe ffd6 	bl	80a1fc0 <HAL_RNG_GetRandomNumber>
 80a3014:	4604      	mov	r4, r0
    srand(seed);
 80a3016:	f001 fce1 	bl	80a49dc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a301a:	4b0a      	ldr	r3, [pc, #40]	; (80a3044 <module_user_init_hook+0x50>)
 80a301c:	b113      	cbz	r3, 80a3024 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a301e:	4620      	mov	r0, r4
 80a3020:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3024:	2100      	movs	r1, #0
 80a3026:	4807      	ldr	r0, [pc, #28]	; (80a3044 <module_user_init_hook+0x50>)
 80a3028:	f7ff fa00 	bl	80a242c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a302c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3030:	2100      	movs	r1, #0
 80a3032:	4805      	ldr	r0, [pc, #20]	; (80a3048 <module_user_init_hook+0x54>)
 80a3034:	f7ff b96e 	b.w	80a2314 <system_ctrl_set_app_request_handler>
 80a3038:	40024004 	.word	0x40024004
 80a303c:	9a271c1e 	.word	0x9a271c1e
 80a3040:	20000630 	.word	0x20000630
 80a3044:	00000000 	.word	0x00000000
 80a3048:	080a2fbd 	.word	0x080a2fbd

080a304c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a304c:	4770      	bx	lr

080a304e <_ZN9IPAddressD0Ev>:
 80a304e:	b510      	push	{r4, lr}
 80a3050:	4604      	mov	r4, r0
 80a3052:	2118      	movs	r1, #24
 80a3054:	f000 fbbb 	bl	80a37ce <_ZdlPvj>
 80a3058:	4620      	mov	r0, r4
 80a305a:	bd10      	pop	{r4, pc}

080a305c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a305c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a305e:	460f      	mov	r7, r1
 80a3060:	f100 0608 	add.w	r6, r0, #8
 80a3064:	1d05      	adds	r5, r0, #4
 80a3066:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3068:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a306c:	220a      	movs	r2, #10
 80a306e:	4638      	mov	r0, r7
 80a3070:	f7ff fe48 	bl	80a2d04 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3074:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3076:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3078:	d007      	beq.n	80a308a <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a307a:	2c00      	cmp	r4, #0
 80a307c:	d0f4      	beq.n	80a3068 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a307e:	212e      	movs	r1, #46	; 0x2e
 80a3080:	4638      	mov	r0, r7
 80a3082:	f7ff fdfc 	bl	80a2c7e <_ZN5Print5printEc>
 80a3086:	4404      	add	r4, r0
 80a3088:	e7ee      	b.n	80a3068 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a308a:	4620      	mov	r0, r4
 80a308c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a3090 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a3090:	b510      	push	{r4, lr}
 80a3092:	4604      	mov	r4, r0
 80a3094:	4b04      	ldr	r3, [pc, #16]	; (80a30a8 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3096:	2211      	movs	r2, #17
 80a3098:	f840 3b04 	str.w	r3, [r0], #4
 80a309c:	2100      	movs	r1, #0
 80a309e:	f001 fc94 	bl	80a49ca <memset>
{
    clear();
}
 80a30a2:	4620      	mov	r0, r4
 80a30a4:	bd10      	pop	{r4, pc}
 80a30a6:	bf00      	nop
 80a30a8:	080a5a34 	.word	0x080a5a34

080a30ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a30ac:	4603      	mov	r3, r0
 80a30ae:	4a07      	ldr	r2, [pc, #28]	; (80a30cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a30b0:	b510      	push	{r4, lr}
 80a30b2:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a30b6:	f101 0210 	add.w	r2, r1, #16
 80a30ba:	f851 4b04 	ldr.w	r4, [r1], #4
 80a30be:	4291      	cmp	r1, r2
 80a30c0:	f843 4b04 	str.w	r4, [r3], #4
 80a30c4:	d1f9      	bne.n	80a30ba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a30c6:	780a      	ldrb	r2, [r1, #0]
 80a30c8:	701a      	strb	r2, [r3, #0]
}
 80a30ca:	bd10      	pop	{r4, pc}
 80a30cc:	080a5a34 	.word	0x080a5a34

080a30d0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a30d0:	4a02      	ldr	r2, [pc, #8]	; (80a30dc <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a30d2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a30d4:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a30d6:	2204      	movs	r2, #4
 80a30d8:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a30da:	4770      	bx	lr
 80a30dc:	080a5a34 	.word	0x080a5a34

080a30e0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a30e0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a30e2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a30e6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a30ea:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a30ee:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a30f2:	2304      	movs	r3, #4
 80a30f4:	6041      	str	r1, [r0, #4]
 80a30f6:	7503      	strb	r3, [r0, #20]
 80a30f8:	bd10      	pop	{r4, pc}
	...

080a30fc <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a30fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a30fe:	4d04      	ldr	r5, [pc, #16]	; (80a3110 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a3100:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a3102:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a3106:	9500      	str	r5, [sp, #0]
 80a3108:	f7ff ffea 	bl	80a30e0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a310c:	b003      	add	sp, #12
 80a310e:	bd30      	pop	{r4, r5, pc}
 80a3110:	080a5a34 	.word	0x080a5a34

080a3114 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a3114:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a3116:	780d      	ldrb	r5, [r1, #0]
 80a3118:	788b      	ldrb	r3, [r1, #2]
 80a311a:	784a      	ldrb	r2, [r1, #1]
 80a311c:	78c9      	ldrb	r1, [r1, #3]
 80a311e:	9100      	str	r1, [sp, #0]
 80a3120:	4629      	mov	r1, r5
 80a3122:	f7ff ffdd 	bl	80a30e0 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a3126:	b003      	add	sp, #12
 80a3128:	bd30      	pop	{r4, r5, pc}
	...

080a312c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a312c:	b510      	push	{r4, lr}
 80a312e:	4604      	mov	r4, r0
 80a3130:	4b02      	ldr	r3, [pc, #8]	; (80a313c <_ZN9IPAddressC1EPKh+0x10>)
 80a3132:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a3134:	f7ff ffee 	bl	80a3114 <_ZN9IPAddressaSEPKh>
}
 80a3138:	4620      	mov	r0, r4
 80a313a:	bd10      	pop	{r4, pc}
 80a313c:	080a5a34 	.word	0x080a5a34

080a3140 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3140:	7441      	strb	r1, [r0, #17]
 80a3142:	4770      	bx	lr

080a3144 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3144:	4770      	bx	lr

080a3146 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a3146:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3148:	2100      	movs	r1, #0
 80a314a:	7c00      	ldrb	r0, [r0, #16]
 80a314c:	f7ff f87a 	bl	80a2244 <HAL_USB_USART_Receive_Data>
}
 80a3150:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3154:	bf28      	it	cs
 80a3156:	f04f 30ff 	movcs.w	r0, #4294967295
 80a315a:	bd08      	pop	{r3, pc}

080a315c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a315c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a315e:	2101      	movs	r1, #1
 80a3160:	7c00      	ldrb	r0, [r0, #16]
 80a3162:	f7ff f86f 	bl	80a2244 <HAL_USB_USART_Receive_Data>
}
 80a3166:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a316a:	bf28      	it	cs
 80a316c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a3170:	bd08      	pop	{r3, pc}

080a3172 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a3172:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3174:	7c00      	ldrb	r0, [r0, #16]
 80a3176:	f7ff f85d 	bl	80a2234 <HAL_USB_USART_Available_Data_For_Write>
}
 80a317a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a317e:	bd08      	pop	{r3, pc}

080a3180 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a3180:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a3182:	7c00      	ldrb	r0, [r0, #16]
 80a3184:	f7ff f84e 	bl	80a2224 <HAL_USB_USART_Available_Data>
}
 80a3188:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a318c:	bd08      	pop	{r3, pc}

080a318e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a318e:	7c00      	ldrb	r0, [r0, #16]
 80a3190:	f7ff b868 	b.w	80a2264 <HAL_USB_USART_Flush_Data>

080a3194 <_ZN9USBSerialD0Ev>:
 80a3194:	b510      	push	{r4, lr}
 80a3196:	4604      	mov	r4, r0
 80a3198:	2114      	movs	r1, #20
 80a319a:	f000 fb18 	bl	80a37ce <_ZdlPvj>
 80a319e:	4620      	mov	r0, r4
 80a31a0:	bd10      	pop	{r4, pc}

080a31a2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a31a2:	b538      	push	{r3, r4, r5, lr}
 80a31a4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a31a6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a31a8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a31aa:	f7ff f843 	bl	80a2234 <HAL_USB_USART_Available_Data_For_Write>
 80a31ae:	2800      	cmp	r0, #0
 80a31b0:	dc01      	bgt.n	80a31b6 <_ZN9USBSerial5writeEh+0x14>
 80a31b2:	7c60      	ldrb	r0, [r4, #17]
 80a31b4:	b128      	cbz	r0, 80a31c2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a31b6:	4629      	mov	r1, r5
 80a31b8:	7c20      	ldrb	r0, [r4, #16]
 80a31ba:	f7ff f84b 	bl	80a2254 <HAL_USB_USART_Send_Data>
 80a31be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a31c2:	bd38      	pop	{r3, r4, r5, pc}

080a31c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a31c4:	b510      	push	{r4, lr}
 80a31c6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a31c8:	2300      	movs	r3, #0
 80a31ca:	6063      	str	r3, [r4, #4]
 80a31cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a31d0:	60a3      	str	r3, [r4, #8]
 80a31d2:	4b05      	ldr	r3, [pc, #20]	; (80a31e8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a31d4:	4608      	mov	r0, r1
 80a31d6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a31d8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a31da:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a31dc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a31de:	4611      	mov	r1, r2
 80a31e0:	f7ff f810 	bl	80a2204 <HAL_USB_USART_Init>
}
 80a31e4:	4620      	mov	r0, r4
 80a31e6:	bd10      	pop	{r4, pc}
 80a31e8:	080a5a48 	.word	0x080a5a48

080a31ec <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a31ec:	2200      	movs	r2, #0
 80a31ee:	7c00      	ldrb	r0, [r0, #16]
 80a31f0:	f7ff b810 	b.w	80a2214 <HAL_USB_USART_Begin>

080a31f4 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a31f4:	7c00      	ldrb	r0, [r0, #16]
 80a31f6:	f7ff b83d 	b.w	80a2274 <HAL_USB_USART_Is_Enabled>

080a31fa <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a31fa:	f7ff bffb 	b.w	80a31f4 <_ZN9USBSerial9isEnabledEv>
	...

080a3200 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3200:	b510      	push	{r4, lr}
 80a3202:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3204:	2214      	movs	r2, #20
 80a3206:	2100      	movs	r1, #0
 80a3208:	f001 fbdf 	bl	80a49ca <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a320c:	4b05      	ldr	r3, [pc, #20]	; (80a3224 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a320e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3210:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3212:	4b05      	ldr	r3, [pc, #20]	; (80a3228 <_Z19acquireSerialBufferv+0x28>)
 80a3214:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3216:	f240 1301 	movw	r3, #257	; 0x101
 80a321a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a321c:	2381      	movs	r3, #129	; 0x81
 80a321e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3220:	bd10      	pop	{r4, pc}
 80a3222:	bf00      	nop
 80a3224:	200006b9 	.word	0x200006b9
 80a3228:	20000638 	.word	0x20000638

080a322c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a322c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a322e:	4d0e      	ldr	r5, [pc, #56]	; (80a3268 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3230:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3232:	a801      	add	r0, sp, #4
 80a3234:	f7ff ffe4 	bl	80a3200 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3238:	6829      	ldr	r1, [r5, #0]
 80a323a:	f011 0401 	ands.w	r4, r1, #1
 80a323e:	d110      	bne.n	80a3262 <_Z16_fetch_usbserialv+0x36>
 80a3240:	4628      	mov	r0, r5
 80a3242:	f7fc ff3d 	bl	80a00c0 <__cxa_guard_acquire>
 80a3246:	b160      	cbz	r0, 80a3262 <_Z16_fetch_usbserialv+0x36>
 80a3248:	aa01      	add	r2, sp, #4
 80a324a:	4621      	mov	r1, r4
 80a324c:	4807      	ldr	r0, [pc, #28]	; (80a326c <_Z16_fetch_usbserialv+0x40>)
 80a324e:	f7ff ffb9 	bl	80a31c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3252:	4628      	mov	r0, r5
 80a3254:	f7fc ff39 	bl	80a00ca <__cxa_guard_release>
 80a3258:	4a05      	ldr	r2, [pc, #20]	; (80a3270 <_Z16_fetch_usbserialv+0x44>)
 80a325a:	4906      	ldr	r1, [pc, #24]	; (80a3274 <_Z16_fetch_usbserialv+0x48>)
 80a325c:	4803      	ldr	r0, [pc, #12]	; (80a326c <_Z16_fetch_usbserialv+0x40>)
 80a325e:	f000 fab1 	bl	80a37c4 <__aeabi_atexit>
	return _usbserial;
}
 80a3262:	4802      	ldr	r0, [pc, #8]	; (80a326c <_Z16_fetch_usbserialv+0x40>)
 80a3264:	b007      	add	sp, #28
 80a3266:	bd30      	pop	{r4, r5, pc}
 80a3268:	20000634 	.word	0x20000634
 80a326c:	200007bc 	.word	0x200007bc
 80a3270:	20000504 	.word	0x20000504
 80a3274:	080a3145 	.word	0x080a3145

080a3278 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3278:	b510      	push	{r4, lr}
 80a327a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a327c:	2214      	movs	r2, #20
 80a327e:	2100      	movs	r1, #0
 80a3280:	f001 fba3 	bl	80a49ca <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3284:	4b05      	ldr	r3, [pc, #20]	; (80a329c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3286:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3288:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a328a:	4b05      	ldr	r3, [pc, #20]	; (80a32a0 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a328c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a328e:	f240 1301 	movw	r3, #257	; 0x101
 80a3292:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3294:	2381      	movs	r3, #129	; 0x81
 80a3296:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3298:	bd10      	pop	{r4, pc}
 80a329a:	bf00      	nop
 80a329c:	2000086c 	.word	0x2000086c
 80a32a0:	200007d4 	.word	0x200007d4

080a32a4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a32a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a32a6:	4c0e      	ldr	r4, [pc, #56]	; (80a32e0 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a32a8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a32aa:	a801      	add	r0, sp, #4
 80a32ac:	f7ff ffe4 	bl	80a3278 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a32b0:	6823      	ldr	r3, [r4, #0]
 80a32b2:	07db      	lsls	r3, r3, #31
 80a32b4:	d410      	bmi.n	80a32d8 <_Z17_fetch_usbserial1v+0x34>
 80a32b6:	4620      	mov	r0, r4
 80a32b8:	f7fc ff02 	bl	80a00c0 <__cxa_guard_acquire>
 80a32bc:	b160      	cbz	r0, 80a32d8 <_Z17_fetch_usbserial1v+0x34>
 80a32be:	aa01      	add	r2, sp, #4
 80a32c0:	2101      	movs	r1, #1
 80a32c2:	4808      	ldr	r0, [pc, #32]	; (80a32e4 <_Z17_fetch_usbserial1v+0x40>)
 80a32c4:	f7ff ff7e 	bl	80a31c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a32c8:	4620      	mov	r0, r4
 80a32ca:	f7fc fefe 	bl	80a00ca <__cxa_guard_release>
 80a32ce:	4a06      	ldr	r2, [pc, #24]	; (80a32e8 <_Z17_fetch_usbserial1v+0x44>)
 80a32d0:	4906      	ldr	r1, [pc, #24]	; (80a32ec <_Z17_fetch_usbserial1v+0x48>)
 80a32d2:	4804      	ldr	r0, [pc, #16]	; (80a32e4 <_Z17_fetch_usbserial1v+0x40>)
 80a32d4:	f000 fa76 	bl	80a37c4 <__aeabi_atexit>
  return _usbserial1;
}
 80a32d8:	4802      	ldr	r0, [pc, #8]	; (80a32e4 <_Z17_fetch_usbserial1v+0x40>)
 80a32da:	b006      	add	sp, #24
 80a32dc:	bd10      	pop	{r4, pc}
 80a32de:	bf00      	nop
 80a32e0:	200007d0 	.word	0x200007d0
 80a32e4:	20000858 	.word	0x20000858
 80a32e8:	20000504 	.word	0x20000504
 80a32ec:	080a3145 	.word	0x080a3145

080a32f0 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a32f0:	4770      	bx	lr

080a32f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a32f2:	7441      	strb	r1, [r0, #17]
 80a32f4:	4770      	bx	lr

080a32f6 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a32f6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a32f8:	7c00      	ldrb	r0, [r0, #16]
 80a32fa:	f7fe fee1 	bl	80a20c0 <HAL_USART_Available_Data_For_Write>
}
 80a32fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3302:	bd08      	pop	{r3, pc}

080a3304 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a3304:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a3306:	7c00      	ldrb	r0, [r0, #16]
 80a3308:	f7fe feb2 	bl	80a2070 <HAL_USART_Available_Data>
}
 80a330c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3310:	bd08      	pop	{r3, pc}

080a3312 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a3312:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a3314:	7c00      	ldrb	r0, [r0, #16]
 80a3316:	f7fe febb 	bl	80a2090 <HAL_USART_Peek_Data>
}
 80a331a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a331e:	bf28      	it	cs
 80a3320:	f04f 30ff 	movcs.w	r0, #4294967295
 80a3324:	bd08      	pop	{r3, pc}

080a3326 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a3326:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a3328:	7c00      	ldrb	r0, [r0, #16]
 80a332a:	f7fe fea9 	bl	80a2080 <HAL_USART_Read_Data>
}
 80a332e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3332:	bf28      	it	cs
 80a3334:	f04f 30ff 	movcs.w	r0, #4294967295
 80a3338:	bd08      	pop	{r3, pc}

080a333a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a333a:	7c00      	ldrb	r0, [r0, #16]
 80a333c:	f7fe beb0 	b.w	80a20a0 <HAL_USART_Flush_Data>

080a3340 <_ZN11USARTSerialD0Ev>:
 80a3340:	b510      	push	{r4, lr}
 80a3342:	4604      	mov	r4, r0
 80a3344:	2114      	movs	r1, #20
 80a3346:	f000 fa42 	bl	80a37ce <_ZdlPvj>
 80a334a:	4620      	mov	r0, r4
 80a334c:	bd10      	pop	{r4, pc}

080a334e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a334e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3350:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a3352:	4604      	mov	r4, r0
 80a3354:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a3356:	b925      	cbnz	r5, 80a3362 <_ZN11USARTSerial5writeEh+0x14>
 80a3358:	7c00      	ldrb	r0, [r0, #16]
 80a335a:	f7fe feb1 	bl	80a20c0 <HAL_USART_Available_Data_For_Write>
 80a335e:	2800      	cmp	r0, #0
 80a3360:	dd05      	ble.n	80a336e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a3362:	4631      	mov	r1, r6
 80a3364:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a3366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a336a:	f7fe be79 	b.w	80a2060 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a336e:	4628      	mov	r0, r5
 80a3370:	bd70      	pop	{r4, r5, r6, pc}
	...

080a3374 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a3374:	b510      	push	{r4, lr}
 80a3376:	4604      	mov	r4, r0
 80a3378:	4608      	mov	r0, r1
 80a337a:	4611      	mov	r1, r2
 80a337c:	2200      	movs	r2, #0
 80a337e:	6062      	str	r2, [r4, #4]
 80a3380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a3384:	60a2      	str	r2, [r4, #8]
 80a3386:	4a05      	ldr	r2, [pc, #20]	; (80a339c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a3388:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a338a:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a338c:	2201      	movs	r2, #1
 80a338e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a3390:	461a      	mov	r2, r3
 80a3392:	f7fe fe5d 	bl	80a2050 <HAL_USART_Init>
}
 80a3396:	4620      	mov	r0, r4
 80a3398:	bd10      	pop	{r4, pc}
 80a339a:	bf00      	nop
 80a339c:	080a5a78 	.word	0x080a5a78

080a33a0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a33a0:	7c00      	ldrb	r0, [r0, #16]
 80a33a2:	f7fe be85 	b.w	80a20b0 <HAL_USART_Is_Enabled>
	...

080a33a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a33a8:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a33aa:	4d0c      	ldr	r5, [pc, #48]	; (80a33dc <_Z22__fetch_global_Serial1v+0x34>)
 80a33ac:	6829      	ldr	r1, [r5, #0]
 80a33ae:	f011 0401 	ands.w	r4, r1, #1
 80a33b2:	d111      	bne.n	80a33d8 <_Z22__fetch_global_Serial1v+0x30>
 80a33b4:	4628      	mov	r0, r5
 80a33b6:	f7fc fe83 	bl	80a00c0 <__cxa_guard_acquire>
 80a33ba:	b168      	cbz	r0, 80a33d8 <_Z22__fetch_global_Serial1v+0x30>
 80a33bc:	4a08      	ldr	r2, [pc, #32]	; (80a33e0 <_Z22__fetch_global_Serial1v+0x38>)
 80a33be:	4621      	mov	r1, r4
 80a33c0:	4b08      	ldr	r3, [pc, #32]	; (80a33e4 <_Z22__fetch_global_Serial1v+0x3c>)
 80a33c2:	4809      	ldr	r0, [pc, #36]	; (80a33e8 <_Z22__fetch_global_Serial1v+0x40>)
 80a33c4:	f7ff ffd6 	bl	80a3374 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a33c8:	4628      	mov	r0, r5
 80a33ca:	f7fc fe7e 	bl	80a00ca <__cxa_guard_release>
 80a33ce:	4a07      	ldr	r2, [pc, #28]	; (80a33ec <_Z22__fetch_global_Serial1v+0x44>)
 80a33d0:	4907      	ldr	r1, [pc, #28]	; (80a33f0 <_Z22__fetch_global_Serial1v+0x48>)
 80a33d2:	4805      	ldr	r0, [pc, #20]	; (80a33e8 <_Z22__fetch_global_Serial1v+0x40>)
 80a33d4:	f000 f9f6 	bl	80a37c4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a33d8:	4803      	ldr	r0, [pc, #12]	; (80a33e8 <_Z22__fetch_global_Serial1v+0x40>)
 80a33da:	bd38      	pop	{r3, r4, r5, pc}
 80a33dc:	20000a08 	.word	0x20000a08
 80a33e0:	20000a0c 	.word	0x20000a0c
 80a33e4:	20000984 	.word	0x20000984
 80a33e8:	20000970 	.word	0x20000970
 80a33ec:	20000504 	.word	0x20000504
 80a33f0:	080a32f1 	.word	0x080a32f1

080a33f4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a33f4:	4770      	bx	lr

080a33f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a33f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a33f8:	4606      	mov	r6, r0
 80a33fa:	4615      	mov	r5, r2
 80a33fc:	460c      	mov	r4, r1
 80a33fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3400:	42bc      	cmp	r4, r7
 80a3402:	d006      	beq.n	80a3412 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3404:	6833      	ldr	r3, [r6, #0]
 80a3406:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a340a:	689b      	ldr	r3, [r3, #8]
 80a340c:	4630      	mov	r0, r6
 80a340e:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a3410:	e7f6      	b.n	80a3400 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a3412:	4628      	mov	r0, r5
 80a3414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3416 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a3416:	2200      	movs	r2, #0
 80a3418:	7c00      	ldrb	r0, [r0, #16]
 80a341a:	f7fe be79 	b.w	80a2110 <HAL_I2C_Write_Data>

080a341e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a341e:	2100      	movs	r1, #0
 80a3420:	7c00      	ldrb	r0, [r0, #16]
 80a3422:	f7fe be7d 	b.w	80a2120 <HAL_I2C_Available_Data>

080a3426 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a3426:	2100      	movs	r1, #0
 80a3428:	7c00      	ldrb	r0, [r0, #16]
 80a342a:	f7fe be81 	b.w	80a2130 <HAL_I2C_Read_Data>

080a342e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a342e:	2100      	movs	r1, #0
 80a3430:	7c00      	ldrb	r0, [r0, #16]
 80a3432:	f7fe be85 	b.w	80a2140 <HAL_I2C_Peek_Data>

080a3436 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a3436:	2100      	movs	r1, #0
 80a3438:	7c00      	ldrb	r0, [r0, #16]
 80a343a:	f7fe be89 	b.w	80a2150 <HAL_I2C_Flush_Data>

080a343e <_ZN7TwoWireD0Ev>:
 80a343e:	b510      	push	{r4, lr}
 80a3440:	4604      	mov	r4, r0
 80a3442:	2114      	movs	r1, #20
 80a3444:	f000 f9c3 	bl	80a37ce <_ZdlPvj>
 80a3448:	4620      	mov	r0, r4
 80a344a:	bd10      	pop	{r4, pc}

080a344c <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a344c:	b510      	push	{r4, lr}
 80a344e:	4604      	mov	r4, r0
 80a3450:	4608      	mov	r0, r1
 80a3452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3456:	60a3      	str	r3, [r4, #8]
 80a3458:	4b04      	ldr	r3, [pc, #16]	; (80a346c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a345a:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a345c:	7420      	strb	r0, [r4, #16]
 80a345e:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3460:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a3462:	f7fe fe85 	bl	80a2170 <HAL_I2C_Init>

}
 80a3466:	4620      	mov	r0, r4
 80a3468:	bd10      	pop	{r4, pc}
 80a346a:	bf00      	nop
 80a346c:	080a5aa8 	.word	0x080a5aa8

080a3470 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a3470:	2300      	movs	r3, #0
 80a3472:	461a      	mov	r2, r3
 80a3474:	4619      	mov	r1, r3
 80a3476:	7c00      	ldrb	r0, [r0, #16]
 80a3478:	f7fe be2a 	b.w	80a20d0 <HAL_I2C_Begin>

080a347c <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a347c:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a347e:	2400      	movs	r4, #0
 80a3480:	7c00      	ldrb	r0, [r0, #16]
 80a3482:	9400      	str	r4, [sp, #0]
 80a3484:	f7fe fe2c 	bl	80a20e0 <HAL_I2C_Request_Data>
  return result;
}
 80a3488:	b2c0      	uxtb	r0, r0
 80a348a:	b002      	add	sp, #8
 80a348c:	bd10      	pop	{r4, pc}

080a348e <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a348e:	2301      	movs	r3, #1
 80a3490:	f7ff bff4 	b.w	80a347c <_ZN7TwoWire11requestFromEhhh>

080a3494 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a3494:	2200      	movs	r2, #0
 80a3496:	7c00      	ldrb	r0, [r0, #16]
 80a3498:	f7fe be2a 	b.w	80a20f0 <HAL_I2C_Begin_Transmission>

080a349c <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a349c:	2200      	movs	r2, #0
 80a349e:	7c00      	ldrb	r0, [r0, #16]
 80a34a0:	f7fe be2e 	b.w	80a2100 <HAL_I2C_End_Transmission>

080a34a4 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a34a4:	2101      	movs	r1, #1
 80a34a6:	f7ff bff9 	b.w	80a349c <_ZN7TwoWire15endTransmissionEh>

080a34aa <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a34aa:	2100      	movs	r1, #0
 80a34ac:	7c00      	ldrb	r0, [r0, #16]
 80a34ae:	f7fe be57 	b.w	80a2160 <HAL_I2C_Is_Enabled>

080a34b2 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a34b2:	2200      	movs	r2, #0
 80a34b4:	4611      	mov	r1, r2
 80a34b6:	6840      	ldr	r0, [r0, #4]
 80a34b8:	f7fe bf58 	b.w	80a236c <network_ready>

080a34bc <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a34bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a34be:	4616      	mov	r6, r2
 80a34c0:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a34c2:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a34c4:	460f      	mov	r7, r1
 80a34c6:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a34c8:	2100      	movs	r1, #0
 80a34ca:	a803      	add	r0, sp, #12
 80a34cc:	f001 fa7d 	bl	80a49ca <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a34d0:	4630      	mov	r0, r6
 80a34d2:	f001 fabd 	bl	80a4a50 <strlen>
 80a34d6:	2500      	movs	r5, #0
 80a34d8:	9500      	str	r5, [sp, #0]
 80a34da:	b281      	uxth	r1, r0
 80a34dc:	687b      	ldr	r3, [r7, #4]
 80a34de:	aa03      	add	r2, sp, #12
 80a34e0:	4630      	mov	r0, r6
 80a34e2:	f7fe fed7 	bl	80a2294 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a34e6:	b120      	cbz	r0, 80a34f2 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a34e8:	4629      	mov	r1, r5
 80a34ea:	4620      	mov	r0, r4
 80a34ec:	f7ff fdf0 	bl	80a30d0 <_ZN9IPAddressC1Em>
 80a34f0:	e003      	b.n	80a34fa <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a34f2:	a903      	add	r1, sp, #12
 80a34f4:	4620      	mov	r0, r4
 80a34f6:	f7ff fdd9 	bl	80a30ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a34fa:	4620      	mov	r0, r4
 80a34fc:	b009      	add	sp, #36	; 0x24
 80a34fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a3500 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a3500:	2200      	movs	r2, #0
 80a3502:	4611      	mov	r1, r2
 80a3504:	6840      	ldr	r0, [r0, #4]
 80a3506:	f7fe bf51 	b.w	80a23ac <network_listening>

080a350a <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a350a:	2200      	movs	r2, #0
 80a350c:	4611      	mov	r1, r2
 80a350e:	6840      	ldr	r0, [r0, #4]
 80a3510:	f7fe bf5c 	b.w	80a23cc <network_get_listen_timeout>

080a3514 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3514:	2200      	movs	r2, #0
 80a3516:	6840      	ldr	r0, [r0, #4]
 80a3518:	f7fe bf50 	b.w	80a23bc <network_set_listen_timeout>

080a351c <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a351c:	2200      	movs	r2, #0
 80a351e:	f081 0101 	eor.w	r1, r1, #1
 80a3522:	6840      	ldr	r0, [r0, #4]
 80a3524:	f7fe bf3a 	b.w	80a239c <network_listen>

080a3528 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a3528:	2300      	movs	r3, #0
 80a352a:	461a      	mov	r2, r3
 80a352c:	4619      	mov	r1, r3
 80a352e:	6840      	ldr	r0, [r0, #4]
 80a3530:	f7fe bf2c 	b.w	80a238c <network_off>

080a3534 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a3534:	2200      	movs	r2, #0
 80a3536:	4611      	mov	r1, r2
 80a3538:	6840      	ldr	r0, [r0, #4]
 80a353a:	f7fe bf07 	b.w	80a234c <network_connecting>

080a353e <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a353e:	2200      	movs	r2, #0
 80a3540:	2102      	movs	r1, #2
 80a3542:	6840      	ldr	r0, [r0, #4]
 80a3544:	f7fe bf0a 	b.w	80a235c <network_disconnect>

080a3548 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a3548:	2300      	movs	r3, #0
 80a354a:	461a      	mov	r2, r3
 80a354c:	6840      	ldr	r0, [r0, #4]
 80a354e:	f7fe bef5 	b.w	80a233c <network_connect>
	...

080a3554 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a3554:	4b02      	ldr	r3, [pc, #8]	; (80a3560 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3556:	2204      	movs	r2, #4
 80a3558:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a355a:	4a02      	ldr	r2, [pc, #8]	; (80a3564 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a355c:	601a      	str	r2, [r3, #0]
 80a355e:	4770      	bx	lr
 80a3560:	20000a90 	.word	0x20000a90
 80a3564:	080a5ad0 	.word	0x080a5ad0

080a3568 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a3568:	2300      	movs	r3, #0
 80a356a:	461a      	mov	r2, r3
 80a356c:	6840      	ldr	r0, [r0, #4]
 80a356e:	f7fe bee5 	b.w	80a233c <network_connect>

080a3572 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a3572:	2200      	movs	r2, #0
 80a3574:	2102      	movs	r1, #2
 80a3576:	6840      	ldr	r0, [r0, #4]
 80a3578:	f7fe bef0 	b.w	80a235c <network_disconnect>

080a357c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a357c:	2200      	movs	r2, #0
 80a357e:	4611      	mov	r1, r2
 80a3580:	6840      	ldr	r0, [r0, #4]
 80a3582:	f7fe bee3 	b.w	80a234c <network_connecting>

080a3586 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a3586:	2200      	movs	r2, #0
 80a3588:	4611      	mov	r1, r2
 80a358a:	6840      	ldr	r0, [r0, #4]
 80a358c:	f7fe beee 	b.w	80a236c <network_ready>

080a3590 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a3590:	2300      	movs	r3, #0
 80a3592:	461a      	mov	r2, r3
 80a3594:	4619      	mov	r1, r3
 80a3596:	6840      	ldr	r0, [r0, #4]
 80a3598:	f7fe bef0 	b.w	80a237c <network_on>

080a359c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a359c:	2300      	movs	r3, #0
 80a359e:	461a      	mov	r2, r3
 80a35a0:	4619      	mov	r1, r3
 80a35a2:	6840      	ldr	r0, [r0, #4]
 80a35a4:	f7fe bef2 	b.w	80a238c <network_off>

080a35a8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a35a8:	2200      	movs	r2, #0
 80a35aa:	f081 0101 	eor.w	r1, r1, #1
 80a35ae:	6840      	ldr	r0, [r0, #4]
 80a35b0:	f7fe bef4 	b.w	80a239c <network_listen>

080a35b4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a35b4:	2200      	movs	r2, #0
 80a35b6:	6840      	ldr	r0, [r0, #4]
 80a35b8:	f7fe bf00 	b.w	80a23bc <network_set_listen_timeout>

080a35bc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a35bc:	2200      	movs	r2, #0
 80a35be:	4611      	mov	r1, r2
 80a35c0:	6840      	ldr	r0, [r0, #4]
 80a35c2:	f7fe bf03 	b.w	80a23cc <network_get_listen_timeout>

080a35c6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a35c6:	2200      	movs	r2, #0
 80a35c8:	4611      	mov	r1, r2
 80a35ca:	6840      	ldr	r0, [r0, #4]
 80a35cc:	f7fe beee 	b.w	80a23ac <network_listening>

080a35d0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a35d0:	b570      	push	{r4, r5, r6, lr}
 80a35d2:	4616      	mov	r6, r2
 80a35d4:	b08e      	sub	sp, #56	; 0x38
 80a35d6:	4604      	mov	r4, r0
    IPAddress addr;
 80a35d8:	a808      	add	r0, sp, #32
 80a35da:	f7ff fd59 	bl	80a3090 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a35de:	2211      	movs	r2, #17
 80a35e0:	2100      	movs	r1, #0
 80a35e2:	a803      	add	r0, sp, #12
 80a35e4:	f001 f9f1 	bl	80a49ca <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a35e8:	4630      	mov	r0, r6
 80a35ea:	f001 fa31 	bl	80a4a50 <strlen>
 80a35ee:	2500      	movs	r5, #0
 80a35f0:	4b0a      	ldr	r3, [pc, #40]	; (80a361c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a35f2:	9500      	str	r5, [sp, #0]
 80a35f4:	b281      	uxth	r1, r0
 80a35f6:	685b      	ldr	r3, [r3, #4]
 80a35f8:	aa03      	add	r2, sp, #12
 80a35fa:	4630      	mov	r0, r6
 80a35fc:	f7fe fe4a 	bl	80a2294 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3600:	b120      	cbz	r0, 80a360c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a3602:	4629      	mov	r1, r5
 80a3604:	4620      	mov	r0, r4
 80a3606:	f7ff fd63 	bl	80a30d0 <_ZN9IPAddressC1Em>
 80a360a:	e003      	b.n	80a3614 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a360c:	a903      	add	r1, sp, #12
 80a360e:	4620      	mov	r0, r4
 80a3610:	f7ff fd4c 	bl	80a30ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3614:	4620      	mov	r0, r4
 80a3616:	b00e      	add	sp, #56	; 0x38
 80a3618:	bd70      	pop	{r4, r5, r6, pc}
 80a361a:	bf00      	nop
 80a361c:	20000a90 	.word	0x20000a90

080a3620 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a3620:	4b03      	ldr	r3, [pc, #12]	; (80a3630 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a3622:	4a04      	ldr	r2, [pc, #16]	; (80a3634 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a3624:	2804      	cmp	r0, #4
 80a3626:	bf0c      	ite	eq
 80a3628:	4610      	moveq	r0, r2
 80a362a:	4618      	movne	r0, r3
 80a362c:	4770      	bx	lr
 80a362e:	bf00      	nop
 80a3630:	20000a98 	.word	0x20000a98
 80a3634:	20000a90 	.word	0x20000a90

080a3638 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a3638:	4b02      	ldr	r3, [pc, #8]	; (80a3644 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a363a:	4a03      	ldr	r2, [pc, #12]	; (80a3648 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a363c:	601a      	str	r2, [r3, #0]
 80a363e:	2200      	movs	r2, #0
 80a3640:	605a      	str	r2, [r3, #4]
 80a3642:	4770      	bx	lr
 80a3644:	20000a98 	.word	0x20000a98
 80a3648:	080a5b04 	.word	0x080a5b04

080a364c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a364c:	b510      	push	{r4, lr}
 80a364e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3650:	480f      	ldr	r0, [pc, #60]	; (80a3690 <pinAvailable+0x44>)
 80a3652:	f7fe ffe3 	bl	80a261c <_ZN8SPIClass9isEnabledEv>
 80a3656:	b128      	cbz	r0, 80a3664 <pinAvailable+0x18>
 80a3658:	f1a4 030d 	sub.w	r3, r4, #13
 80a365c:	2b02      	cmp	r3, #2
 80a365e:	d801      	bhi.n	80a3664 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a3660:	2000      	movs	r0, #0
 80a3662:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3664:	f000 f88e 	bl	80a3784 <_Z19__fetch_global_Wirev>
 80a3668:	f7ff ff1f 	bl	80a34aa <_ZN7TwoWire9isEnabledEv>
 80a366c:	b108      	cbz	r0, 80a3672 <pinAvailable+0x26>
 80a366e:	2c01      	cmp	r4, #1
 80a3670:	d9f6      	bls.n	80a3660 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a3672:	f7ff fe99 	bl	80a33a8 <_Z22__fetch_global_Serial1v>
 80a3676:	f7ff fe93 	bl	80a33a0 <_ZN11USARTSerial9isEnabledEv>
 80a367a:	b118      	cbz	r0, 80a3684 <pinAvailable+0x38>
 80a367c:	f1a4 0312 	sub.w	r3, r4, #18
 80a3680:	2b01      	cmp	r3, #1
 80a3682:	d9ed      	bls.n	80a3660 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a3684:	2c17      	cmp	r4, #23
 80a3686:	bf8c      	ite	hi
 80a3688:	2000      	movhi	r0, #0
 80a368a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a368c:	bd10      	pop	{r4, pc}
 80a368e:	bf00      	nop
 80a3690:	20000aa0 	.word	0x20000aa0

080a3694 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3694:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a3696:	b538      	push	{r3, r4, r5, lr}
 80a3698:	4604      	mov	r4, r0
 80a369a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a369c:	d80a      	bhi.n	80a36b4 <pinMode+0x20>
 80a369e:	29ff      	cmp	r1, #255	; 0xff
 80a36a0:	d008      	beq.n	80a36b4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a36a2:	f7ff ffd3 	bl	80a364c <pinAvailable>
 80a36a6:	b128      	cbz	r0, 80a36b4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a36a8:	4629      	mov	r1, r5
 80a36aa:	4620      	mov	r0, r4
}
 80a36ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a36b0:	f7fe bc36 	b.w	80a1f20 <HAL_Pin_Mode>
 80a36b4:	bd38      	pop	{r3, r4, r5, pc}

080a36b6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a36b6:	b538      	push	{r3, r4, r5, lr}
 80a36b8:	4604      	mov	r4, r0
 80a36ba:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a36bc:	f7fe fc38 	bl	80a1f30 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a36c0:	28ff      	cmp	r0, #255	; 0xff
 80a36c2:	d010      	beq.n	80a36e6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a36c4:	2806      	cmp	r0, #6
 80a36c6:	d804      	bhi.n	80a36d2 <digitalWrite+0x1c>
 80a36c8:	234d      	movs	r3, #77	; 0x4d
 80a36ca:	fa23 f000 	lsr.w	r0, r3, r0
 80a36ce:	07c3      	lsls	r3, r0, #31
 80a36d0:	d409      	bmi.n	80a36e6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a36d2:	4620      	mov	r0, r4
 80a36d4:	f7ff ffba 	bl	80a364c <pinAvailable>
 80a36d8:	b128      	cbz	r0, 80a36e6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a36da:	4629      	mov	r1, r5
 80a36dc:	4620      	mov	r0, r4
}
 80a36de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a36e2:	f7fe bc2d 	b.w	80a1f40 <HAL_GPIO_Write>
 80a36e6:	bd38      	pop	{r3, r4, r5, pc}

080a36e8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a36e8:	b510      	push	{r4, lr}
 80a36ea:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a36ec:	f7fe fc20 	bl	80a1f30 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a36f0:	3804      	subs	r0, #4
 80a36f2:	b2c0      	uxtb	r0, r0
 80a36f4:	2801      	cmp	r0, #1
 80a36f6:	d908      	bls.n	80a370a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a36f8:	4620      	mov	r0, r4
 80a36fa:	f7ff ffa7 	bl	80a364c <pinAvailable>
 80a36fe:	b120      	cbz	r0, 80a370a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3700:	4620      	mov	r0, r4
}
 80a3702:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a3706:	f7fe bc23 	b.w	80a1f50 <HAL_GPIO_Read>
}
 80a370a:	2000      	movs	r0, #0
 80a370c:	bd10      	pop	{r4, pc}
	...

080a3710 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3710:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3712:	4c0c      	ldr	r4, [pc, #48]	; (80a3744 <_GLOBAL__sub_I_SPI+0x34>)
 80a3714:	4e0c      	ldr	r6, [pc, #48]	; (80a3748 <_GLOBAL__sub_I_SPI+0x38>)
 80a3716:	4d0d      	ldr	r5, [pc, #52]	; (80a374c <_GLOBAL__sub_I_SPI+0x3c>)
 80a3718:	2100      	movs	r1, #0
 80a371a:	4620      	mov	r0, r4
 80a371c:	f7fe fed6 	bl	80a24cc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3720:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3722:	4c0b      	ldr	r4, [pc, #44]	; (80a3750 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3724:	4632      	mov	r2, r6
 80a3726:	4629      	mov	r1, r5
 80a3728:	f000 f84c 	bl	80a37c4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a372c:	2101      	movs	r1, #1
 80a372e:	4620      	mov	r0, r4
 80a3730:	f7fe fecc 	bl	80a24cc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3734:	4632      	mov	r2, r6
 80a3736:	4629      	mov	r1, r5
 80a3738:	4620      	mov	r0, r4
 80a373a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a373e:	f000 b841 	b.w	80a37c4 <__aeabi_atexit>
 80a3742:	bf00      	nop
 80a3744:	20000aa0 	.word	0x20000aa0
 80a3748:	20000504 	.word	0x20000504
 80a374c:	080a24bd 	.word	0x080a24bd
 80a3750:	20000ab0 	.word	0x20000ab0

080a3754 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3754:	b513      	push	{r0, r1, r4, lr}
 80a3756:	4c08      	ldr	r4, [pc, #32]	; (80a3778 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3758:	2300      	movs	r3, #0
 80a375a:	461a      	mov	r2, r3
 80a375c:	4619      	mov	r1, r3
 80a375e:	9300      	str	r3, [sp, #0]
 80a3760:	4620      	mov	r0, r4
 80a3762:	f7ff fccb 	bl	80a30fc <_ZN9IPAddressC1Ehhhh>
 80a3766:	4620      	mov	r0, r4
 80a3768:	4a04      	ldr	r2, [pc, #16]	; (80a377c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a376a:	4905      	ldr	r1, [pc, #20]	; (80a3780 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a376c:	b002      	add	sp, #8
 80a376e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3772:	f000 b827 	b.w	80a37c4 <__aeabi_atexit>
 80a3776:	bf00      	nop
 80a3778:	20000ac4 	.word	0x20000ac4
 80a377c:	20000504 	.word	0x20000504
 80a3780:	080a304d 	.word	0x080a304d

080a3784 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a3784:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a3786:	4d0b      	ldr	r5, [pc, #44]	; (80a37b4 <_Z19__fetch_global_Wirev+0x30>)
 80a3788:	6829      	ldr	r1, [r5, #0]
 80a378a:	f011 0401 	ands.w	r4, r1, #1
 80a378e:	d10f      	bne.n	80a37b0 <_Z19__fetch_global_Wirev+0x2c>
 80a3790:	4628      	mov	r0, r5
 80a3792:	f7fc fc95 	bl	80a00c0 <__cxa_guard_acquire>
 80a3796:	b158      	cbz	r0, 80a37b0 <_Z19__fetch_global_Wirev+0x2c>
 80a3798:	4621      	mov	r1, r4
 80a379a:	4807      	ldr	r0, [pc, #28]	; (80a37b8 <_Z19__fetch_global_Wirev+0x34>)
 80a379c:	f7ff fe56 	bl	80a344c <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a37a0:	4628      	mov	r0, r5
 80a37a2:	f7fc fc92 	bl	80a00ca <__cxa_guard_release>
 80a37a6:	4a05      	ldr	r2, [pc, #20]	; (80a37bc <_Z19__fetch_global_Wirev+0x38>)
 80a37a8:	4905      	ldr	r1, [pc, #20]	; (80a37c0 <_Z19__fetch_global_Wirev+0x3c>)
 80a37aa:	4803      	ldr	r0, [pc, #12]	; (80a37b8 <_Z19__fetch_global_Wirev+0x34>)
 80a37ac:	f000 f80a 	bl	80a37c4 <__aeabi_atexit>
	return wire;
}
 80a37b0:	4801      	ldr	r0, [pc, #4]	; (80a37b8 <_Z19__fetch_global_Wirev+0x34>)
 80a37b2:	bd38      	pop	{r3, r4, r5, pc}
 80a37b4:	20000adc 	.word	0x20000adc
 80a37b8:	20000ae0 	.word	0x20000ae0
 80a37bc:	20000504 	.word	0x20000504
 80a37c0:	080a33f5 	.word	0x080a33f5

080a37c4 <__aeabi_atexit>:
 80a37c4:	460b      	mov	r3, r1
 80a37c6:	4601      	mov	r1, r0
 80a37c8:	4618      	mov	r0, r3
 80a37ca:	f000 bfed 	b.w	80a47a8 <__cxa_atexit>

080a37ce <_ZdlPvj>:
 80a37ce:	f7fc bc68 	b.w	80a00a2 <_ZdlPv>
	...

080a37d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a37d4:	4b18      	ldr	r3, [pc, #96]	; (80a3838 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a37d6:	681a      	ldr	r2, [r3, #0]
 80a37d8:	07d1      	lsls	r1, r2, #31
 80a37da:	bf5c      	itt	pl
 80a37dc:	2201      	movpl	r2, #1
 80a37de:	601a      	strpl	r2, [r3, #0]
 80a37e0:	4b16      	ldr	r3, [pc, #88]	; (80a383c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a37e2:	681a      	ldr	r2, [r3, #0]
 80a37e4:	07d2      	lsls	r2, r2, #31
 80a37e6:	bf5c      	itt	pl
 80a37e8:	2201      	movpl	r2, #1
 80a37ea:	601a      	strpl	r2, [r3, #0]
 80a37ec:	4b14      	ldr	r3, [pc, #80]	; (80a3840 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a37ee:	681a      	ldr	r2, [r3, #0]
 80a37f0:	07d0      	lsls	r0, r2, #31
 80a37f2:	bf5c      	itt	pl
 80a37f4:	2201      	movpl	r2, #1
 80a37f6:	601a      	strpl	r2, [r3, #0]
 80a37f8:	4b12      	ldr	r3, [pc, #72]	; (80a3844 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a37fa:	681a      	ldr	r2, [r3, #0]
 80a37fc:	07d1      	lsls	r1, r2, #31
 80a37fe:	bf5c      	itt	pl
 80a3800:	2201      	movpl	r2, #1
 80a3802:	601a      	strpl	r2, [r3, #0]
 80a3804:	4b10      	ldr	r3, [pc, #64]	; (80a3848 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3806:	681a      	ldr	r2, [r3, #0]
 80a3808:	07d2      	lsls	r2, r2, #31
 80a380a:	bf5c      	itt	pl
 80a380c:	2201      	movpl	r2, #1
 80a380e:	601a      	strpl	r2, [r3, #0]
 80a3810:	4b0e      	ldr	r3, [pc, #56]	; (80a384c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3812:	681a      	ldr	r2, [r3, #0]
 80a3814:	07d0      	lsls	r0, r2, #31
 80a3816:	bf5c      	itt	pl
 80a3818:	2201      	movpl	r2, #1
 80a381a:	601a      	strpl	r2, [r3, #0]
 80a381c:	4b0c      	ldr	r3, [pc, #48]	; (80a3850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a381e:	681a      	ldr	r2, [r3, #0]
 80a3820:	07d1      	lsls	r1, r2, #31
 80a3822:	bf5c      	itt	pl
 80a3824:	2201      	movpl	r2, #1
 80a3826:	601a      	strpl	r2, [r3, #0]
 80a3828:	4b0a      	ldr	r3, [pc, #40]	; (80a3854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a382a:	681a      	ldr	r2, [r3, #0]
 80a382c:	07d2      	lsls	r2, r2, #31
 80a382e:	bf5c      	itt	pl
 80a3830:	2201      	movpl	r2, #1
 80a3832:	601a      	strpl	r2, [r3, #0]
 80a3834:	4770      	bx	lr
 80a3836:	bf00      	nop
 80a3838:	20000b10 	.word	0x20000b10
 80a383c:	20000b0c 	.word	0x20000b0c
 80a3840:	20000b08 	.word	0x20000b08
 80a3844:	20000b04 	.word	0x20000b04
 80a3848:	20000b00 	.word	0x20000b00
 80a384c:	20000afc 	.word	0x20000afc
 80a3850:	20000af8 	.word	0x20000af8
 80a3854:	20000af4 	.word	0x20000af4

080a3858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3858:	4b24      	ldr	r3, [pc, #144]	; (80a38ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a385a:	681a      	ldr	r2, [r3, #0]
 80a385c:	07d0      	lsls	r0, r2, #31
 80a385e:	bf5c      	itt	pl
 80a3860:	2201      	movpl	r2, #1
 80a3862:	601a      	strpl	r2, [r3, #0]
 80a3864:	4b22      	ldr	r3, [pc, #136]	; (80a38f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a3866:	681a      	ldr	r2, [r3, #0]
 80a3868:	07d1      	lsls	r1, r2, #31
 80a386a:	bf5c      	itt	pl
 80a386c:	2201      	movpl	r2, #1
 80a386e:	601a      	strpl	r2, [r3, #0]
 80a3870:	4b20      	ldr	r3, [pc, #128]	; (80a38f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a3872:	681a      	ldr	r2, [r3, #0]
 80a3874:	07d2      	lsls	r2, r2, #31
 80a3876:	bf5c      	itt	pl
 80a3878:	2201      	movpl	r2, #1
 80a387a:	601a      	strpl	r2, [r3, #0]
 80a387c:	4b1e      	ldr	r3, [pc, #120]	; (80a38f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a387e:	681a      	ldr	r2, [r3, #0]
 80a3880:	07d0      	lsls	r0, r2, #31
 80a3882:	bf5c      	itt	pl
 80a3884:	2201      	movpl	r2, #1
 80a3886:	601a      	strpl	r2, [r3, #0]
 80a3888:	4b1c      	ldr	r3, [pc, #112]	; (80a38fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a388a:	681a      	ldr	r2, [r3, #0]
 80a388c:	07d1      	lsls	r1, r2, #31
 80a388e:	bf5c      	itt	pl
 80a3890:	2201      	movpl	r2, #1
 80a3892:	601a      	strpl	r2, [r3, #0]
 80a3894:	4b1a      	ldr	r3, [pc, #104]	; (80a3900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a3896:	681a      	ldr	r2, [r3, #0]
 80a3898:	07d2      	lsls	r2, r2, #31
 80a389a:	bf5c      	itt	pl
 80a389c:	2201      	movpl	r2, #1
 80a389e:	601a      	strpl	r2, [r3, #0]
 80a38a0:	4b18      	ldr	r3, [pc, #96]	; (80a3904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a38a2:	681a      	ldr	r2, [r3, #0]
 80a38a4:	07d0      	lsls	r0, r2, #31
 80a38a6:	bf5c      	itt	pl
 80a38a8:	2201      	movpl	r2, #1
 80a38aa:	601a      	strpl	r2, [r3, #0]
 80a38ac:	4b16      	ldr	r3, [pc, #88]	; (80a3908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a38ae:	681a      	ldr	r2, [r3, #0]
 80a38b0:	07d1      	lsls	r1, r2, #31
 80a38b2:	bf5c      	itt	pl
 80a38b4:	2201      	movpl	r2, #1
 80a38b6:	601a      	strpl	r2, [r3, #0]
 80a38b8:	4b14      	ldr	r3, [pc, #80]	; (80a390c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a38ba:	681a      	ldr	r2, [r3, #0]
 80a38bc:	07d2      	lsls	r2, r2, #31
 80a38be:	bf5c      	itt	pl
 80a38c0:	2201      	movpl	r2, #1
 80a38c2:	601a      	strpl	r2, [r3, #0]
 80a38c4:	4b12      	ldr	r3, [pc, #72]	; (80a3910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a38c6:	681a      	ldr	r2, [r3, #0]
 80a38c8:	07d0      	lsls	r0, r2, #31
 80a38ca:	bf5c      	itt	pl
 80a38cc:	2201      	movpl	r2, #1
 80a38ce:	601a      	strpl	r2, [r3, #0]
 80a38d0:	4b10      	ldr	r3, [pc, #64]	; (80a3914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a38d2:	681a      	ldr	r2, [r3, #0]
 80a38d4:	07d1      	lsls	r1, r2, #31
 80a38d6:	bf5c      	itt	pl
 80a38d8:	2201      	movpl	r2, #1
 80a38da:	601a      	strpl	r2, [r3, #0]
 80a38dc:	4b0e      	ldr	r3, [pc, #56]	; (80a3918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a38de:	681a      	ldr	r2, [r3, #0]
 80a38e0:	07d2      	lsls	r2, r2, #31
 80a38e2:	bf5c      	itt	pl
 80a38e4:	2201      	movpl	r2, #1
 80a38e6:	601a      	strpl	r2, [r3, #0]
 80a38e8:	4770      	bx	lr
 80a38ea:	bf00      	nop
 80a38ec:	20000b40 	.word	0x20000b40
 80a38f0:	20000b3c 	.word	0x20000b3c
 80a38f4:	20000b38 	.word	0x20000b38
 80a38f8:	20000b34 	.word	0x20000b34
 80a38fc:	20000b30 	.word	0x20000b30
 80a3900:	20000b2c 	.word	0x20000b2c
 80a3904:	20000b28 	.word	0x20000b28
 80a3908:	20000b24 	.word	0x20000b24
 80a390c:	20000b20 	.word	0x20000b20
 80a3910:	20000b1c 	.word	0x20000b1c
 80a3914:	20000b18 	.word	0x20000b18
 80a3918:	20000b14 	.word	0x20000b14

080a391c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a391c:	4b24      	ldr	r3, [pc, #144]	; (80a39b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a391e:	681a      	ldr	r2, [r3, #0]
 80a3920:	07d0      	lsls	r0, r2, #31
 80a3922:	bf5c      	itt	pl
 80a3924:	2201      	movpl	r2, #1
 80a3926:	601a      	strpl	r2, [r3, #0]
 80a3928:	4b22      	ldr	r3, [pc, #136]	; (80a39b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a392a:	681a      	ldr	r2, [r3, #0]
 80a392c:	07d1      	lsls	r1, r2, #31
 80a392e:	bf5c      	itt	pl
 80a3930:	2201      	movpl	r2, #1
 80a3932:	601a      	strpl	r2, [r3, #0]
 80a3934:	4b20      	ldr	r3, [pc, #128]	; (80a39b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a3936:	681a      	ldr	r2, [r3, #0]
 80a3938:	07d2      	lsls	r2, r2, #31
 80a393a:	bf5c      	itt	pl
 80a393c:	2201      	movpl	r2, #1
 80a393e:	601a      	strpl	r2, [r3, #0]
 80a3940:	4b1e      	ldr	r3, [pc, #120]	; (80a39bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a3942:	681a      	ldr	r2, [r3, #0]
 80a3944:	07d0      	lsls	r0, r2, #31
 80a3946:	bf5c      	itt	pl
 80a3948:	2201      	movpl	r2, #1
 80a394a:	601a      	strpl	r2, [r3, #0]
 80a394c:	4b1c      	ldr	r3, [pc, #112]	; (80a39c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a394e:	681a      	ldr	r2, [r3, #0]
 80a3950:	07d1      	lsls	r1, r2, #31
 80a3952:	bf5c      	itt	pl
 80a3954:	2201      	movpl	r2, #1
 80a3956:	601a      	strpl	r2, [r3, #0]
 80a3958:	4b1a      	ldr	r3, [pc, #104]	; (80a39c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a395a:	681a      	ldr	r2, [r3, #0]
 80a395c:	07d2      	lsls	r2, r2, #31
 80a395e:	bf5c      	itt	pl
 80a3960:	2201      	movpl	r2, #1
 80a3962:	601a      	strpl	r2, [r3, #0]
 80a3964:	4b18      	ldr	r3, [pc, #96]	; (80a39c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3966:	681a      	ldr	r2, [r3, #0]
 80a3968:	07d0      	lsls	r0, r2, #31
 80a396a:	bf5c      	itt	pl
 80a396c:	2201      	movpl	r2, #1
 80a396e:	601a      	strpl	r2, [r3, #0]
 80a3970:	4b16      	ldr	r3, [pc, #88]	; (80a39cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a3972:	681a      	ldr	r2, [r3, #0]
 80a3974:	07d1      	lsls	r1, r2, #31
 80a3976:	bf5c      	itt	pl
 80a3978:	2201      	movpl	r2, #1
 80a397a:	601a      	strpl	r2, [r3, #0]
 80a397c:	4b14      	ldr	r3, [pc, #80]	; (80a39d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a397e:	681a      	ldr	r2, [r3, #0]
 80a3980:	07d2      	lsls	r2, r2, #31
 80a3982:	bf5c      	itt	pl
 80a3984:	2201      	movpl	r2, #1
 80a3986:	601a      	strpl	r2, [r3, #0]
 80a3988:	4b12      	ldr	r3, [pc, #72]	; (80a39d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a398a:	681a      	ldr	r2, [r3, #0]
 80a398c:	07d0      	lsls	r0, r2, #31
 80a398e:	bf5c      	itt	pl
 80a3990:	2201      	movpl	r2, #1
 80a3992:	601a      	strpl	r2, [r3, #0]
 80a3994:	4b10      	ldr	r3, [pc, #64]	; (80a39d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a3996:	681a      	ldr	r2, [r3, #0]
 80a3998:	07d1      	lsls	r1, r2, #31
 80a399a:	bf5c      	itt	pl
 80a399c:	2201      	movpl	r2, #1
 80a399e:	601a      	strpl	r2, [r3, #0]
 80a39a0:	4b0e      	ldr	r3, [pc, #56]	; (80a39dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a39a2:	681a      	ldr	r2, [r3, #0]
 80a39a4:	07d2      	lsls	r2, r2, #31
 80a39a6:	bf5c      	itt	pl
 80a39a8:	2201      	movpl	r2, #1
 80a39aa:	601a      	strpl	r2, [r3, #0]
 80a39ac:	4770      	bx	lr
 80a39ae:	bf00      	nop
 80a39b0:	20000b70 	.word	0x20000b70
 80a39b4:	20000b6c 	.word	0x20000b6c
 80a39b8:	20000b68 	.word	0x20000b68
 80a39bc:	20000b64 	.word	0x20000b64
 80a39c0:	20000b60 	.word	0x20000b60
 80a39c4:	20000b5c 	.word	0x20000b5c
 80a39c8:	20000b58 	.word	0x20000b58
 80a39cc:	20000b54 	.word	0x20000b54
 80a39d0:	20000b50 	.word	0x20000b50
 80a39d4:	20000b4c 	.word	0x20000b4c
 80a39d8:	20000b48 	.word	0x20000b48
 80a39dc:	20000b44 	.word	0x20000b44

080a39e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a39e0:	4b18      	ldr	r3, [pc, #96]	; (80a3a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a39e2:	681a      	ldr	r2, [r3, #0]
 80a39e4:	07d1      	lsls	r1, r2, #31
 80a39e6:	bf5c      	itt	pl
 80a39e8:	2201      	movpl	r2, #1
 80a39ea:	601a      	strpl	r2, [r3, #0]
 80a39ec:	4b16      	ldr	r3, [pc, #88]	; (80a3a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a39ee:	681a      	ldr	r2, [r3, #0]
 80a39f0:	07d2      	lsls	r2, r2, #31
 80a39f2:	bf5c      	itt	pl
 80a39f4:	2201      	movpl	r2, #1
 80a39f6:	601a      	strpl	r2, [r3, #0]
 80a39f8:	4b14      	ldr	r3, [pc, #80]	; (80a3a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a39fa:	681a      	ldr	r2, [r3, #0]
 80a39fc:	07d0      	lsls	r0, r2, #31
 80a39fe:	bf5c      	itt	pl
 80a3a00:	2201      	movpl	r2, #1
 80a3a02:	601a      	strpl	r2, [r3, #0]
 80a3a04:	4b12      	ldr	r3, [pc, #72]	; (80a3a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3a06:	681a      	ldr	r2, [r3, #0]
 80a3a08:	07d1      	lsls	r1, r2, #31
 80a3a0a:	bf5c      	itt	pl
 80a3a0c:	2201      	movpl	r2, #1
 80a3a0e:	601a      	strpl	r2, [r3, #0]
 80a3a10:	4b10      	ldr	r3, [pc, #64]	; (80a3a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3a12:	681a      	ldr	r2, [r3, #0]
 80a3a14:	07d2      	lsls	r2, r2, #31
 80a3a16:	bf5c      	itt	pl
 80a3a18:	2201      	movpl	r2, #1
 80a3a1a:	601a      	strpl	r2, [r3, #0]
 80a3a1c:	4b0e      	ldr	r3, [pc, #56]	; (80a3a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a3a1e:	681a      	ldr	r2, [r3, #0]
 80a3a20:	07d0      	lsls	r0, r2, #31
 80a3a22:	bf5c      	itt	pl
 80a3a24:	2201      	movpl	r2, #1
 80a3a26:	601a      	strpl	r2, [r3, #0]
 80a3a28:	4b0c      	ldr	r3, [pc, #48]	; (80a3a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a3a2a:	681a      	ldr	r2, [r3, #0]
 80a3a2c:	07d1      	lsls	r1, r2, #31
 80a3a2e:	bf5c      	itt	pl
 80a3a30:	2201      	movpl	r2, #1
 80a3a32:	601a      	strpl	r2, [r3, #0]
 80a3a34:	4b0a      	ldr	r3, [pc, #40]	; (80a3a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a3a36:	681a      	ldr	r2, [r3, #0]
 80a3a38:	07d2      	lsls	r2, r2, #31
 80a3a3a:	bf5c      	itt	pl
 80a3a3c:	2201      	movpl	r2, #1
 80a3a3e:	601a      	strpl	r2, [r3, #0]
 80a3a40:	4770      	bx	lr
 80a3a42:	bf00      	nop
 80a3a44:	20000b90 	.word	0x20000b90
 80a3a48:	20000b8c 	.word	0x20000b8c
 80a3a4c:	20000b88 	.word	0x20000b88
 80a3a50:	20000b84 	.word	0x20000b84
 80a3a54:	20000b80 	.word	0x20000b80
 80a3a58:	20000b7c 	.word	0x20000b7c
 80a3a5c:	20000b78 	.word	0x20000b78
 80a3a60:	20000b74 	.word	0x20000b74

080a3a64 <__aeabi_drsub>:
 80a3a64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3a68:	e002      	b.n	80a3a70 <__adddf3>
 80a3a6a:	bf00      	nop

080a3a6c <__aeabi_dsub>:
 80a3a6c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3a70 <__adddf3>:
 80a3a70:	b530      	push	{r4, r5, lr}
 80a3a72:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3a76:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3a7a:	ea94 0f05 	teq	r4, r5
 80a3a7e:	bf08      	it	eq
 80a3a80:	ea90 0f02 	teqeq	r0, r2
 80a3a84:	bf1f      	itttt	ne
 80a3a86:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3a8a:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3a8e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3a92:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3a96:	f000 80e2 	beq.w	80a3c5e <__adddf3+0x1ee>
 80a3a9a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3a9e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3aa2:	bfb8      	it	lt
 80a3aa4:	426d      	neglt	r5, r5
 80a3aa6:	dd0c      	ble.n	80a3ac2 <__adddf3+0x52>
 80a3aa8:	442c      	add	r4, r5
 80a3aaa:	ea80 0202 	eor.w	r2, r0, r2
 80a3aae:	ea81 0303 	eor.w	r3, r1, r3
 80a3ab2:	ea82 0000 	eor.w	r0, r2, r0
 80a3ab6:	ea83 0101 	eor.w	r1, r3, r1
 80a3aba:	ea80 0202 	eor.w	r2, r0, r2
 80a3abe:	ea81 0303 	eor.w	r3, r1, r3
 80a3ac2:	2d36      	cmp	r5, #54	; 0x36
 80a3ac4:	bf88      	it	hi
 80a3ac6:	bd30      	pophi	{r4, r5, pc}
 80a3ac8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3acc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3ad0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3ad4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3ad8:	d002      	beq.n	80a3ae0 <__adddf3+0x70>
 80a3ada:	4240      	negs	r0, r0
 80a3adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3ae0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3ae4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3ae8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3aec:	d002      	beq.n	80a3af4 <__adddf3+0x84>
 80a3aee:	4252      	negs	r2, r2
 80a3af0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3af4:	ea94 0f05 	teq	r4, r5
 80a3af8:	f000 80a7 	beq.w	80a3c4a <__adddf3+0x1da>
 80a3afc:	f1a4 0401 	sub.w	r4, r4, #1
 80a3b00:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3b04:	db0d      	blt.n	80a3b22 <__adddf3+0xb2>
 80a3b06:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3b0a:	fa22 f205 	lsr.w	r2, r2, r5
 80a3b0e:	1880      	adds	r0, r0, r2
 80a3b10:	f141 0100 	adc.w	r1, r1, #0
 80a3b14:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3b18:	1880      	adds	r0, r0, r2
 80a3b1a:	fa43 f305 	asr.w	r3, r3, r5
 80a3b1e:	4159      	adcs	r1, r3
 80a3b20:	e00e      	b.n	80a3b40 <__adddf3+0xd0>
 80a3b22:	f1a5 0520 	sub.w	r5, r5, #32
 80a3b26:	f10e 0e20 	add.w	lr, lr, #32
 80a3b2a:	2a01      	cmp	r2, #1
 80a3b2c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3b30:	bf28      	it	cs
 80a3b32:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3b36:	fa43 f305 	asr.w	r3, r3, r5
 80a3b3a:	18c0      	adds	r0, r0, r3
 80a3b3c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3b40:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3b44:	d507      	bpl.n	80a3b56 <__adddf3+0xe6>
 80a3b46:	f04f 0e00 	mov.w	lr, #0
 80a3b4a:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3b4e:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3b52:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3b56:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3b5a:	d31b      	bcc.n	80a3b94 <__adddf3+0x124>
 80a3b5c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3b60:	d30c      	bcc.n	80a3b7c <__adddf3+0x10c>
 80a3b62:	0849      	lsrs	r1, r1, #1
 80a3b64:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3b68:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3b6c:	f104 0401 	add.w	r4, r4, #1
 80a3b70:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3b74:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3b78:	f080 809a 	bcs.w	80a3cb0 <__adddf3+0x240>
 80a3b7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3b80:	bf08      	it	eq
 80a3b82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3b86:	f150 0000 	adcs.w	r0, r0, #0
 80a3b8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3b8e:	ea41 0105 	orr.w	r1, r1, r5
 80a3b92:	bd30      	pop	{r4, r5, pc}
 80a3b94:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3b98:	4140      	adcs	r0, r0
 80a3b9a:	eb41 0101 	adc.w	r1, r1, r1
 80a3b9e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3ba2:	f1a4 0401 	sub.w	r4, r4, #1
 80a3ba6:	d1e9      	bne.n	80a3b7c <__adddf3+0x10c>
 80a3ba8:	f091 0f00 	teq	r1, #0
 80a3bac:	bf04      	itt	eq
 80a3bae:	4601      	moveq	r1, r0
 80a3bb0:	2000      	moveq	r0, #0
 80a3bb2:	fab1 f381 	clz	r3, r1
 80a3bb6:	bf08      	it	eq
 80a3bb8:	3320      	addeq	r3, #32
 80a3bba:	f1a3 030b 	sub.w	r3, r3, #11
 80a3bbe:	f1b3 0220 	subs.w	r2, r3, #32
 80a3bc2:	da0c      	bge.n	80a3bde <__adddf3+0x16e>
 80a3bc4:	320c      	adds	r2, #12
 80a3bc6:	dd08      	ble.n	80a3bda <__adddf3+0x16a>
 80a3bc8:	f102 0c14 	add.w	ip, r2, #20
 80a3bcc:	f1c2 020c 	rsb	r2, r2, #12
 80a3bd0:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3bd4:	fa21 f102 	lsr.w	r1, r1, r2
 80a3bd8:	e00c      	b.n	80a3bf4 <__adddf3+0x184>
 80a3bda:	f102 0214 	add.w	r2, r2, #20
 80a3bde:	bfd8      	it	le
 80a3be0:	f1c2 0c20 	rsble	ip, r2, #32
 80a3be4:	fa01 f102 	lsl.w	r1, r1, r2
 80a3be8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3bec:	bfdc      	itt	le
 80a3bee:	ea41 010c 	orrle.w	r1, r1, ip
 80a3bf2:	4090      	lslle	r0, r2
 80a3bf4:	1ae4      	subs	r4, r4, r3
 80a3bf6:	bfa2      	ittt	ge
 80a3bf8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3bfc:	4329      	orrge	r1, r5
 80a3bfe:	bd30      	popge	{r4, r5, pc}
 80a3c00:	ea6f 0404 	mvn.w	r4, r4
 80a3c04:	3c1f      	subs	r4, #31
 80a3c06:	da1c      	bge.n	80a3c42 <__adddf3+0x1d2>
 80a3c08:	340c      	adds	r4, #12
 80a3c0a:	dc0e      	bgt.n	80a3c2a <__adddf3+0x1ba>
 80a3c0c:	f104 0414 	add.w	r4, r4, #20
 80a3c10:	f1c4 0220 	rsb	r2, r4, #32
 80a3c14:	fa20 f004 	lsr.w	r0, r0, r4
 80a3c18:	fa01 f302 	lsl.w	r3, r1, r2
 80a3c1c:	ea40 0003 	orr.w	r0, r0, r3
 80a3c20:	fa21 f304 	lsr.w	r3, r1, r4
 80a3c24:	ea45 0103 	orr.w	r1, r5, r3
 80a3c28:	bd30      	pop	{r4, r5, pc}
 80a3c2a:	f1c4 040c 	rsb	r4, r4, #12
 80a3c2e:	f1c4 0220 	rsb	r2, r4, #32
 80a3c32:	fa20 f002 	lsr.w	r0, r0, r2
 80a3c36:	fa01 f304 	lsl.w	r3, r1, r4
 80a3c3a:	ea40 0003 	orr.w	r0, r0, r3
 80a3c3e:	4629      	mov	r1, r5
 80a3c40:	bd30      	pop	{r4, r5, pc}
 80a3c42:	fa21 f004 	lsr.w	r0, r1, r4
 80a3c46:	4629      	mov	r1, r5
 80a3c48:	bd30      	pop	{r4, r5, pc}
 80a3c4a:	f094 0f00 	teq	r4, #0
 80a3c4e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3c52:	bf06      	itte	eq
 80a3c54:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3c58:	3401      	addeq	r4, #1
 80a3c5a:	3d01      	subne	r5, #1
 80a3c5c:	e74e      	b.n	80a3afc <__adddf3+0x8c>
 80a3c5e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3c62:	bf18      	it	ne
 80a3c64:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3c68:	d029      	beq.n	80a3cbe <__adddf3+0x24e>
 80a3c6a:	ea94 0f05 	teq	r4, r5
 80a3c6e:	bf08      	it	eq
 80a3c70:	ea90 0f02 	teqeq	r0, r2
 80a3c74:	d005      	beq.n	80a3c82 <__adddf3+0x212>
 80a3c76:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3c7a:	bf04      	itt	eq
 80a3c7c:	4619      	moveq	r1, r3
 80a3c7e:	4610      	moveq	r0, r2
 80a3c80:	bd30      	pop	{r4, r5, pc}
 80a3c82:	ea91 0f03 	teq	r1, r3
 80a3c86:	bf1e      	ittt	ne
 80a3c88:	2100      	movne	r1, #0
 80a3c8a:	2000      	movne	r0, #0
 80a3c8c:	bd30      	popne	{r4, r5, pc}
 80a3c8e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3c92:	d105      	bne.n	80a3ca0 <__adddf3+0x230>
 80a3c94:	0040      	lsls	r0, r0, #1
 80a3c96:	4149      	adcs	r1, r1
 80a3c98:	bf28      	it	cs
 80a3c9a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3c9e:	bd30      	pop	{r4, r5, pc}
 80a3ca0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3ca4:	bf3c      	itt	cc
 80a3ca6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3caa:	bd30      	popcc	{r4, r5, pc}
 80a3cac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3cb0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3cb4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3cb8:	f04f 0000 	mov.w	r0, #0
 80a3cbc:	bd30      	pop	{r4, r5, pc}
 80a3cbe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3cc2:	bf1a      	itte	ne
 80a3cc4:	4619      	movne	r1, r3
 80a3cc6:	4610      	movne	r0, r2
 80a3cc8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3ccc:	bf1c      	itt	ne
 80a3cce:	460b      	movne	r3, r1
 80a3cd0:	4602      	movne	r2, r0
 80a3cd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3cd6:	bf06      	itte	eq
 80a3cd8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3cdc:	ea91 0f03 	teqeq	r1, r3
 80a3ce0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3ce4:	bd30      	pop	{r4, r5, pc}
 80a3ce6:	bf00      	nop

080a3ce8 <__aeabi_ui2d>:
 80a3ce8:	f090 0f00 	teq	r0, #0
 80a3cec:	bf04      	itt	eq
 80a3cee:	2100      	moveq	r1, #0
 80a3cf0:	4770      	bxeq	lr
 80a3cf2:	b530      	push	{r4, r5, lr}
 80a3cf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3cf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3cfc:	f04f 0500 	mov.w	r5, #0
 80a3d00:	f04f 0100 	mov.w	r1, #0
 80a3d04:	e750      	b.n	80a3ba8 <__adddf3+0x138>
 80a3d06:	bf00      	nop

080a3d08 <__aeabi_i2d>:
 80a3d08:	f090 0f00 	teq	r0, #0
 80a3d0c:	bf04      	itt	eq
 80a3d0e:	2100      	moveq	r1, #0
 80a3d10:	4770      	bxeq	lr
 80a3d12:	b530      	push	{r4, r5, lr}
 80a3d14:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3d18:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3d1c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3d20:	bf48      	it	mi
 80a3d22:	4240      	negmi	r0, r0
 80a3d24:	f04f 0100 	mov.w	r1, #0
 80a3d28:	e73e      	b.n	80a3ba8 <__adddf3+0x138>
 80a3d2a:	bf00      	nop

080a3d2c <__aeabi_f2d>:
 80a3d2c:	0042      	lsls	r2, r0, #1
 80a3d2e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3d32:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3d36:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3d3a:	bf1f      	itttt	ne
 80a3d3c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3d40:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3d44:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3d48:	4770      	bxne	lr
 80a3d4a:	f092 0f00 	teq	r2, #0
 80a3d4e:	bf14      	ite	ne
 80a3d50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3d54:	4770      	bxeq	lr
 80a3d56:	b530      	push	{r4, r5, lr}
 80a3d58:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3d5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3d60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3d64:	e720      	b.n	80a3ba8 <__adddf3+0x138>
 80a3d66:	bf00      	nop

080a3d68 <__aeabi_ul2d>:
 80a3d68:	ea50 0201 	orrs.w	r2, r0, r1
 80a3d6c:	bf08      	it	eq
 80a3d6e:	4770      	bxeq	lr
 80a3d70:	b530      	push	{r4, r5, lr}
 80a3d72:	f04f 0500 	mov.w	r5, #0
 80a3d76:	e00a      	b.n	80a3d8e <__aeabi_l2d+0x16>

080a3d78 <__aeabi_l2d>:
 80a3d78:	ea50 0201 	orrs.w	r2, r0, r1
 80a3d7c:	bf08      	it	eq
 80a3d7e:	4770      	bxeq	lr
 80a3d80:	b530      	push	{r4, r5, lr}
 80a3d82:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3d86:	d502      	bpl.n	80a3d8e <__aeabi_l2d+0x16>
 80a3d88:	4240      	negs	r0, r0
 80a3d8a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3d8e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3d92:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3d96:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3d9a:	f43f aedc 	beq.w	80a3b56 <__adddf3+0xe6>
 80a3d9e:	f04f 0203 	mov.w	r2, #3
 80a3da2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3da6:	bf18      	it	ne
 80a3da8:	3203      	addne	r2, #3
 80a3daa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3dae:	bf18      	it	ne
 80a3db0:	3203      	addne	r2, #3
 80a3db2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3db6:	f1c2 0320 	rsb	r3, r2, #32
 80a3dba:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3dbe:	fa20 f002 	lsr.w	r0, r0, r2
 80a3dc2:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3dc6:	ea40 000e 	orr.w	r0, r0, lr
 80a3dca:	fa21 f102 	lsr.w	r1, r1, r2
 80a3dce:	4414      	add	r4, r2
 80a3dd0:	e6c1      	b.n	80a3b56 <__adddf3+0xe6>
 80a3dd2:	bf00      	nop

080a3dd4 <__gedf2>:
 80a3dd4:	f04f 3cff 	mov.w	ip, #4294967295
 80a3dd8:	e006      	b.n	80a3de8 <__cmpdf2+0x4>
 80a3dda:	bf00      	nop

080a3ddc <__ledf2>:
 80a3ddc:	f04f 0c01 	mov.w	ip, #1
 80a3de0:	e002      	b.n	80a3de8 <__cmpdf2+0x4>
 80a3de2:	bf00      	nop

080a3de4 <__cmpdf2>:
 80a3de4:	f04f 0c01 	mov.w	ip, #1
 80a3de8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3dec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3df0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3df4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3df8:	bf18      	it	ne
 80a3dfa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a3dfe:	d01b      	beq.n	80a3e38 <__cmpdf2+0x54>
 80a3e00:	b001      	add	sp, #4
 80a3e02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3e06:	bf0c      	ite	eq
 80a3e08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3e0c:	ea91 0f03 	teqne	r1, r3
 80a3e10:	bf02      	ittt	eq
 80a3e12:	ea90 0f02 	teqeq	r0, r2
 80a3e16:	2000      	moveq	r0, #0
 80a3e18:	4770      	bxeq	lr
 80a3e1a:	f110 0f00 	cmn.w	r0, #0
 80a3e1e:	ea91 0f03 	teq	r1, r3
 80a3e22:	bf58      	it	pl
 80a3e24:	4299      	cmppl	r1, r3
 80a3e26:	bf08      	it	eq
 80a3e28:	4290      	cmpeq	r0, r2
 80a3e2a:	bf2c      	ite	cs
 80a3e2c:	17d8      	asrcs	r0, r3, #31
 80a3e2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3e32:	f040 0001 	orr.w	r0, r0, #1
 80a3e36:	4770      	bx	lr
 80a3e38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3e3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3e40:	d102      	bne.n	80a3e48 <__cmpdf2+0x64>
 80a3e42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3e46:	d107      	bne.n	80a3e58 <__cmpdf2+0x74>
 80a3e48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3e4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3e50:	d1d6      	bne.n	80a3e00 <__cmpdf2+0x1c>
 80a3e52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3e56:	d0d3      	beq.n	80a3e00 <__cmpdf2+0x1c>
 80a3e58:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3e5c:	4770      	bx	lr
 80a3e5e:	bf00      	nop

080a3e60 <__aeabi_cdrcmple>:
 80a3e60:	4684      	mov	ip, r0
 80a3e62:	4610      	mov	r0, r2
 80a3e64:	4662      	mov	r2, ip
 80a3e66:	468c      	mov	ip, r1
 80a3e68:	4619      	mov	r1, r3
 80a3e6a:	4663      	mov	r3, ip
 80a3e6c:	e000      	b.n	80a3e70 <__aeabi_cdcmpeq>
 80a3e6e:	bf00      	nop

080a3e70 <__aeabi_cdcmpeq>:
 80a3e70:	b501      	push	{r0, lr}
 80a3e72:	f7ff ffb7 	bl	80a3de4 <__cmpdf2>
 80a3e76:	2800      	cmp	r0, #0
 80a3e78:	bf48      	it	mi
 80a3e7a:	f110 0f00 	cmnmi.w	r0, #0
 80a3e7e:	bd01      	pop	{r0, pc}

080a3e80 <__aeabi_dcmpeq>:
 80a3e80:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3e84:	f7ff fff4 	bl	80a3e70 <__aeabi_cdcmpeq>
 80a3e88:	bf0c      	ite	eq
 80a3e8a:	2001      	moveq	r0, #1
 80a3e8c:	2000      	movne	r0, #0
 80a3e8e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3e92:	bf00      	nop

080a3e94 <__aeabi_dcmplt>:
 80a3e94:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3e98:	f7ff ffea 	bl	80a3e70 <__aeabi_cdcmpeq>
 80a3e9c:	bf34      	ite	cc
 80a3e9e:	2001      	movcc	r0, #1
 80a3ea0:	2000      	movcs	r0, #0
 80a3ea2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3ea6:	bf00      	nop

080a3ea8 <__aeabi_dcmple>:
 80a3ea8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3eac:	f7ff ffe0 	bl	80a3e70 <__aeabi_cdcmpeq>
 80a3eb0:	bf94      	ite	ls
 80a3eb2:	2001      	movls	r0, #1
 80a3eb4:	2000      	movhi	r0, #0
 80a3eb6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3eba:	bf00      	nop

080a3ebc <__aeabi_dcmpge>:
 80a3ebc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3ec0:	f7ff ffce 	bl	80a3e60 <__aeabi_cdrcmple>
 80a3ec4:	bf94      	ite	ls
 80a3ec6:	2001      	movls	r0, #1
 80a3ec8:	2000      	movhi	r0, #0
 80a3eca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3ece:	bf00      	nop

080a3ed0 <__aeabi_dcmpgt>:
 80a3ed0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3ed4:	f7ff ffc4 	bl	80a3e60 <__aeabi_cdrcmple>
 80a3ed8:	bf34      	ite	cc
 80a3eda:	2001      	movcc	r0, #1
 80a3edc:	2000      	movcs	r0, #0
 80a3ede:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3ee2:	bf00      	nop

080a3ee4 <__aeabi_frsub>:
 80a3ee4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3ee8:	e002      	b.n	80a3ef0 <__addsf3>
 80a3eea:	bf00      	nop

080a3eec <__aeabi_fsub>:
 80a3eec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3ef0 <__addsf3>:
 80a3ef0:	0042      	lsls	r2, r0, #1
 80a3ef2:	bf1f      	itttt	ne
 80a3ef4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3ef8:	ea92 0f03 	teqne	r2, r3
 80a3efc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3f00:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3f04:	d06a      	beq.n	80a3fdc <__addsf3+0xec>
 80a3f06:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3f0a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3f0e:	bfc1      	itttt	gt
 80a3f10:	18d2      	addgt	r2, r2, r3
 80a3f12:	4041      	eorgt	r1, r0
 80a3f14:	4048      	eorgt	r0, r1
 80a3f16:	4041      	eorgt	r1, r0
 80a3f18:	bfb8      	it	lt
 80a3f1a:	425b      	neglt	r3, r3
 80a3f1c:	2b19      	cmp	r3, #25
 80a3f1e:	bf88      	it	hi
 80a3f20:	4770      	bxhi	lr
 80a3f22:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3f26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3f2a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3f2e:	bf18      	it	ne
 80a3f30:	4240      	negne	r0, r0
 80a3f32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3f36:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3f3a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3f3e:	bf18      	it	ne
 80a3f40:	4249      	negne	r1, r1
 80a3f42:	ea92 0f03 	teq	r2, r3
 80a3f46:	d03f      	beq.n	80a3fc8 <__addsf3+0xd8>
 80a3f48:	f1a2 0201 	sub.w	r2, r2, #1
 80a3f4c:	fa41 fc03 	asr.w	ip, r1, r3
 80a3f50:	eb10 000c 	adds.w	r0, r0, ip
 80a3f54:	f1c3 0320 	rsb	r3, r3, #32
 80a3f58:	fa01 f103 	lsl.w	r1, r1, r3
 80a3f5c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3f60:	d502      	bpl.n	80a3f68 <__addsf3+0x78>
 80a3f62:	4249      	negs	r1, r1
 80a3f64:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3f68:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3f6c:	d313      	bcc.n	80a3f96 <__addsf3+0xa6>
 80a3f6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3f72:	d306      	bcc.n	80a3f82 <__addsf3+0x92>
 80a3f74:	0840      	lsrs	r0, r0, #1
 80a3f76:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3f7a:	f102 0201 	add.w	r2, r2, #1
 80a3f7e:	2afe      	cmp	r2, #254	; 0xfe
 80a3f80:	d251      	bcs.n	80a4026 <__addsf3+0x136>
 80a3f82:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a3f86:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3f8a:	bf08      	it	eq
 80a3f8c:	f020 0001 	biceq.w	r0, r0, #1
 80a3f90:	ea40 0003 	orr.w	r0, r0, r3
 80a3f94:	4770      	bx	lr
 80a3f96:	0049      	lsls	r1, r1, #1
 80a3f98:	eb40 0000 	adc.w	r0, r0, r0
 80a3f9c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3fa0:	f1a2 0201 	sub.w	r2, r2, #1
 80a3fa4:	d1ed      	bne.n	80a3f82 <__addsf3+0x92>
 80a3fa6:	fab0 fc80 	clz	ip, r0
 80a3faa:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3fae:	ebb2 020c 	subs.w	r2, r2, ip
 80a3fb2:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3fb6:	bfaa      	itet	ge
 80a3fb8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a3fbc:	4252      	neglt	r2, r2
 80a3fbe:	4318      	orrge	r0, r3
 80a3fc0:	bfbc      	itt	lt
 80a3fc2:	40d0      	lsrlt	r0, r2
 80a3fc4:	4318      	orrlt	r0, r3
 80a3fc6:	4770      	bx	lr
 80a3fc8:	f092 0f00 	teq	r2, #0
 80a3fcc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a3fd0:	bf06      	itte	eq
 80a3fd2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a3fd6:	3201      	addeq	r2, #1
 80a3fd8:	3b01      	subne	r3, #1
 80a3fda:	e7b5      	b.n	80a3f48 <__addsf3+0x58>
 80a3fdc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a3fe0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a3fe4:	bf18      	it	ne
 80a3fe6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3fea:	d021      	beq.n	80a4030 <__addsf3+0x140>
 80a3fec:	ea92 0f03 	teq	r2, r3
 80a3ff0:	d004      	beq.n	80a3ffc <__addsf3+0x10c>
 80a3ff2:	f092 0f00 	teq	r2, #0
 80a3ff6:	bf08      	it	eq
 80a3ff8:	4608      	moveq	r0, r1
 80a3ffa:	4770      	bx	lr
 80a3ffc:	ea90 0f01 	teq	r0, r1
 80a4000:	bf1c      	itt	ne
 80a4002:	2000      	movne	r0, #0
 80a4004:	4770      	bxne	lr
 80a4006:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a400a:	d104      	bne.n	80a4016 <__addsf3+0x126>
 80a400c:	0040      	lsls	r0, r0, #1
 80a400e:	bf28      	it	cs
 80a4010:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4014:	4770      	bx	lr
 80a4016:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a401a:	bf3c      	itt	cc
 80a401c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4020:	4770      	bxcc	lr
 80a4022:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4026:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a402a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a402e:	4770      	bx	lr
 80a4030:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4034:	bf16      	itet	ne
 80a4036:	4608      	movne	r0, r1
 80a4038:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a403c:	4601      	movne	r1, r0
 80a403e:	0242      	lsls	r2, r0, #9
 80a4040:	bf06      	itte	eq
 80a4042:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4046:	ea90 0f01 	teqeq	r0, r1
 80a404a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a404e:	4770      	bx	lr

080a4050 <__aeabi_ui2f>:
 80a4050:	f04f 0300 	mov.w	r3, #0
 80a4054:	e004      	b.n	80a4060 <__aeabi_i2f+0x8>
 80a4056:	bf00      	nop

080a4058 <__aeabi_i2f>:
 80a4058:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a405c:	bf48      	it	mi
 80a405e:	4240      	negmi	r0, r0
 80a4060:	ea5f 0c00 	movs.w	ip, r0
 80a4064:	bf08      	it	eq
 80a4066:	4770      	bxeq	lr
 80a4068:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a406c:	4601      	mov	r1, r0
 80a406e:	f04f 0000 	mov.w	r0, #0
 80a4072:	e01c      	b.n	80a40ae <__aeabi_l2f+0x2a>

080a4074 <__aeabi_ul2f>:
 80a4074:	ea50 0201 	orrs.w	r2, r0, r1
 80a4078:	bf08      	it	eq
 80a407a:	4770      	bxeq	lr
 80a407c:	f04f 0300 	mov.w	r3, #0
 80a4080:	e00a      	b.n	80a4098 <__aeabi_l2f+0x14>
 80a4082:	bf00      	nop

080a4084 <__aeabi_l2f>:
 80a4084:	ea50 0201 	orrs.w	r2, r0, r1
 80a4088:	bf08      	it	eq
 80a408a:	4770      	bxeq	lr
 80a408c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a4090:	d502      	bpl.n	80a4098 <__aeabi_l2f+0x14>
 80a4092:	4240      	negs	r0, r0
 80a4094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4098:	ea5f 0c01 	movs.w	ip, r1
 80a409c:	bf02      	ittt	eq
 80a409e:	4684      	moveq	ip, r0
 80a40a0:	4601      	moveq	r1, r0
 80a40a2:	2000      	moveq	r0, #0
 80a40a4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a40a8:	bf08      	it	eq
 80a40aa:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a40ae:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a40b2:	fabc f28c 	clz	r2, ip
 80a40b6:	3a08      	subs	r2, #8
 80a40b8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a40bc:	db10      	blt.n	80a40e0 <__aeabi_l2f+0x5c>
 80a40be:	fa01 fc02 	lsl.w	ip, r1, r2
 80a40c2:	4463      	add	r3, ip
 80a40c4:	fa00 fc02 	lsl.w	ip, r0, r2
 80a40c8:	f1c2 0220 	rsb	r2, r2, #32
 80a40cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a40d0:	fa20 f202 	lsr.w	r2, r0, r2
 80a40d4:	eb43 0002 	adc.w	r0, r3, r2
 80a40d8:	bf08      	it	eq
 80a40da:	f020 0001 	biceq.w	r0, r0, #1
 80a40de:	4770      	bx	lr
 80a40e0:	f102 0220 	add.w	r2, r2, #32
 80a40e4:	fa01 fc02 	lsl.w	ip, r1, r2
 80a40e8:	f1c2 0220 	rsb	r2, r2, #32
 80a40ec:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a40f0:	fa21 f202 	lsr.w	r2, r1, r2
 80a40f4:	eb43 0002 	adc.w	r0, r3, r2
 80a40f8:	bf08      	it	eq
 80a40fa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a40fe:	4770      	bx	lr

080a4100 <__aeabi_fmul>:
 80a4100:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4108:	bf1e      	ittt	ne
 80a410a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a410e:	ea92 0f0c 	teqne	r2, ip
 80a4112:	ea93 0f0c 	teqne	r3, ip
 80a4116:	d06f      	beq.n	80a41f8 <__aeabi_fmul+0xf8>
 80a4118:	441a      	add	r2, r3
 80a411a:	ea80 0c01 	eor.w	ip, r0, r1
 80a411e:	0240      	lsls	r0, r0, #9
 80a4120:	bf18      	it	ne
 80a4122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4126:	d01e      	beq.n	80a4166 <__aeabi_fmul+0x66>
 80a4128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a412c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4134:	fba0 3101 	umull	r3, r1, r0, r1
 80a4138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a413c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4140:	bf3e      	ittt	cc
 80a4142:	0049      	lslcc	r1, r1, #1
 80a4144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4148:	005b      	lslcc	r3, r3, #1
 80a414a:	ea40 0001 	orr.w	r0, r0, r1
 80a414e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4152:	2afd      	cmp	r2, #253	; 0xfd
 80a4154:	d81d      	bhi.n	80a4192 <__aeabi_fmul+0x92>
 80a4156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a415a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a415e:	bf08      	it	eq
 80a4160:	f020 0001 	biceq.w	r0, r0, #1
 80a4164:	4770      	bx	lr
 80a4166:	f090 0f00 	teq	r0, #0
 80a416a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a416e:	bf08      	it	eq
 80a4170:	0249      	lsleq	r1, r1, #9
 80a4172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a417a:	3a7f      	subs	r2, #127	; 0x7f
 80a417c:	bfc2      	ittt	gt
 80a417e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4186:	4770      	bxgt	lr
 80a4188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a418c:	f04f 0300 	mov.w	r3, #0
 80a4190:	3a01      	subs	r2, #1
 80a4192:	dc5d      	bgt.n	80a4250 <__aeabi_fmul+0x150>
 80a4194:	f112 0f19 	cmn.w	r2, #25
 80a4198:	bfdc      	itt	le
 80a419a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a419e:	4770      	bxle	lr
 80a41a0:	f1c2 0200 	rsb	r2, r2, #0
 80a41a4:	0041      	lsls	r1, r0, #1
 80a41a6:	fa21 f102 	lsr.w	r1, r1, r2
 80a41aa:	f1c2 0220 	rsb	r2, r2, #32
 80a41ae:	fa00 fc02 	lsl.w	ip, r0, r2
 80a41b2:	ea5f 0031 	movs.w	r0, r1, rrx
 80a41b6:	f140 0000 	adc.w	r0, r0, #0
 80a41ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a41be:	bf08      	it	eq
 80a41c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a41c4:	4770      	bx	lr
 80a41c6:	f092 0f00 	teq	r2, #0
 80a41ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a41ce:	bf02      	ittt	eq
 80a41d0:	0040      	lsleq	r0, r0, #1
 80a41d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a41d6:	3a01      	subeq	r2, #1
 80a41d8:	d0f9      	beq.n	80a41ce <__aeabi_fmul+0xce>
 80a41da:	ea40 000c 	orr.w	r0, r0, ip
 80a41de:	f093 0f00 	teq	r3, #0
 80a41e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a41e6:	bf02      	ittt	eq
 80a41e8:	0049      	lsleq	r1, r1, #1
 80a41ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a41ee:	3b01      	subeq	r3, #1
 80a41f0:	d0f9      	beq.n	80a41e6 <__aeabi_fmul+0xe6>
 80a41f2:	ea41 010c 	orr.w	r1, r1, ip
 80a41f6:	e78f      	b.n	80a4118 <__aeabi_fmul+0x18>
 80a41f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a41fc:	ea92 0f0c 	teq	r2, ip
 80a4200:	bf18      	it	ne
 80a4202:	ea93 0f0c 	teqne	r3, ip
 80a4206:	d00a      	beq.n	80a421e <__aeabi_fmul+0x11e>
 80a4208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a420c:	bf18      	it	ne
 80a420e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4212:	d1d8      	bne.n	80a41c6 <__aeabi_fmul+0xc6>
 80a4214:	ea80 0001 	eor.w	r0, r0, r1
 80a4218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a421c:	4770      	bx	lr
 80a421e:	f090 0f00 	teq	r0, #0
 80a4222:	bf17      	itett	ne
 80a4224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4228:	4608      	moveq	r0, r1
 80a422a:	f091 0f00 	teqne	r1, #0
 80a422e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4232:	d014      	beq.n	80a425e <__aeabi_fmul+0x15e>
 80a4234:	ea92 0f0c 	teq	r2, ip
 80a4238:	d101      	bne.n	80a423e <__aeabi_fmul+0x13e>
 80a423a:	0242      	lsls	r2, r0, #9
 80a423c:	d10f      	bne.n	80a425e <__aeabi_fmul+0x15e>
 80a423e:	ea93 0f0c 	teq	r3, ip
 80a4242:	d103      	bne.n	80a424c <__aeabi_fmul+0x14c>
 80a4244:	024b      	lsls	r3, r1, #9
 80a4246:	bf18      	it	ne
 80a4248:	4608      	movne	r0, r1
 80a424a:	d108      	bne.n	80a425e <__aeabi_fmul+0x15e>
 80a424c:	ea80 0001 	eor.w	r0, r0, r1
 80a4250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a425c:	4770      	bx	lr
 80a425e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4266:	4770      	bx	lr

080a4268 <__aeabi_fdiv>:
 80a4268:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a426c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4270:	bf1e      	ittt	ne
 80a4272:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4276:	ea92 0f0c 	teqne	r2, ip
 80a427a:	ea93 0f0c 	teqne	r3, ip
 80a427e:	d069      	beq.n	80a4354 <__aeabi_fdiv+0xec>
 80a4280:	eba2 0203 	sub.w	r2, r2, r3
 80a4284:	ea80 0c01 	eor.w	ip, r0, r1
 80a4288:	0249      	lsls	r1, r1, #9
 80a428a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a428e:	d037      	beq.n	80a4300 <__aeabi_fdiv+0x98>
 80a4290:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4294:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4298:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a429c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a42a0:	428b      	cmp	r3, r1
 80a42a2:	bf38      	it	cc
 80a42a4:	005b      	lslcc	r3, r3, #1
 80a42a6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a42aa:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a42ae:	428b      	cmp	r3, r1
 80a42b0:	bf24      	itt	cs
 80a42b2:	1a5b      	subcs	r3, r3, r1
 80a42b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80a42b8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a42bc:	bf24      	itt	cs
 80a42be:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a42c2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a42c6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a42ca:	bf24      	itt	cs
 80a42cc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a42d0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a42d4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a42d8:	bf24      	itt	cs
 80a42da:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a42de:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a42e2:	011b      	lsls	r3, r3, #4
 80a42e4:	bf18      	it	ne
 80a42e6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a42ea:	d1e0      	bne.n	80a42ae <__aeabi_fdiv+0x46>
 80a42ec:	2afd      	cmp	r2, #253	; 0xfd
 80a42ee:	f63f af50 	bhi.w	80a4192 <__aeabi_fmul+0x92>
 80a42f2:	428b      	cmp	r3, r1
 80a42f4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a42f8:	bf08      	it	eq
 80a42fa:	f020 0001 	biceq.w	r0, r0, #1
 80a42fe:	4770      	bx	lr
 80a4300:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4304:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4308:	327f      	adds	r2, #127	; 0x7f
 80a430a:	bfc2      	ittt	gt
 80a430c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4310:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4314:	4770      	bxgt	lr
 80a4316:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a431a:	f04f 0300 	mov.w	r3, #0
 80a431e:	3a01      	subs	r2, #1
 80a4320:	e737      	b.n	80a4192 <__aeabi_fmul+0x92>
 80a4322:	f092 0f00 	teq	r2, #0
 80a4326:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a432a:	bf02      	ittt	eq
 80a432c:	0040      	lsleq	r0, r0, #1
 80a432e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4332:	3a01      	subeq	r2, #1
 80a4334:	d0f9      	beq.n	80a432a <__aeabi_fdiv+0xc2>
 80a4336:	ea40 000c 	orr.w	r0, r0, ip
 80a433a:	f093 0f00 	teq	r3, #0
 80a433e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4342:	bf02      	ittt	eq
 80a4344:	0049      	lsleq	r1, r1, #1
 80a4346:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a434a:	3b01      	subeq	r3, #1
 80a434c:	d0f9      	beq.n	80a4342 <__aeabi_fdiv+0xda>
 80a434e:	ea41 010c 	orr.w	r1, r1, ip
 80a4352:	e795      	b.n	80a4280 <__aeabi_fdiv+0x18>
 80a4354:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4358:	ea92 0f0c 	teq	r2, ip
 80a435c:	d108      	bne.n	80a4370 <__aeabi_fdiv+0x108>
 80a435e:	0242      	lsls	r2, r0, #9
 80a4360:	f47f af7d 	bne.w	80a425e <__aeabi_fmul+0x15e>
 80a4364:	ea93 0f0c 	teq	r3, ip
 80a4368:	f47f af70 	bne.w	80a424c <__aeabi_fmul+0x14c>
 80a436c:	4608      	mov	r0, r1
 80a436e:	e776      	b.n	80a425e <__aeabi_fmul+0x15e>
 80a4370:	ea93 0f0c 	teq	r3, ip
 80a4374:	d104      	bne.n	80a4380 <__aeabi_fdiv+0x118>
 80a4376:	024b      	lsls	r3, r1, #9
 80a4378:	f43f af4c 	beq.w	80a4214 <__aeabi_fmul+0x114>
 80a437c:	4608      	mov	r0, r1
 80a437e:	e76e      	b.n	80a425e <__aeabi_fmul+0x15e>
 80a4380:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4384:	bf18      	it	ne
 80a4386:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a438a:	d1ca      	bne.n	80a4322 <__aeabi_fdiv+0xba>
 80a438c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a4390:	f47f af5c 	bne.w	80a424c <__aeabi_fmul+0x14c>
 80a4394:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4398:	f47f af3c 	bne.w	80a4214 <__aeabi_fmul+0x114>
 80a439c:	e75f      	b.n	80a425e <__aeabi_fmul+0x15e>
 80a439e:	bf00      	nop

080a43a0 <__aeabi_ldivmod>:
 80a43a0:	b97b      	cbnz	r3, 80a43c2 <__aeabi_ldivmod+0x22>
 80a43a2:	b972      	cbnz	r2, 80a43c2 <__aeabi_ldivmod+0x22>
 80a43a4:	2900      	cmp	r1, #0
 80a43a6:	bfbe      	ittt	lt
 80a43a8:	2000      	movlt	r0, #0
 80a43aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a43ae:	e006      	blt.n	80a43be <__aeabi_ldivmod+0x1e>
 80a43b0:	bf08      	it	eq
 80a43b2:	2800      	cmpeq	r0, #0
 80a43b4:	bf1c      	itt	ne
 80a43b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a43ba:	f04f 30ff 	movne.w	r0, #4294967295
 80a43be:	f000 b9b5 	b.w	80a472c <__aeabi_idiv0>
 80a43c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80a43c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a43ca:	2900      	cmp	r1, #0
 80a43cc:	db09      	blt.n	80a43e2 <__aeabi_ldivmod+0x42>
 80a43ce:	2b00      	cmp	r3, #0
 80a43d0:	db1a      	blt.n	80a4408 <__aeabi_ldivmod+0x68>
 80a43d2:	f000 f835 	bl	80a4440 <__udivmoddi4>
 80a43d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a43da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a43de:	b004      	add	sp, #16
 80a43e0:	4770      	bx	lr
 80a43e2:	4240      	negs	r0, r0
 80a43e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a43e8:	2b00      	cmp	r3, #0
 80a43ea:	db1b      	blt.n	80a4424 <__aeabi_ldivmod+0x84>
 80a43ec:	f000 f828 	bl	80a4440 <__udivmoddi4>
 80a43f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a43f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a43f8:	b004      	add	sp, #16
 80a43fa:	4240      	negs	r0, r0
 80a43fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4400:	4252      	negs	r2, r2
 80a4402:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4406:	4770      	bx	lr
 80a4408:	4252      	negs	r2, r2
 80a440a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a440e:	f000 f817 	bl	80a4440 <__udivmoddi4>
 80a4412:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4416:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a441a:	b004      	add	sp, #16
 80a441c:	4240      	negs	r0, r0
 80a441e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4422:	4770      	bx	lr
 80a4424:	4252      	negs	r2, r2
 80a4426:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a442a:	f000 f809 	bl	80a4440 <__udivmoddi4>
 80a442e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4432:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4436:	b004      	add	sp, #16
 80a4438:	4252      	negs	r2, r2
 80a443a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a443e:	4770      	bx	lr

080a4440 <__udivmoddi4>:
 80a4440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4444:	468c      	mov	ip, r1
 80a4446:	460c      	mov	r4, r1
 80a4448:	4605      	mov	r5, r0
 80a444a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a444c:	2b00      	cmp	r3, #0
 80a444e:	d14f      	bne.n	80a44f0 <__udivmoddi4+0xb0>
 80a4450:	428a      	cmp	r2, r1
 80a4452:	4617      	mov	r7, r2
 80a4454:	d96b      	bls.n	80a452e <__udivmoddi4+0xee>
 80a4456:	fab2 fe82 	clz	lr, r2
 80a445a:	f1be 0f00 	cmp.w	lr, #0
 80a445e:	d00b      	beq.n	80a4478 <__udivmoddi4+0x38>
 80a4460:	f1ce 0520 	rsb	r5, lr, #32
 80a4464:	fa20 f505 	lsr.w	r5, r0, r5
 80a4468:	fa01 f30e 	lsl.w	r3, r1, lr
 80a446c:	ea45 0c03 	orr.w	ip, r5, r3
 80a4470:	fa02 f70e 	lsl.w	r7, r2, lr
 80a4474:	fa00 f50e 	lsl.w	r5, r0, lr
 80a4478:	0c39      	lsrs	r1, r7, #16
 80a447a:	fbbc f0f1 	udiv	r0, ip, r1
 80a447e:	b2ba      	uxth	r2, r7
 80a4480:	fb01 c310 	mls	r3, r1, r0, ip
 80a4484:	fb00 f802 	mul.w	r8, r0, r2
 80a4488:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a448c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a4490:	45a0      	cmp	r8, r4
 80a4492:	d909      	bls.n	80a44a8 <__udivmoddi4+0x68>
 80a4494:	19e4      	adds	r4, r4, r7
 80a4496:	f100 33ff 	add.w	r3, r0, #4294967295
 80a449a:	f080 8128 	bcs.w	80a46ee <__udivmoddi4+0x2ae>
 80a449e:	45a0      	cmp	r8, r4
 80a44a0:	f240 8125 	bls.w	80a46ee <__udivmoddi4+0x2ae>
 80a44a4:	3802      	subs	r0, #2
 80a44a6:	443c      	add	r4, r7
 80a44a8:	ebc8 0404 	rsb	r4, r8, r4
 80a44ac:	fbb4 f3f1 	udiv	r3, r4, r1
 80a44b0:	fb01 4c13 	mls	ip, r1, r3, r4
 80a44b4:	fb03 f202 	mul.w	r2, r3, r2
 80a44b8:	b2ac      	uxth	r4, r5
 80a44ba:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a44be:	428a      	cmp	r2, r1
 80a44c0:	d909      	bls.n	80a44d6 <__udivmoddi4+0x96>
 80a44c2:	19c9      	adds	r1, r1, r7
 80a44c4:	f103 34ff 	add.w	r4, r3, #4294967295
 80a44c8:	f080 810f 	bcs.w	80a46ea <__udivmoddi4+0x2aa>
 80a44cc:	428a      	cmp	r2, r1
 80a44ce:	f240 810c 	bls.w	80a46ea <__udivmoddi4+0x2aa>
 80a44d2:	3b02      	subs	r3, #2
 80a44d4:	4439      	add	r1, r7
 80a44d6:	1a8a      	subs	r2, r1, r2
 80a44d8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a44dc:	2100      	movs	r1, #0
 80a44de:	2e00      	cmp	r6, #0
 80a44e0:	d063      	beq.n	80a45aa <__udivmoddi4+0x16a>
 80a44e2:	fa22 f20e 	lsr.w	r2, r2, lr
 80a44e6:	2300      	movs	r3, #0
 80a44e8:	e886 000c 	stmia.w	r6, {r2, r3}
 80a44ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a44f0:	428b      	cmp	r3, r1
 80a44f2:	d907      	bls.n	80a4504 <__udivmoddi4+0xc4>
 80a44f4:	2e00      	cmp	r6, #0
 80a44f6:	d056      	beq.n	80a45a6 <__udivmoddi4+0x166>
 80a44f8:	2100      	movs	r1, #0
 80a44fa:	e886 0011 	stmia.w	r6, {r0, r4}
 80a44fe:	4608      	mov	r0, r1
 80a4500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4504:	fab3 f183 	clz	r1, r3
 80a4508:	2900      	cmp	r1, #0
 80a450a:	f040 8093 	bne.w	80a4634 <__udivmoddi4+0x1f4>
 80a450e:	42a3      	cmp	r3, r4
 80a4510:	d302      	bcc.n	80a4518 <__udivmoddi4+0xd8>
 80a4512:	4282      	cmp	r2, r0
 80a4514:	f200 80fe 	bhi.w	80a4714 <__udivmoddi4+0x2d4>
 80a4518:	1a85      	subs	r5, r0, r2
 80a451a:	eb64 0303 	sbc.w	r3, r4, r3
 80a451e:	469c      	mov	ip, r3
 80a4520:	2001      	movs	r0, #1
 80a4522:	2e00      	cmp	r6, #0
 80a4524:	d041      	beq.n	80a45aa <__udivmoddi4+0x16a>
 80a4526:	e886 1020 	stmia.w	r6, {r5, ip}
 80a452a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a452e:	b912      	cbnz	r2, 80a4536 <__udivmoddi4+0xf6>
 80a4530:	2701      	movs	r7, #1
 80a4532:	fbb7 f7f2 	udiv	r7, r7, r2
 80a4536:	fab7 fe87 	clz	lr, r7
 80a453a:	f1be 0f00 	cmp.w	lr, #0
 80a453e:	d136      	bne.n	80a45ae <__udivmoddi4+0x16e>
 80a4540:	1be4      	subs	r4, r4, r7
 80a4542:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a4546:	fa1f f987 	uxth.w	r9, r7
 80a454a:	2101      	movs	r1, #1
 80a454c:	fbb4 f3f8 	udiv	r3, r4, r8
 80a4550:	fb08 4413 	mls	r4, r8, r3, r4
 80a4554:	fb09 f203 	mul.w	r2, r9, r3
 80a4558:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a455c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a4560:	42a2      	cmp	r2, r4
 80a4562:	d907      	bls.n	80a4574 <__udivmoddi4+0x134>
 80a4564:	19e4      	adds	r4, r4, r7
 80a4566:	f103 30ff 	add.w	r0, r3, #4294967295
 80a456a:	d202      	bcs.n	80a4572 <__udivmoddi4+0x132>
 80a456c:	42a2      	cmp	r2, r4
 80a456e:	f200 80d3 	bhi.w	80a4718 <__udivmoddi4+0x2d8>
 80a4572:	4603      	mov	r3, r0
 80a4574:	1aa4      	subs	r4, r4, r2
 80a4576:	fbb4 f0f8 	udiv	r0, r4, r8
 80a457a:	fb08 4810 	mls	r8, r8, r0, r4
 80a457e:	fb09 f900 	mul.w	r9, r9, r0
 80a4582:	b2ac      	uxth	r4, r5
 80a4584:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a4588:	4591      	cmp	r9, r2
 80a458a:	d907      	bls.n	80a459c <__udivmoddi4+0x15c>
 80a458c:	19d2      	adds	r2, r2, r7
 80a458e:	f100 34ff 	add.w	r4, r0, #4294967295
 80a4592:	d202      	bcs.n	80a459a <__udivmoddi4+0x15a>
 80a4594:	4591      	cmp	r9, r2
 80a4596:	f200 80ba 	bhi.w	80a470e <__udivmoddi4+0x2ce>
 80a459a:	4620      	mov	r0, r4
 80a459c:	ebc9 0202 	rsb	r2, r9, r2
 80a45a0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a45a4:	e79b      	b.n	80a44de <__udivmoddi4+0x9e>
 80a45a6:	4631      	mov	r1, r6
 80a45a8:	4630      	mov	r0, r6
 80a45aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a45ae:	fa07 f70e 	lsl.w	r7, r7, lr
 80a45b2:	f1ce 0c20 	rsb	ip, lr, #32
 80a45b6:	fa24 f30c 	lsr.w	r3, r4, ip
 80a45ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a45be:	fbb3 faf8 	udiv	sl, r3, r8
 80a45c2:	fa1f f987 	uxth.w	r9, r7
 80a45c6:	fb08 351a 	mls	r5, r8, sl, r3
 80a45ca:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a45ce:	fa04 f40e 	lsl.w	r4, r4, lr
 80a45d2:	fb0a fb09 	mul.w	fp, sl, r9
 80a45d6:	ea4c 0c04 	orr.w	ip, ip, r4
 80a45da:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a45de:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a45e2:	459b      	cmp	fp, r3
 80a45e4:	fa00 f50e 	lsl.w	r5, r0, lr
 80a45e8:	d90a      	bls.n	80a4600 <__udivmoddi4+0x1c0>
 80a45ea:	19db      	adds	r3, r3, r7
 80a45ec:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a45f0:	f080 808b 	bcs.w	80a470a <__udivmoddi4+0x2ca>
 80a45f4:	459b      	cmp	fp, r3
 80a45f6:	f240 8088 	bls.w	80a470a <__udivmoddi4+0x2ca>
 80a45fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80a45fe:	443b      	add	r3, r7
 80a4600:	ebcb 0303 	rsb	r3, fp, r3
 80a4604:	fbb3 f0f8 	udiv	r0, r3, r8
 80a4608:	fb08 3310 	mls	r3, r8, r0, r3
 80a460c:	fb00 f409 	mul.w	r4, r0, r9
 80a4610:	fa1f fc8c 	uxth.w	ip, ip
 80a4614:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a4618:	429c      	cmp	r4, r3
 80a461a:	d907      	bls.n	80a462c <__udivmoddi4+0x1ec>
 80a461c:	19db      	adds	r3, r3, r7
 80a461e:	f100 32ff 	add.w	r2, r0, #4294967295
 80a4622:	d26e      	bcs.n	80a4702 <__udivmoddi4+0x2c2>
 80a4624:	429c      	cmp	r4, r3
 80a4626:	d96c      	bls.n	80a4702 <__udivmoddi4+0x2c2>
 80a4628:	3802      	subs	r0, #2
 80a462a:	443b      	add	r3, r7
 80a462c:	1b1c      	subs	r4, r3, r4
 80a462e:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a4632:	e78b      	b.n	80a454c <__udivmoddi4+0x10c>
 80a4634:	f1c1 0e20 	rsb	lr, r1, #32
 80a4638:	408b      	lsls	r3, r1
 80a463a:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a463e:	ea4c 0c03 	orr.w	ip, ip, r3
 80a4642:	fa24 f70e 	lsr.w	r7, r4, lr
 80a4646:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a464a:	fbb7 faf9 	udiv	sl, r7, r9
 80a464e:	fa1f f38c 	uxth.w	r3, ip
 80a4652:	fb09 771a 	mls	r7, r9, sl, r7
 80a4656:	fa20 f80e 	lsr.w	r8, r0, lr
 80a465a:	408c      	lsls	r4, r1
 80a465c:	fb0a f503 	mul.w	r5, sl, r3
 80a4660:	ea48 0404 	orr.w	r4, r8, r4
 80a4664:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a4668:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a466c:	42bd      	cmp	r5, r7
 80a466e:	fa02 f201 	lsl.w	r2, r2, r1
 80a4672:	fa00 fb01 	lsl.w	fp, r0, r1
 80a4676:	d909      	bls.n	80a468c <__udivmoddi4+0x24c>
 80a4678:	eb17 070c 	adds.w	r7, r7, ip
 80a467c:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a4680:	d241      	bcs.n	80a4706 <__udivmoddi4+0x2c6>
 80a4682:	42bd      	cmp	r5, r7
 80a4684:	d93f      	bls.n	80a4706 <__udivmoddi4+0x2c6>
 80a4686:	f1aa 0a02 	sub.w	sl, sl, #2
 80a468a:	4467      	add	r7, ip
 80a468c:	1b7f      	subs	r7, r7, r5
 80a468e:	fbb7 f5f9 	udiv	r5, r7, r9
 80a4692:	fb09 7715 	mls	r7, r9, r5, r7
 80a4696:	fb05 f303 	mul.w	r3, r5, r3
 80a469a:	b2a4      	uxth	r4, r4
 80a469c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a46a0:	42bb      	cmp	r3, r7
 80a46a2:	d908      	bls.n	80a46b6 <__udivmoddi4+0x276>
 80a46a4:	eb17 070c 	adds.w	r7, r7, ip
 80a46a8:	f105 30ff 	add.w	r0, r5, #4294967295
 80a46ac:	d227      	bcs.n	80a46fe <__udivmoddi4+0x2be>
 80a46ae:	42bb      	cmp	r3, r7
 80a46b0:	d925      	bls.n	80a46fe <__udivmoddi4+0x2be>
 80a46b2:	3d02      	subs	r5, #2
 80a46b4:	4467      	add	r7, ip
 80a46b6:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a46ba:	fba0 8902 	umull	r8, r9, r0, r2
 80a46be:	1aff      	subs	r7, r7, r3
 80a46c0:	454f      	cmp	r7, r9
 80a46c2:	4645      	mov	r5, r8
 80a46c4:	464c      	mov	r4, r9
 80a46c6:	d314      	bcc.n	80a46f2 <__udivmoddi4+0x2b2>
 80a46c8:	d029      	beq.n	80a471e <__udivmoddi4+0x2de>
 80a46ca:	b366      	cbz	r6, 80a4726 <__udivmoddi4+0x2e6>
 80a46cc:	ebbb 0305 	subs.w	r3, fp, r5
 80a46d0:	eb67 0704 	sbc.w	r7, r7, r4
 80a46d4:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a46d8:	40cb      	lsrs	r3, r1
 80a46da:	40cf      	lsrs	r7, r1
 80a46dc:	ea4e 0303 	orr.w	r3, lr, r3
 80a46e0:	e886 0088 	stmia.w	r6, {r3, r7}
 80a46e4:	2100      	movs	r1, #0
 80a46e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a46ea:	4623      	mov	r3, r4
 80a46ec:	e6f3      	b.n	80a44d6 <__udivmoddi4+0x96>
 80a46ee:	4618      	mov	r0, r3
 80a46f0:	e6da      	b.n	80a44a8 <__udivmoddi4+0x68>
 80a46f2:	ebb8 0502 	subs.w	r5, r8, r2
 80a46f6:	eb69 040c 	sbc.w	r4, r9, ip
 80a46fa:	3801      	subs	r0, #1
 80a46fc:	e7e5      	b.n	80a46ca <__udivmoddi4+0x28a>
 80a46fe:	4605      	mov	r5, r0
 80a4700:	e7d9      	b.n	80a46b6 <__udivmoddi4+0x276>
 80a4702:	4610      	mov	r0, r2
 80a4704:	e792      	b.n	80a462c <__udivmoddi4+0x1ec>
 80a4706:	4682      	mov	sl, r0
 80a4708:	e7c0      	b.n	80a468c <__udivmoddi4+0x24c>
 80a470a:	4692      	mov	sl, r2
 80a470c:	e778      	b.n	80a4600 <__udivmoddi4+0x1c0>
 80a470e:	3802      	subs	r0, #2
 80a4710:	443a      	add	r2, r7
 80a4712:	e743      	b.n	80a459c <__udivmoddi4+0x15c>
 80a4714:	4608      	mov	r0, r1
 80a4716:	e704      	b.n	80a4522 <__udivmoddi4+0xe2>
 80a4718:	3b02      	subs	r3, #2
 80a471a:	443c      	add	r4, r7
 80a471c:	e72a      	b.n	80a4574 <__udivmoddi4+0x134>
 80a471e:	45c3      	cmp	fp, r8
 80a4720:	d3e7      	bcc.n	80a46f2 <__udivmoddi4+0x2b2>
 80a4722:	463c      	mov	r4, r7
 80a4724:	e7d1      	b.n	80a46ca <__udivmoddi4+0x28a>
 80a4726:	4631      	mov	r1, r6
 80a4728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a472c <__aeabi_idiv0>:
 80a472c:	4770      	bx	lr
 80a472e:	bf00      	nop

080a4730 <asctime>:
 80a4730:	4b09      	ldr	r3, [pc, #36]	; (80a4758 <asctime+0x28>)
 80a4732:	b570      	push	{r4, r5, r6, lr}
 80a4734:	681c      	ldr	r4, [r3, #0]
 80a4736:	4606      	mov	r6, r0
 80a4738:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80a473a:	b93d      	cbnz	r5, 80a474c <asctime+0x1c>
 80a473c:	201a      	movs	r0, #26
 80a473e:	f7fd fe7d 	bl	80a243c <malloc>
 80a4742:	221a      	movs	r2, #26
 80a4744:	6420      	str	r0, [r4, #64]	; 0x40
 80a4746:	4629      	mov	r1, r5
 80a4748:	f000 f93f 	bl	80a49ca <memset>
 80a474c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80a474e:	4630      	mov	r0, r6
 80a4750:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a4754:	f000 b802 	b.w	80a475c <asctime_r>
 80a4758:	200004b4 	.word	0x200004b4

080a475c <asctime_r>:
 80a475c:	b510      	push	{r4, lr}
 80a475e:	460c      	mov	r4, r1
 80a4760:	6941      	ldr	r1, [r0, #20]
 80a4762:	b086      	sub	sp, #24
 80a4764:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80a4768:	6903      	ldr	r3, [r0, #16]
 80a476a:	6982      	ldr	r2, [r0, #24]
 80a476c:	9104      	str	r1, [sp, #16]
 80a476e:	6801      	ldr	r1, [r0, #0]
 80a4770:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80a4774:	9103      	str	r1, [sp, #12]
 80a4776:	6841      	ldr	r1, [r0, #4]
 80a4778:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80a477c:	9102      	str	r1, [sp, #8]
 80a477e:	6881      	ldr	r1, [r0, #8]
 80a4780:	9101      	str	r1, [sp, #4]
 80a4782:	68c1      	ldr	r1, [r0, #12]
 80a4784:	4620      	mov	r0, r4
 80a4786:	9100      	str	r1, [sp, #0]
 80a4788:	4904      	ldr	r1, [pc, #16]	; (80a479c <asctime_r+0x40>)
 80a478a:	440b      	add	r3, r1
 80a478c:	4904      	ldr	r1, [pc, #16]	; (80a47a0 <asctime_r+0x44>)
 80a478e:	440a      	add	r2, r1
 80a4790:	4904      	ldr	r1, [pc, #16]	; (80a47a4 <asctime_r+0x48>)
 80a4792:	f7fd fe73 	bl	80a247c <siprintf>
 80a4796:	4620      	mov	r0, r4
 80a4798:	b006      	add	sp, #24
 80a479a:	bd10      	pop	{r4, pc}
 80a479c:	080a5b45 	.word	0x080a5b45
 80a47a0:	080a5b30 	.word	0x080a5b30
 80a47a4:	080a5b69 	.word	0x080a5b69

080a47a8 <__cxa_atexit>:
 80a47a8:	b510      	push	{r4, lr}
 80a47aa:	4c05      	ldr	r4, [pc, #20]	; (80a47c0 <__cxa_atexit+0x18>)
 80a47ac:	4613      	mov	r3, r2
 80a47ae:	b12c      	cbz	r4, 80a47bc <__cxa_atexit+0x14>
 80a47b0:	460a      	mov	r2, r1
 80a47b2:	4601      	mov	r1, r0
 80a47b4:	2002      	movs	r0, #2
 80a47b6:	f3af 8000 	nop.w
 80a47ba:	bd10      	pop	{r4, pc}
 80a47bc:	4620      	mov	r0, r4
 80a47be:	bd10      	pop	{r4, pc}
 80a47c0:	00000000 	.word	0x00000000

080a47c4 <localtime>:
 80a47c4:	b538      	push	{r3, r4, r5, lr}
 80a47c6:	4b07      	ldr	r3, [pc, #28]	; (80a47e4 <localtime+0x20>)
 80a47c8:	4605      	mov	r5, r0
 80a47ca:	681c      	ldr	r4, [r3, #0]
 80a47cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a47ce:	b91b      	cbnz	r3, 80a47d8 <localtime+0x14>
 80a47d0:	2024      	movs	r0, #36	; 0x24
 80a47d2:	f7fd fe33 	bl	80a243c <malloc>
 80a47d6:	63e0      	str	r0, [r4, #60]	; 0x3c
 80a47d8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80a47da:	4628      	mov	r0, r5
 80a47dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a47e0:	f000 b802 	b.w	80a47e8 <localtime_r>
 80a47e4:	200004b4 	.word	0x200004b4

080a47e8 <localtime_r>:
 80a47e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a47ec:	460c      	mov	r4, r1
 80a47ee:	4680      	mov	r8, r0
 80a47f0:	f000 fc48 	bl	80a5084 <__gettzinfo>
 80a47f4:	4621      	mov	r1, r4
 80a47f6:	4607      	mov	r7, r0
 80a47f8:	4640      	mov	r0, r8
 80a47fa:	f000 fc47 	bl	80a508c <gmtime_r>
 80a47fe:	6946      	ldr	r6, [r0, #20]
 80a4800:	4604      	mov	r4, r0
 80a4802:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80a4806:	07b3      	lsls	r3, r6, #30
 80a4808:	d105      	bne.n	80a4816 <localtime_r+0x2e>
 80a480a:	2264      	movs	r2, #100	; 0x64
 80a480c:	fb96 f3f2 	sdiv	r3, r6, r2
 80a4810:	fb02 6313 	mls	r3, r2, r3, r6
 80a4814:	b94b      	cbnz	r3, 80a482a <localtime_r+0x42>
 80a4816:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80a481a:	fb96 f3f5 	sdiv	r3, r6, r5
 80a481e:	fb05 6513 	mls	r5, r5, r3, r6
 80a4822:	fab5 f385 	clz	r3, r5
 80a4826:	095b      	lsrs	r3, r3, #5
 80a4828:	e000      	b.n	80a482c <localtime_r+0x44>
 80a482a:	2301      	movs	r3, #1
 80a482c:	4a5f      	ldr	r2, [pc, #380]	; (80a49ac <localtime_r+0x1c4>)
 80a482e:	2530      	movs	r5, #48	; 0x30
 80a4830:	fb05 2503 	mla	r5, r5, r3, r2
 80a4834:	f000 fa5a 	bl	80a4cec <__tz_lock>
 80a4838:	f000 fa5a 	bl	80a4cf0 <_tzset_unlocked>
 80a483c:	4b5c      	ldr	r3, [pc, #368]	; (80a49b0 <localtime_r+0x1c8>)
 80a483e:	681b      	ldr	r3, [r3, #0]
 80a4840:	b1f3      	cbz	r3, 80a4880 <localtime_r+0x98>
 80a4842:	687b      	ldr	r3, [r7, #4]
 80a4844:	429e      	cmp	r6, r3
 80a4846:	d105      	bne.n	80a4854 <localtime_r+0x6c>
 80a4848:	6839      	ldr	r1, [r7, #0]
 80a484a:	f8d8 3000 	ldr.w	r3, [r8]
 80a484e:	69fa      	ldr	r2, [r7, #28]
 80a4850:	b941      	cbnz	r1, 80a4864 <localtime_r+0x7c>
 80a4852:	e00a      	b.n	80a486a <localtime_r+0x82>
 80a4854:	4630      	mov	r0, r6
 80a4856:	f000 f9a1 	bl	80a4b9c <__tzcalc_limits>
 80a485a:	2800      	cmp	r0, #0
 80a485c:	d1f4      	bne.n	80a4848 <localtime_r+0x60>
 80a485e:	f04f 33ff 	mov.w	r3, #4294967295
 80a4862:	e00d      	b.n	80a4880 <localtime_r+0x98>
 80a4864:	4293      	cmp	r3, r2
 80a4866:	db08      	blt.n	80a487a <localtime_r+0x92>
 80a4868:	e001      	b.n	80a486e <localtime_r+0x86>
 80a486a:	4293      	cmp	r3, r2
 80a486c:	da07      	bge.n	80a487e <localtime_r+0x96>
 80a486e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80a4870:	4293      	cmp	r3, r2
 80a4872:	bfac      	ite	ge
 80a4874:	2300      	movge	r3, #0
 80a4876:	2301      	movlt	r3, #1
 80a4878:	e002      	b.n	80a4880 <localtime_r+0x98>
 80a487a:	2300      	movs	r3, #0
 80a487c:	e000      	b.n	80a4880 <localtime_r+0x98>
 80a487e:	2301      	movs	r3, #1
 80a4880:	6223      	str	r3, [r4, #32]
 80a4882:	6a23      	ldr	r3, [r4, #32]
 80a4884:	203c      	movs	r0, #60	; 0x3c
 80a4886:	2b01      	cmp	r3, #1
 80a4888:	bf0c      	ite	eq
 80a488a:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80a488c:	6a39      	ldrne	r1, [r7, #32]
 80a488e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80a4892:	fb91 f6f3 	sdiv	r6, r1, r3
 80a4896:	fb03 1316 	mls	r3, r3, r6, r1
 80a489a:	fb93 f2f0 	sdiv	r2, r3, r0
 80a489e:	fb00 3012 	mls	r0, r0, r2, r3
 80a48a2:	6861      	ldr	r1, [r4, #4]
 80a48a4:	6823      	ldr	r3, [r4, #0]
 80a48a6:	1a89      	subs	r1, r1, r2
 80a48a8:	68a2      	ldr	r2, [r4, #8]
 80a48aa:	1a1b      	subs	r3, r3, r0
 80a48ac:	1b92      	subs	r2, r2, r6
 80a48ae:	2b3b      	cmp	r3, #59	; 0x3b
 80a48b0:	6023      	str	r3, [r4, #0]
 80a48b2:	6061      	str	r1, [r4, #4]
 80a48b4:	60a2      	str	r2, [r4, #8]
 80a48b6:	dd03      	ble.n	80a48c0 <localtime_r+0xd8>
 80a48b8:	3101      	adds	r1, #1
 80a48ba:	6061      	str	r1, [r4, #4]
 80a48bc:	3b3c      	subs	r3, #60	; 0x3c
 80a48be:	e004      	b.n	80a48ca <localtime_r+0xe2>
 80a48c0:	2b00      	cmp	r3, #0
 80a48c2:	da03      	bge.n	80a48cc <localtime_r+0xe4>
 80a48c4:	3901      	subs	r1, #1
 80a48c6:	6061      	str	r1, [r4, #4]
 80a48c8:	333c      	adds	r3, #60	; 0x3c
 80a48ca:	6023      	str	r3, [r4, #0]
 80a48cc:	6863      	ldr	r3, [r4, #4]
 80a48ce:	2b3b      	cmp	r3, #59	; 0x3b
 80a48d0:	dd03      	ble.n	80a48da <localtime_r+0xf2>
 80a48d2:	3201      	adds	r2, #1
 80a48d4:	60a2      	str	r2, [r4, #8]
 80a48d6:	3b3c      	subs	r3, #60	; 0x3c
 80a48d8:	e004      	b.n	80a48e4 <localtime_r+0xfc>
 80a48da:	2b00      	cmp	r3, #0
 80a48dc:	da03      	bge.n	80a48e6 <localtime_r+0xfe>
 80a48de:	3a01      	subs	r2, #1
 80a48e0:	60a2      	str	r2, [r4, #8]
 80a48e2:	333c      	adds	r3, #60	; 0x3c
 80a48e4:	6063      	str	r3, [r4, #4]
 80a48e6:	68a3      	ldr	r3, [r4, #8]
 80a48e8:	2b17      	cmp	r3, #23
 80a48ea:	dd22      	ble.n	80a4932 <localtime_r+0x14a>
 80a48ec:	69e2      	ldr	r2, [r4, #28]
 80a48ee:	3b18      	subs	r3, #24
 80a48f0:	3201      	adds	r2, #1
 80a48f2:	61e2      	str	r2, [r4, #28]
 80a48f4:	69a2      	ldr	r2, [r4, #24]
 80a48f6:	60a3      	str	r3, [r4, #8]
 80a48f8:	3201      	adds	r2, #1
 80a48fa:	2a06      	cmp	r2, #6
 80a48fc:	bfc8      	it	gt
 80a48fe:	2200      	movgt	r2, #0
 80a4900:	61a2      	str	r2, [r4, #24]
 80a4902:	68e2      	ldr	r2, [r4, #12]
 80a4904:	6923      	ldr	r3, [r4, #16]
 80a4906:	3201      	adds	r2, #1
 80a4908:	60e2      	str	r2, [r4, #12]
 80a490a:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80a490e:	428a      	cmp	r2, r1
 80a4910:	dd46      	ble.n	80a49a0 <localtime_r+0x1b8>
 80a4912:	3301      	adds	r3, #1
 80a4914:	2b0c      	cmp	r3, #12
 80a4916:	bf08      	it	eq
 80a4918:	6963      	ldreq	r3, [r4, #20]
 80a491a:	eba2 0201 	sub.w	r2, r2, r1
 80a491e:	60e2      	str	r2, [r4, #12]
 80a4920:	bf05      	ittet	eq
 80a4922:	3301      	addeq	r3, #1
 80a4924:	2200      	moveq	r2, #0
 80a4926:	6123      	strne	r3, [r4, #16]
 80a4928:	6122      	streq	r2, [r4, #16]
 80a492a:	bf04      	itt	eq
 80a492c:	6163      	streq	r3, [r4, #20]
 80a492e:	61e2      	streq	r2, [r4, #28]
 80a4930:	e036      	b.n	80a49a0 <localtime_r+0x1b8>
 80a4932:	2b00      	cmp	r3, #0
 80a4934:	da34      	bge.n	80a49a0 <localtime_r+0x1b8>
 80a4936:	69e2      	ldr	r2, [r4, #28]
 80a4938:	3318      	adds	r3, #24
 80a493a:	3a01      	subs	r2, #1
 80a493c:	61e2      	str	r2, [r4, #28]
 80a493e:	69a2      	ldr	r2, [r4, #24]
 80a4940:	60a3      	str	r3, [r4, #8]
 80a4942:	3a01      	subs	r2, #1
 80a4944:	bf48      	it	mi
 80a4946:	2206      	movmi	r2, #6
 80a4948:	61a2      	str	r2, [r4, #24]
 80a494a:	68e2      	ldr	r2, [r4, #12]
 80a494c:	3a01      	subs	r2, #1
 80a494e:	60e2      	str	r2, [r4, #12]
 80a4950:	bb32      	cbnz	r2, 80a49a0 <localtime_r+0x1b8>
 80a4952:	6923      	ldr	r3, [r4, #16]
 80a4954:	3b01      	subs	r3, #1
 80a4956:	d401      	bmi.n	80a495c <localtime_r+0x174>
 80a4958:	6123      	str	r3, [r4, #16]
 80a495a:	e01d      	b.n	80a4998 <localtime_r+0x1b0>
 80a495c:	230b      	movs	r3, #11
 80a495e:	6123      	str	r3, [r4, #16]
 80a4960:	6963      	ldr	r3, [r4, #20]
 80a4962:	1e5a      	subs	r2, r3, #1
 80a4964:	f012 0f03 	tst.w	r2, #3
 80a4968:	6162      	str	r2, [r4, #20]
 80a496a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80a496e:	d105      	bne.n	80a497c <localtime_r+0x194>
 80a4970:	2164      	movs	r1, #100	; 0x64
 80a4972:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4976:	fb01 3212 	mls	r2, r1, r2, r3
 80a497a:	b94a      	cbnz	r2, 80a4990 <localtime_r+0x1a8>
 80a497c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80a4980:	fb93 f2f1 	sdiv	r2, r3, r1
 80a4984:	fb01 3312 	mls	r3, r1, r2, r3
 80a4988:	fab3 f383 	clz	r3, r3
 80a498c:	095b      	lsrs	r3, r3, #5
 80a498e:	e000      	b.n	80a4992 <localtime_r+0x1aa>
 80a4990:	2301      	movs	r3, #1
 80a4992:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80a4996:	61e3      	str	r3, [r4, #28]
 80a4998:	6923      	ldr	r3, [r4, #16]
 80a499a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80a499e:	60e3      	str	r3, [r4, #12]
 80a49a0:	f000 f9a5 	bl	80a4cee <__tz_unlock>
 80a49a4:	4620      	mov	r0, r4
 80a49a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a49aa:	bf00      	nop
 80a49ac:	080a5cf0 	.word	0x080a5cf0
 80a49b0:	20000bb0 	.word	0x20000bb0

080a49b4 <memcpy>:
 80a49b4:	b510      	push	{r4, lr}
 80a49b6:	1e43      	subs	r3, r0, #1
 80a49b8:	440a      	add	r2, r1
 80a49ba:	4291      	cmp	r1, r2
 80a49bc:	d004      	beq.n	80a49c8 <memcpy+0x14>
 80a49be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a49c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a49c6:	e7f8      	b.n	80a49ba <memcpy+0x6>
 80a49c8:	bd10      	pop	{r4, pc}

080a49ca <memset>:
 80a49ca:	4603      	mov	r3, r0
 80a49cc:	4402      	add	r2, r0
 80a49ce:	4293      	cmp	r3, r2
 80a49d0:	d002      	beq.n	80a49d8 <memset+0xe>
 80a49d2:	f803 1b01 	strb.w	r1, [r3], #1
 80a49d6:	e7fa      	b.n	80a49ce <memset+0x4>
 80a49d8:	4770      	bx	lr
	...

080a49dc <srand>:
 80a49dc:	b538      	push	{r3, r4, r5, lr}
 80a49de:	4b12      	ldr	r3, [pc, #72]	; (80a4a28 <srand+0x4c>)
 80a49e0:	4605      	mov	r5, r0
 80a49e2:	681c      	ldr	r4, [r3, #0]
 80a49e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a49e6:	b9d3      	cbnz	r3, 80a4a1e <srand+0x42>
 80a49e8:	2018      	movs	r0, #24
 80a49ea:	f7fd fd27 	bl	80a243c <malloc>
 80a49ee:	f243 330e 	movw	r3, #13070	; 0x330e
 80a49f2:	63a0      	str	r0, [r4, #56]	; 0x38
 80a49f4:	8003      	strh	r3, [r0, #0]
 80a49f6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a49fa:	8043      	strh	r3, [r0, #2]
 80a49fc:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4a00:	8083      	strh	r3, [r0, #4]
 80a4a02:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4a06:	80c3      	strh	r3, [r0, #6]
 80a4a08:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4a0c:	8103      	strh	r3, [r0, #8]
 80a4a0e:	2305      	movs	r3, #5
 80a4a10:	8143      	strh	r3, [r0, #10]
 80a4a12:	230b      	movs	r3, #11
 80a4a14:	8183      	strh	r3, [r0, #12]
 80a4a16:	2201      	movs	r2, #1
 80a4a18:	2300      	movs	r3, #0
 80a4a1a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a4a1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4a20:	2200      	movs	r2, #0
 80a4a22:	611d      	str	r5, [r3, #16]
 80a4a24:	615a      	str	r2, [r3, #20]
 80a4a26:	bd38      	pop	{r3, r4, r5, pc}
 80a4a28:	200004b4 	.word	0x200004b4

080a4a2c <strcmp>:
 80a4a2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a4a30:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a4a34:	2a01      	cmp	r2, #1
 80a4a36:	bf28      	it	cs
 80a4a38:	429a      	cmpcs	r2, r3
 80a4a3a:	d0f7      	beq.n	80a4a2c <strcmp>
 80a4a3c:	1ad0      	subs	r0, r2, r3
 80a4a3e:	4770      	bx	lr

080a4a40 <strcpy>:
 80a4a40:	4603      	mov	r3, r0
 80a4a42:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a4a46:	f803 2b01 	strb.w	r2, [r3], #1
 80a4a4a:	2a00      	cmp	r2, #0
 80a4a4c:	d1f9      	bne.n	80a4a42 <strcpy+0x2>
 80a4a4e:	4770      	bx	lr

080a4a50 <strlen>:
 80a4a50:	4603      	mov	r3, r0
 80a4a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4a56:	2a00      	cmp	r2, #0
 80a4a58:	d1fb      	bne.n	80a4a52 <strlen+0x2>
 80a4a5a:	1a18      	subs	r0, r3, r0
 80a4a5c:	3801      	subs	r0, #1
 80a4a5e:	4770      	bx	lr

080a4a60 <strncmp>:
 80a4a60:	b530      	push	{r4, r5, lr}
 80a4a62:	b182      	cbz	r2, 80a4a86 <strncmp+0x26>
 80a4a64:	1e45      	subs	r5, r0, #1
 80a4a66:	3901      	subs	r1, #1
 80a4a68:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80a4a6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80a4a70:	42a3      	cmp	r3, r4
 80a4a72:	d106      	bne.n	80a4a82 <strncmp+0x22>
 80a4a74:	43ec      	mvns	r4, r5
 80a4a76:	4414      	add	r4, r2
 80a4a78:	42e0      	cmn	r0, r4
 80a4a7a:	d001      	beq.n	80a4a80 <strncmp+0x20>
 80a4a7c:	2b00      	cmp	r3, #0
 80a4a7e:	d1f3      	bne.n	80a4a68 <strncmp+0x8>
 80a4a80:	461c      	mov	r4, r3
 80a4a82:	1b18      	subs	r0, r3, r4
 80a4a84:	bd30      	pop	{r4, r5, pc}
 80a4a86:	4610      	mov	r0, r2
 80a4a88:	bd30      	pop	{r4, r5, pc}
	...

080a4a8c <_strtoul_r>:
 80a4a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4a90:	460e      	mov	r6, r1
 80a4a92:	4680      	mov	r8, r0
 80a4a94:	483b      	ldr	r0, [pc, #236]	; (80a4b84 <_strtoul_r+0xf8>)
 80a4a96:	f8d0 9000 	ldr.w	r9, [r0]
 80a4a9a:	4635      	mov	r5, r6
 80a4a9c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a4aa0:	eb09 0004 	add.w	r0, r9, r4
 80a4aa4:	7840      	ldrb	r0, [r0, #1]
 80a4aa6:	f000 0008 	and.w	r0, r0, #8
 80a4aaa:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 80a4aae:	b108      	cbz	r0, 80a4ab4 <_strtoul_r+0x28>
 80a4ab0:	462e      	mov	r6, r5
 80a4ab2:	e7f2      	b.n	80a4a9a <_strtoul_r+0xe>
 80a4ab4:	2c2d      	cmp	r4, #45	; 0x2d
 80a4ab6:	d103      	bne.n	80a4ac0 <_strtoul_r+0x34>
 80a4ab8:	1cb5      	adds	r5, r6, #2
 80a4aba:	7874      	ldrb	r4, [r6, #1]
 80a4abc:	2701      	movs	r7, #1
 80a4abe:	e003      	b.n	80a4ac8 <_strtoul_r+0x3c>
 80a4ac0:	2c2b      	cmp	r4, #43	; 0x2b
 80a4ac2:	bf04      	itt	eq
 80a4ac4:	7874      	ldrbeq	r4, [r6, #1]
 80a4ac6:	1cb5      	addeq	r5, r6, #2
 80a4ac8:	b113      	cbz	r3, 80a4ad0 <_strtoul_r+0x44>
 80a4aca:	2b10      	cmp	r3, #16
 80a4acc:	d10a      	bne.n	80a4ae4 <_strtoul_r+0x58>
 80a4ace:	e053      	b.n	80a4b78 <_strtoul_r+0xec>
 80a4ad0:	2c30      	cmp	r4, #48	; 0x30
 80a4ad2:	d14f      	bne.n	80a4b74 <_strtoul_r+0xe8>
 80a4ad4:	7828      	ldrb	r0, [r5, #0]
 80a4ad6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a4ada:	2858      	cmp	r0, #88	; 0x58
 80a4adc:	d145      	bne.n	80a4b6a <_strtoul_r+0xde>
 80a4ade:	786c      	ldrb	r4, [r5, #1]
 80a4ae0:	2310      	movs	r3, #16
 80a4ae2:	3502      	adds	r5, #2
 80a4ae4:	f04f 3cff 	mov.w	ip, #4294967295
 80a4ae8:	fbbc fcf3 	udiv	ip, ip, r3
 80a4aec:	fb03 fa0c 	mul.w	sl, r3, ip
 80a4af0:	2600      	movs	r6, #0
 80a4af2:	ea6f 0a0a 	mvn.w	sl, sl
 80a4af6:	4630      	mov	r0, r6
 80a4af8:	eb09 0e04 	add.w	lr, r9, r4
 80a4afc:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a4b00:	f01e 0f04 	tst.w	lr, #4
 80a4b04:	d001      	beq.n	80a4b0a <_strtoul_r+0x7e>
 80a4b06:	3c30      	subs	r4, #48	; 0x30
 80a4b08:	e00b      	b.n	80a4b22 <_strtoul_r+0x96>
 80a4b0a:	f01e 0e03 	ands.w	lr, lr, #3
 80a4b0e:	d01a      	beq.n	80a4b46 <_strtoul_r+0xba>
 80a4b10:	f1be 0f01 	cmp.w	lr, #1
 80a4b14:	bf0c      	ite	eq
 80a4b16:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a4b1a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a4b1e:	ebce 0404 	rsb	r4, lr, r4
 80a4b22:	42a3      	cmp	r3, r4
 80a4b24:	dd0f      	ble.n	80a4b46 <_strtoul_r+0xba>
 80a4b26:	2e00      	cmp	r6, #0
 80a4b28:	db08      	blt.n	80a4b3c <_strtoul_r+0xb0>
 80a4b2a:	4560      	cmp	r0, ip
 80a4b2c:	d806      	bhi.n	80a4b3c <_strtoul_r+0xb0>
 80a4b2e:	d101      	bne.n	80a4b34 <_strtoul_r+0xa8>
 80a4b30:	4554      	cmp	r4, sl
 80a4b32:	dc03      	bgt.n	80a4b3c <_strtoul_r+0xb0>
 80a4b34:	fb03 4000 	mla	r0, r3, r0, r4
 80a4b38:	2601      	movs	r6, #1
 80a4b3a:	e001      	b.n	80a4b40 <_strtoul_r+0xb4>
 80a4b3c:	f04f 36ff 	mov.w	r6, #4294967295
 80a4b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a4b44:	e7d8      	b.n	80a4af8 <_strtoul_r+0x6c>
 80a4b46:	2e00      	cmp	r6, #0
 80a4b48:	da07      	bge.n	80a4b5a <_strtoul_r+0xce>
 80a4b4a:	2322      	movs	r3, #34	; 0x22
 80a4b4c:	f8c8 3000 	str.w	r3, [r8]
 80a4b50:	f04f 30ff 	mov.w	r0, #4294967295
 80a4b54:	b92a      	cbnz	r2, 80a4b62 <_strtoul_r+0xd6>
 80a4b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4b5a:	b107      	cbz	r7, 80a4b5e <_strtoul_r+0xd2>
 80a4b5c:	4240      	negs	r0, r0
 80a4b5e:	b172      	cbz	r2, 80a4b7e <_strtoul_r+0xf2>
 80a4b60:	b106      	cbz	r6, 80a4b64 <_strtoul_r+0xd8>
 80a4b62:	1e69      	subs	r1, r5, #1
 80a4b64:	6011      	str	r1, [r2, #0]
 80a4b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4b6a:	2430      	movs	r4, #48	; 0x30
 80a4b6c:	2b00      	cmp	r3, #0
 80a4b6e:	d1b9      	bne.n	80a4ae4 <_strtoul_r+0x58>
 80a4b70:	2308      	movs	r3, #8
 80a4b72:	e7b7      	b.n	80a4ae4 <_strtoul_r+0x58>
 80a4b74:	230a      	movs	r3, #10
 80a4b76:	e7b5      	b.n	80a4ae4 <_strtoul_r+0x58>
 80a4b78:	2c30      	cmp	r4, #48	; 0x30
 80a4b7a:	d0ab      	beq.n	80a4ad4 <_strtoul_r+0x48>
 80a4b7c:	e7b2      	b.n	80a4ae4 <_strtoul_r+0x58>
 80a4b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4b82:	bf00      	nop
 80a4b84:	20000450 	.word	0x20000450

080a4b88 <strtoul>:
 80a4b88:	4613      	mov	r3, r2
 80a4b8a:	460a      	mov	r2, r1
 80a4b8c:	4601      	mov	r1, r0
 80a4b8e:	4802      	ldr	r0, [pc, #8]	; (80a4b98 <strtoul+0x10>)
 80a4b90:	6800      	ldr	r0, [r0, #0]
 80a4b92:	f7ff bf7b 	b.w	80a4a8c <_strtoul_r>
 80a4b96:	bf00      	nop
 80a4b98:	200004b4 	.word	0x200004b4

080a4b9c <__tzcalc_limits>:
 80a4b9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4ba0:	4604      	mov	r4, r0
 80a4ba2:	f000 fa6f 	bl	80a5084 <__gettzinfo>
 80a4ba6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80a4baa:	429c      	cmp	r4, r3
 80a4bac:	f340 8096 	ble.w	80a4cdc <__tzcalc_limits+0x140>
 80a4bb0:	f240 156d 	movw	r5, #365	; 0x16d
 80a4bb4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80a4bb8:	18e3      	adds	r3, r4, r3
 80a4bba:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80a4bbe:	109b      	asrs	r3, r3, #2
 80a4bc0:	fb05 3502 	mla	r5, r5, r2, r3
 80a4bc4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80a4bc8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80a4bcc:	fb92 f3f3 	sdiv	r3, r2, r3
 80a4bd0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80a4bd4:	442b      	add	r3, r5
 80a4bd6:	18a5      	adds	r5, r4, r2
 80a4bd8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a4bdc:	fb94 f7f2 	sdiv	r7, r4, r2
 80a4be0:	fb95 f5f2 	sdiv	r5, r5, r2
 80a4be4:	fb02 4717 	mls	r7, r2, r7, r4
 80a4be8:	441d      	add	r5, r3
 80a4bea:	2364      	movs	r3, #100	; 0x64
 80a4bec:	fb94 f6f3 	sdiv	r6, r4, r3
 80a4bf0:	fab7 fe87 	clz	lr, r7
 80a4bf4:	4601      	mov	r1, r0
 80a4bf6:	fb03 4616 	mls	r6, r3, r6, r4
 80a4bfa:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80a4bfe:	9301      	str	r3, [sp, #4]
 80a4c00:	f004 0303 	and.w	r3, r4, #3
 80a4c04:	6044      	str	r4, [r0, #4]
 80a4c06:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80a4c0a:	9300      	str	r3, [sp, #0]
 80a4c0c:	f04f 0c07 	mov.w	ip, #7
 80a4c10:	7a0b      	ldrb	r3, [r1, #8]
 80a4c12:	2b4a      	cmp	r3, #74	; 0x4a
 80a4c14:	d10e      	bne.n	80a4c34 <__tzcalc_limits+0x98>
 80a4c16:	694b      	ldr	r3, [r1, #20]
 80a4c18:	9a00      	ldr	r2, [sp, #0]
 80a4c1a:	18ec      	adds	r4, r5, r3
 80a4c1c:	b902      	cbnz	r2, 80a4c20 <__tzcalc_limits+0x84>
 80a4c1e:	b906      	cbnz	r6, 80a4c22 <__tzcalc_limits+0x86>
 80a4c20:	b927      	cbnz	r7, 80a4c2c <__tzcalc_limits+0x90>
 80a4c22:	2b3b      	cmp	r3, #59	; 0x3b
 80a4c24:	bfd4      	ite	le
 80a4c26:	2300      	movle	r3, #0
 80a4c28:	2301      	movgt	r3, #1
 80a4c2a:	e000      	b.n	80a4c2e <__tzcalc_limits+0x92>
 80a4c2c:	2300      	movs	r3, #0
 80a4c2e:	4423      	add	r3, r4
 80a4c30:	3b01      	subs	r3, #1
 80a4c32:	e03f      	b.n	80a4cb4 <__tzcalc_limits+0x118>
 80a4c34:	2b44      	cmp	r3, #68	; 0x44
 80a4c36:	d102      	bne.n	80a4c3e <__tzcalc_limits+0xa2>
 80a4c38:	694b      	ldr	r3, [r1, #20]
 80a4c3a:	442b      	add	r3, r5
 80a4c3c:	e03a      	b.n	80a4cb4 <__tzcalc_limits+0x118>
 80a4c3e:	9b00      	ldr	r3, [sp, #0]
 80a4c40:	b92b      	cbnz	r3, 80a4c4e <__tzcalc_limits+0xb2>
 80a4c42:	2e00      	cmp	r6, #0
 80a4c44:	bf0c      	ite	eq
 80a4c46:	46f0      	moveq	r8, lr
 80a4c48:	f04f 0801 	movne.w	r8, #1
 80a4c4c:	e000      	b.n	80a4c50 <__tzcalc_limits+0xb4>
 80a4c4e:	46f0      	mov	r8, lr
 80a4c50:	46a9      	mov	r9, r5
 80a4c52:	4b24      	ldr	r3, [pc, #144]	; (80a4ce4 <__tzcalc_limits+0x148>)
 80a4c54:	2230      	movs	r2, #48	; 0x30
 80a4c56:	fb02 3808 	mla	r8, r2, r8, r3
 80a4c5a:	68cc      	ldr	r4, [r1, #12]
 80a4c5c:	f1a8 0a04 	sub.w	sl, r8, #4
 80a4c60:	2301      	movs	r3, #1
 80a4c62:	42a3      	cmp	r3, r4
 80a4c64:	da04      	bge.n	80a4c70 <__tzcalc_limits+0xd4>
 80a4c66:	f85a bf04 	ldr.w	fp, [sl, #4]!
 80a4c6a:	3301      	adds	r3, #1
 80a4c6c:	44d9      	add	r9, fp
 80a4c6e:	e7f8      	b.n	80a4c62 <__tzcalc_limits+0xc6>
 80a4c70:	f109 0304 	add.w	r3, r9, #4
 80a4c74:	fb93 fbfc 	sdiv	fp, r3, ip
 80a4c78:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 80a4c7c:	ebca 0a03 	rsb	sl, sl, r3
 80a4c80:	694b      	ldr	r3, [r1, #20]
 80a4c82:	2c01      	cmp	r4, #1
 80a4c84:	bfb8      	it	lt
 80a4c86:	2401      	movlt	r4, #1
 80a4c88:	ebb3 0a0a 	subs.w	sl, r3, sl
 80a4c8c:	690b      	ldr	r3, [r1, #16]
 80a4c8e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80a4c92:	f103 33ff 	add.w	r3, r3, #4294967295
 80a4c96:	f104 34ff 	add.w	r4, r4, #4294967295
 80a4c9a:	bf48      	it	mi
 80a4c9c:	f10a 0a07 	addmi.w	sl, sl, #7
 80a4ca0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a4ca4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80a4ca8:	4453      	add	r3, sl
 80a4caa:	42a3      	cmp	r3, r4
 80a4cac:	db01      	blt.n	80a4cb2 <__tzcalc_limits+0x116>
 80a4cae:	3b07      	subs	r3, #7
 80a4cb0:	e7fb      	b.n	80a4caa <__tzcalc_limits+0x10e>
 80a4cb2:	444b      	add	r3, r9
 80a4cb4:	698c      	ldr	r4, [r1, #24]
 80a4cb6:	4a0c      	ldr	r2, [pc, #48]	; (80a4ce8 <__tzcalc_limits+0x14c>)
 80a4cb8:	fb02 4303 	mla	r3, r2, r3, r4
 80a4cbc:	6a0c      	ldr	r4, [r1, #32]
 80a4cbe:	4423      	add	r3, r4
 80a4cc0:	f841 3f1c 	str.w	r3, [r1, #28]!
 80a4cc4:	9b01      	ldr	r3, [sp, #4]
 80a4cc6:	4299      	cmp	r1, r3
 80a4cc8:	d1a2      	bne.n	80a4c10 <__tzcalc_limits+0x74>
 80a4cca:	69c3      	ldr	r3, [r0, #28]
 80a4ccc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80a4cce:	4293      	cmp	r3, r2
 80a4cd0:	bfac      	ite	ge
 80a4cd2:	2300      	movge	r3, #0
 80a4cd4:	2301      	movlt	r3, #1
 80a4cd6:	6003      	str	r3, [r0, #0]
 80a4cd8:	2001      	movs	r0, #1
 80a4cda:	e000      	b.n	80a4cde <__tzcalc_limits+0x142>
 80a4cdc:	2000      	movs	r0, #0
 80a4cde:	b003      	add	sp, #12
 80a4ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4ce4:	080a5cf0 	.word	0x080a5cf0
 80a4ce8:	00015180 	.word	0x00015180

080a4cec <__tz_lock>:
 80a4cec:	4770      	bx	lr

080a4cee <__tz_unlock>:
 80a4cee:	4770      	bx	lr

080a4cf0 <_tzset_unlocked>:
 80a4cf0:	4b01      	ldr	r3, [pc, #4]	; (80a4cf8 <_tzset_unlocked+0x8>)
 80a4cf2:	6818      	ldr	r0, [r3, #0]
 80a4cf4:	f000 b802 	b.w	80a4cfc <_tzset_unlocked_r>
 80a4cf8:	200004b4 	.word	0x200004b4

080a4cfc <_tzset_unlocked_r>:
 80a4cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4d00:	b08d      	sub	sp, #52	; 0x34
 80a4d02:	4607      	mov	r7, r0
 80a4d04:	f000 f9be 	bl	80a5084 <__gettzinfo>
 80a4d08:	49b0      	ldr	r1, [pc, #704]	; (80a4fcc <_tzset_unlocked_r+0x2d0>)
 80a4d0a:	4604      	mov	r4, r0
 80a4d0c:	4638      	mov	r0, r7
 80a4d0e:	f000 f9b1 	bl	80a5074 <_getenv_r>
 80a4d12:	4eaf      	ldr	r6, [pc, #700]	; (80a4fd0 <_tzset_unlocked_r+0x2d4>)
 80a4d14:	4605      	mov	r5, r0
 80a4d16:	b960      	cbnz	r0, 80a4d32 <_tzset_unlocked_r+0x36>
 80a4d18:	4bae      	ldr	r3, [pc, #696]	; (80a4fd4 <_tzset_unlocked_r+0x2d8>)
 80a4d1a:	4aaf      	ldr	r2, [pc, #700]	; (80a4fd8 <_tzset_unlocked_r+0x2dc>)
 80a4d1c:	6018      	str	r0, [r3, #0]
 80a4d1e:	4baf      	ldr	r3, [pc, #700]	; (80a4fdc <_tzset_unlocked_r+0x2e0>)
 80a4d20:	6018      	str	r0, [r3, #0]
 80a4d22:	4baf      	ldr	r3, [pc, #700]	; (80a4fe0 <_tzset_unlocked_r+0x2e4>)
 80a4d24:	6830      	ldr	r0, [r6, #0]
 80a4d26:	601a      	str	r2, [r3, #0]
 80a4d28:	605a      	str	r2, [r3, #4]
 80a4d2a:	f7fd fb8f 	bl	80a244c <free>
 80a4d2e:	6035      	str	r5, [r6, #0]
 80a4d30:	e148      	b.n	80a4fc4 <_tzset_unlocked_r+0x2c8>
 80a4d32:	6831      	ldr	r1, [r6, #0]
 80a4d34:	b979      	cbnz	r1, 80a4d56 <_tzset_unlocked_r+0x5a>
 80a4d36:	6830      	ldr	r0, [r6, #0]
 80a4d38:	f7fd fb88 	bl	80a244c <free>
 80a4d3c:	4628      	mov	r0, r5
 80a4d3e:	f7ff fe87 	bl	80a4a50 <strlen>
 80a4d42:	1c41      	adds	r1, r0, #1
 80a4d44:	4638      	mov	r0, r7
 80a4d46:	f7fd fbb1 	bl	80a24ac <_malloc_r>
 80a4d4a:	6030      	str	r0, [r6, #0]
 80a4d4c:	b148      	cbz	r0, 80a4d62 <_tzset_unlocked_r+0x66>
 80a4d4e:	4629      	mov	r1, r5
 80a4d50:	f7ff fe76 	bl	80a4a40 <strcpy>
 80a4d54:	e005      	b.n	80a4d62 <_tzset_unlocked_r+0x66>
 80a4d56:	f7ff fe69 	bl	80a4a2c <strcmp>
 80a4d5a:	2800      	cmp	r0, #0
 80a4d5c:	f000 8132 	beq.w	80a4fc4 <_tzset_unlocked_r+0x2c8>
 80a4d60:	e7e9      	b.n	80a4d36 <_tzset_unlocked_r+0x3a>
 80a4d62:	782b      	ldrb	r3, [r5, #0]
 80a4d64:	ae0a      	add	r6, sp, #40	; 0x28
 80a4d66:	2b3a      	cmp	r3, #58	; 0x3a
 80a4d68:	bf08      	it	eq
 80a4d6a:	3501      	addeq	r5, #1
 80a4d6c:	4633      	mov	r3, r6
 80a4d6e:	4a9d      	ldr	r2, [pc, #628]	; (80a4fe4 <_tzset_unlocked_r+0x2e8>)
 80a4d70:	499d      	ldr	r1, [pc, #628]	; (80a4fe8 <_tzset_unlocked_r+0x2ec>)
 80a4d72:	4628      	mov	r0, r5
 80a4d74:	f7fd fb8a 	bl	80a248c <siscanf>
 80a4d78:	2800      	cmp	r0, #0
 80a4d7a:	f340 8123 	ble.w	80a4fc4 <_tzset_unlocked_r+0x2c8>
 80a4d7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4d80:	18ef      	adds	r7, r5, r3
 80a4d82:	5ceb      	ldrb	r3, [r5, r3]
 80a4d84:	2b2d      	cmp	r3, #45	; 0x2d
 80a4d86:	d103      	bne.n	80a4d90 <_tzset_unlocked_r+0x94>
 80a4d88:	3701      	adds	r7, #1
 80a4d8a:	f04f 35ff 	mov.w	r5, #4294967295
 80a4d8e:	e003      	b.n	80a4d98 <_tzset_unlocked_r+0x9c>
 80a4d90:	2b2b      	cmp	r3, #43	; 0x2b
 80a4d92:	bf08      	it	eq
 80a4d94:	3701      	addeq	r7, #1
 80a4d96:	2501      	movs	r5, #1
 80a4d98:	f10d 0a20 	add.w	sl, sp, #32
 80a4d9c:	f10d 0b1e 	add.w	fp, sp, #30
 80a4da0:	f04f 0800 	mov.w	r8, #0
 80a4da4:	9603      	str	r6, [sp, #12]
 80a4da6:	f8cd a008 	str.w	sl, [sp, #8]
 80a4daa:	9601      	str	r6, [sp, #4]
 80a4dac:	f8cd b000 	str.w	fp, [sp]
 80a4db0:	4633      	mov	r3, r6
 80a4db2:	aa07      	add	r2, sp, #28
 80a4db4:	498d      	ldr	r1, [pc, #564]	; (80a4fec <_tzset_unlocked_r+0x2f0>)
 80a4db6:	4638      	mov	r0, r7
 80a4db8:	f8ad 801e 	strh.w	r8, [sp, #30]
 80a4dbc:	f8ad 8020 	strh.w	r8, [sp, #32]
 80a4dc0:	f7fd fb64 	bl	80a248c <siscanf>
 80a4dc4:	4540      	cmp	r0, r8
 80a4dc6:	f340 80fd 	ble.w	80a4fc4 <_tzset_unlocked_r+0x2c8>
 80a4dca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a4dce:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a4dd2:	213c      	movs	r1, #60	; 0x3c
 80a4dd4:	fb01 3302 	mla	r3, r1, r2, r3
 80a4dd8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a4ddc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a4de0:	fb01 3302 	mla	r3, r1, r2, r3
 80a4de4:	435d      	muls	r5, r3
 80a4de6:	4b7f      	ldr	r3, [pc, #508]	; (80a4fe4 <_tzset_unlocked_r+0x2e8>)
 80a4de8:	6225      	str	r5, [r4, #32]
 80a4dea:	4d7d      	ldr	r5, [pc, #500]	; (80a4fe0 <_tzset_unlocked_r+0x2e4>)
 80a4dec:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80a4ff8 <_tzset_unlocked_r+0x2fc>
 80a4df0:	602b      	str	r3, [r5, #0]
 80a4df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4df4:	464a      	mov	r2, r9
 80a4df6:	441f      	add	r7, r3
 80a4df8:	497b      	ldr	r1, [pc, #492]	; (80a4fe8 <_tzset_unlocked_r+0x2ec>)
 80a4dfa:	4633      	mov	r3, r6
 80a4dfc:	4638      	mov	r0, r7
 80a4dfe:	f7fd fb45 	bl	80a248c <siscanf>
 80a4e02:	4540      	cmp	r0, r8
 80a4e04:	dc08      	bgt.n	80a4e18 <_tzset_unlocked_r+0x11c>
 80a4e06:	682b      	ldr	r3, [r5, #0]
 80a4e08:	6a22      	ldr	r2, [r4, #32]
 80a4e0a:	606b      	str	r3, [r5, #4]
 80a4e0c:	4b71      	ldr	r3, [pc, #452]	; (80a4fd4 <_tzset_unlocked_r+0x2d8>)
 80a4e0e:	601a      	str	r2, [r3, #0]
 80a4e10:	4b72      	ldr	r3, [pc, #456]	; (80a4fdc <_tzset_unlocked_r+0x2e0>)
 80a4e12:	f8c3 8000 	str.w	r8, [r3]
 80a4e16:	e0d5      	b.n	80a4fc4 <_tzset_unlocked_r+0x2c8>
 80a4e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4e1a:	f8c5 9004 	str.w	r9, [r5, #4]
 80a4e1e:	18fd      	adds	r5, r7, r3
 80a4e20:	5cfb      	ldrb	r3, [r7, r3]
 80a4e22:	2b2d      	cmp	r3, #45	; 0x2d
 80a4e24:	d103      	bne.n	80a4e2e <_tzset_unlocked_r+0x132>
 80a4e26:	3501      	adds	r5, #1
 80a4e28:	f04f 37ff 	mov.w	r7, #4294967295
 80a4e2c:	e003      	b.n	80a4e36 <_tzset_unlocked_r+0x13a>
 80a4e2e:	2b2b      	cmp	r3, #43	; 0x2b
 80a4e30:	bf08      	it	eq
 80a4e32:	3501      	addeq	r5, #1
 80a4e34:	2701      	movs	r7, #1
 80a4e36:	2300      	movs	r3, #0
 80a4e38:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a4e3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a4e40:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a4e44:	930a      	str	r3, [sp, #40]	; 0x28
 80a4e46:	9603      	str	r6, [sp, #12]
 80a4e48:	f8cd a008 	str.w	sl, [sp, #8]
 80a4e4c:	9601      	str	r6, [sp, #4]
 80a4e4e:	f8cd b000 	str.w	fp, [sp]
 80a4e52:	4633      	mov	r3, r6
 80a4e54:	aa07      	add	r2, sp, #28
 80a4e56:	4965      	ldr	r1, [pc, #404]	; (80a4fec <_tzset_unlocked_r+0x2f0>)
 80a4e58:	4628      	mov	r0, r5
 80a4e5a:	f7fd fb17 	bl	80a248c <siscanf>
 80a4e5e:	2800      	cmp	r0, #0
 80a4e60:	dc04      	bgt.n	80a4e6c <_tzset_unlocked_r+0x170>
 80a4e62:	6a23      	ldr	r3, [r4, #32]
 80a4e64:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80a4e68:	63e3      	str	r3, [r4, #60]	; 0x3c
 80a4e6a:	e00e      	b.n	80a4e8a <_tzset_unlocked_r+0x18e>
 80a4e6c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a4e70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a4e74:	213c      	movs	r1, #60	; 0x3c
 80a4e76:	fb01 3302 	mla	r3, r1, r2, r3
 80a4e7a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a4e7e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a4e82:	fb01 3302 	mla	r3, r1, r2, r3
 80a4e86:	435f      	muls	r7, r3
 80a4e88:	63e7      	str	r7, [r4, #60]	; 0x3c
 80a4e8a:	4627      	mov	r7, r4
 80a4e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4e8e:	f04f 0900 	mov.w	r9, #0
 80a4e92:	441d      	add	r5, r3
 80a4e94:	782b      	ldrb	r3, [r5, #0]
 80a4e96:	2b2c      	cmp	r3, #44	; 0x2c
 80a4e98:	bf08      	it	eq
 80a4e9a:	3501      	addeq	r5, #1
 80a4e9c:	f895 8000 	ldrb.w	r8, [r5]
 80a4ea0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 80a4ea4:	d126      	bne.n	80a4ef4 <_tzset_unlocked_r+0x1f8>
 80a4ea6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 80a4eaa:	9302      	str	r3, [sp, #8]
 80a4eac:	ab09      	add	r3, sp, #36	; 0x24
 80a4eae:	9300      	str	r3, [sp, #0]
 80a4eb0:	9603      	str	r6, [sp, #12]
 80a4eb2:	9601      	str	r6, [sp, #4]
 80a4eb4:	4633      	mov	r3, r6
 80a4eb6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 80a4eba:	494d      	ldr	r1, [pc, #308]	; (80a4ff0 <_tzset_unlocked_r+0x2f4>)
 80a4ebc:	4628      	mov	r0, r5
 80a4ebe:	f7fd fae5 	bl	80a248c <siscanf>
 80a4ec2:	2803      	cmp	r0, #3
 80a4ec4:	d17e      	bne.n	80a4fc4 <_tzset_unlocked_r+0x2c8>
 80a4ec6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80a4eca:	1e4b      	subs	r3, r1, #1
 80a4ecc:	2b0b      	cmp	r3, #11
 80a4ece:	d879      	bhi.n	80a4fc4 <_tzset_unlocked_r+0x2c8>
 80a4ed0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80a4ed4:	1e53      	subs	r3, r2, #1
 80a4ed6:	2b04      	cmp	r3, #4
 80a4ed8:	d874      	bhi.n	80a4fc4 <_tzset_unlocked_r+0x2c8>
 80a4eda:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80a4ede:	2b06      	cmp	r3, #6
 80a4ee0:	d870      	bhi.n	80a4fc4 <_tzset_unlocked_r+0x2c8>
 80a4ee2:	f887 8008 	strb.w	r8, [r7, #8]
 80a4ee6:	60f9      	str	r1, [r7, #12]
 80a4ee8:	613a      	str	r2, [r7, #16]
 80a4eea:	617b      	str	r3, [r7, #20]
 80a4eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80a4eee:	eb05 0803 	add.w	r8, r5, r3
 80a4ef2:	e02a      	b.n	80a4f4a <_tzset_unlocked_r+0x24e>
 80a4ef4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80a4ef8:	bf06      	itte	eq
 80a4efa:	4643      	moveq	r3, r8
 80a4efc:	3501      	addeq	r5, #1
 80a4efe:	2344      	movne	r3, #68	; 0x44
 80a4f00:	220a      	movs	r2, #10
 80a4f02:	a90b      	add	r1, sp, #44	; 0x2c
 80a4f04:	4628      	mov	r0, r5
 80a4f06:	9305      	str	r3, [sp, #20]
 80a4f08:	f7ff fe3e 	bl	80a4b88 <strtoul>
 80a4f0c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80a4f10:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80a4f14:	4545      	cmp	r5, r8
 80a4f16:	9b05      	ldr	r3, [sp, #20]
 80a4f18:	d114      	bne.n	80a4f44 <_tzset_unlocked_r+0x248>
 80a4f1a:	234d      	movs	r3, #77	; 0x4d
 80a4f1c:	f1b9 0f00 	cmp.w	r9, #0
 80a4f20:	d107      	bne.n	80a4f32 <_tzset_unlocked_r+0x236>
 80a4f22:	7223      	strb	r3, [r4, #8]
 80a4f24:	2303      	movs	r3, #3
 80a4f26:	60e3      	str	r3, [r4, #12]
 80a4f28:	2302      	movs	r3, #2
 80a4f2a:	6123      	str	r3, [r4, #16]
 80a4f2c:	f8c4 9014 	str.w	r9, [r4, #20]
 80a4f30:	e00b      	b.n	80a4f4a <_tzset_unlocked_r+0x24e>
 80a4f32:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80a4f36:	230b      	movs	r3, #11
 80a4f38:	62a3      	str	r3, [r4, #40]	; 0x28
 80a4f3a:	2301      	movs	r3, #1
 80a4f3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 80a4f3e:	2300      	movs	r3, #0
 80a4f40:	6323      	str	r3, [r4, #48]	; 0x30
 80a4f42:	e002      	b.n	80a4f4a <_tzset_unlocked_r+0x24e>
 80a4f44:	b280      	uxth	r0, r0
 80a4f46:	723b      	strb	r3, [r7, #8]
 80a4f48:	6178      	str	r0, [r7, #20]
 80a4f4a:	2302      	movs	r3, #2
 80a4f4c:	f8ad 301c 	strh.w	r3, [sp, #28]
 80a4f50:	2300      	movs	r3, #0
 80a4f52:	f8ad 301e 	strh.w	r3, [sp, #30]
 80a4f56:	f8ad 3020 	strh.w	r3, [sp, #32]
 80a4f5a:	930a      	str	r3, [sp, #40]	; 0x28
 80a4f5c:	f898 3000 	ldrb.w	r3, [r8]
 80a4f60:	2b2f      	cmp	r3, #47	; 0x2f
 80a4f62:	d10b      	bne.n	80a4f7c <_tzset_unlocked_r+0x280>
 80a4f64:	9603      	str	r6, [sp, #12]
 80a4f66:	f8cd a008 	str.w	sl, [sp, #8]
 80a4f6a:	9601      	str	r6, [sp, #4]
 80a4f6c:	f8cd b000 	str.w	fp, [sp]
 80a4f70:	4633      	mov	r3, r6
 80a4f72:	aa07      	add	r2, sp, #28
 80a4f74:	491f      	ldr	r1, [pc, #124]	; (80a4ff4 <_tzset_unlocked_r+0x2f8>)
 80a4f76:	4640      	mov	r0, r8
 80a4f78:	f7fd fa88 	bl	80a248c <siscanf>
 80a4f7c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80a4f80:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80a4f84:	213c      	movs	r1, #60	; 0x3c
 80a4f86:	fb01 3302 	mla	r3, r1, r2, r3
 80a4f8a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80a4f8e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80a4f92:	fb01 3302 	mla	r3, r1, r2, r3
 80a4f96:	61bb      	str	r3, [r7, #24]
 80a4f98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80a4f9a:	f109 0901 	add.w	r9, r9, #1
 80a4f9e:	f1b9 0f02 	cmp.w	r9, #2
 80a4fa2:	4445      	add	r5, r8
 80a4fa4:	f107 071c 	add.w	r7, r7, #28
 80a4fa8:	f47f af74 	bne.w	80a4e94 <_tzset_unlocked_r+0x198>
 80a4fac:	6860      	ldr	r0, [r4, #4]
 80a4fae:	f7ff fdf5 	bl	80a4b9c <__tzcalc_limits>
 80a4fb2:	6a22      	ldr	r2, [r4, #32]
 80a4fb4:	4b07      	ldr	r3, [pc, #28]	; (80a4fd4 <_tzset_unlocked_r+0x2d8>)
 80a4fb6:	601a      	str	r2, [r3, #0]
 80a4fb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80a4fba:	1a9b      	subs	r3, r3, r2
 80a4fbc:	4a07      	ldr	r2, [pc, #28]	; (80a4fdc <_tzset_unlocked_r+0x2e0>)
 80a4fbe:	bf18      	it	ne
 80a4fc0:	2301      	movne	r3, #1
 80a4fc2:	6013      	str	r3, [r2, #0]
 80a4fc4:	b00d      	add	sp, #52	; 0x34
 80a4fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4fca:	bf00      	nop
 80a4fcc:	080a5d50 	.word	0x080a5d50
 80a4fd0:	20000bac 	.word	0x20000bac
 80a4fd4:	20000bb4 	.word	0x20000bb4
 80a4fd8:	080a5d53 	.word	0x080a5d53
 80a4fdc:	20000bb0 	.word	0x20000bb0
 80a4fe0:	200004b8 	.word	0x200004b8
 80a4fe4:	20000b9f 	.word	0x20000b9f
 80a4fe8:	080a5d57 	.word	0x080a5d57
 80a4fec:	080a5d7a 	.word	0x080a5d7a
 80a4ff0:	080a5d66 	.word	0x080a5d66
 80a4ff4:	080a5d79 	.word	0x080a5d79
 80a4ff8:	20000b94 	.word	0x20000b94

080a4ffc <_findenv_r>:
 80a4ffc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a5000:	4607      	mov	r7, r0
 80a5002:	468b      	mov	fp, r1
 80a5004:	4690      	mov	r8, r2
 80a5006:	f000 f8d7 	bl	80a51b8 <__env_lock>
 80a500a:	4b19      	ldr	r3, [pc, #100]	; (80a5070 <_findenv_r+0x74>)
 80a500c:	681d      	ldr	r5, [r3, #0]
 80a500e:	469a      	mov	sl, r3
 80a5010:	b13d      	cbz	r5, 80a5022 <_findenv_r+0x26>
 80a5012:	465c      	mov	r4, fp
 80a5014:	4623      	mov	r3, r4
 80a5016:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a501a:	b142      	cbz	r2, 80a502e <_findenv_r+0x32>
 80a501c:	2a3d      	cmp	r2, #61	; 0x3d
 80a501e:	461c      	mov	r4, r3
 80a5020:	d1f8      	bne.n	80a5014 <_findenv_r+0x18>
 80a5022:	4638      	mov	r0, r7
 80a5024:	f000 f8c9 	bl	80a51ba <__env_unlock>
 80a5028:	2000      	movs	r0, #0
 80a502a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a502e:	ebcb 0404 	rsb	r4, fp, r4
 80a5032:	46a9      	mov	r9, r5
 80a5034:	f859 0b04 	ldr.w	r0, [r9], #4
 80a5038:	2800      	cmp	r0, #0
 80a503a:	d0f2      	beq.n	80a5022 <_findenv_r+0x26>
 80a503c:	4622      	mov	r2, r4
 80a503e:	4659      	mov	r1, fp
 80a5040:	f7ff fd0e 	bl	80a4a60 <strncmp>
 80a5044:	b988      	cbnz	r0, 80a506a <_findenv_r+0x6e>
 80a5046:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80a504a:	191e      	adds	r6, r3, r4
 80a504c:	5d1b      	ldrb	r3, [r3, r4]
 80a504e:	2b3d      	cmp	r3, #61	; 0x3d
 80a5050:	d10b      	bne.n	80a506a <_findenv_r+0x6e>
 80a5052:	f8da 3000 	ldr.w	r3, [sl]
 80a5056:	4638      	mov	r0, r7
 80a5058:	1aed      	subs	r5, r5, r3
 80a505a:	10ad      	asrs	r5, r5, #2
 80a505c:	f8c8 5000 	str.w	r5, [r8]
 80a5060:	f000 f8ab 	bl	80a51ba <__env_unlock>
 80a5064:	1c70      	adds	r0, r6, #1
 80a5066:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a506a:	464d      	mov	r5, r9
 80a506c:	e7e1      	b.n	80a5032 <_findenv_r+0x36>
 80a506e:	bf00      	nop
 80a5070:	20000500 	.word	0x20000500

080a5074 <_getenv_r>:
 80a5074:	b507      	push	{r0, r1, r2, lr}
 80a5076:	aa01      	add	r2, sp, #4
 80a5078:	f7ff ffc0 	bl	80a4ffc <_findenv_r>
 80a507c:	b003      	add	sp, #12
 80a507e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a5084 <__gettzinfo>:
 80a5084:	4800      	ldr	r0, [pc, #0]	; (80a5088 <__gettzinfo+0x4>)
 80a5086:	4770      	bx	lr
 80a5088:	200004c0 	.word	0x200004c0

080a508c <gmtime_r>:
 80a508c:	6802      	ldr	r2, [r0, #0]
 80a508e:	4b46      	ldr	r3, [pc, #280]	; (80a51a8 <gmtime_r+0x11c>)
 80a5090:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a5092:	fb92 f4f3 	sdiv	r4, r2, r3
 80a5096:	fb03 2214 	mls	r2, r3, r4, r2
 80a509a:	2a00      	cmp	r2, #0
 80a509c:	bfbc      	itt	lt
 80a509e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80a50a2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80a50a6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80a50aa:	fb92 f3f0 	sdiv	r3, r2, r0
 80a50ae:	fb00 2213 	mls	r2, r0, r3, r2
 80a50b2:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80a50b6:	608b      	str	r3, [r1, #8]
 80a50b8:	fb92 f3f0 	sdiv	r3, r2, r0
 80a50bc:	fb00 2213 	mls	r2, r0, r3, r2
 80a50c0:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 80a50c4:	bfac      	ite	ge
 80a50c6:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 80a50ca:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 80a50ce:	604b      	str	r3, [r1, #4]
 80a50d0:	600a      	str	r2, [r1, #0]
 80a50d2:	2307      	movs	r3, #7
 80a50d4:	1ce2      	adds	r2, r4, #3
 80a50d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80a50da:	4d34      	ldr	r5, [pc, #208]	; (80a51ac <gmtime_r+0x120>)
 80a50dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80a50e0:	fb94 f5f5 	sdiv	r5, r4, r5
 80a50e4:	1ad3      	subs	r3, r2, r3
 80a50e6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80a50ea:	f240 57b4 	movw	r7, #1460	; 0x5b4
 80a50ee:	618b      	str	r3, [r1, #24]
 80a50f0:	4b2f      	ldr	r3, [pc, #188]	; (80a51b0 <gmtime_r+0x124>)
 80a50f2:	4830      	ldr	r0, [pc, #192]	; (80a51b4 <gmtime_r+0x128>)
 80a50f4:	fb03 4405 	mla	r4, r3, r5, r4
 80a50f8:	fbb4 f2f2 	udiv	r2, r4, r2
 80a50fc:	fbb4 f3f7 	udiv	r3, r4, r7
 80a5100:	fbb4 f0f0 	udiv	r0, r4, r0
 80a5104:	4422      	add	r2, r4
 80a5106:	1ad2      	subs	r2, r2, r3
 80a5108:	f648 6694 	movw	r6, #36500	; 0x8e94
 80a510c:	1a13      	subs	r3, r2, r0
 80a510e:	f240 126d 	movw	r2, #365	; 0x16d
 80a5112:	fbb3 f6f6 	udiv	r6, r3, r6
 80a5116:	fbb3 f0f2 	udiv	r0, r3, r2
 80a511a:	fbb3 f3f7 	udiv	r3, r3, r7
 80a511e:	4434      	add	r4, r6
 80a5120:	1ae3      	subs	r3, r4, r3
 80a5122:	fb02 3310 	mls	r3, r2, r0, r3
 80a5126:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80a512a:	2499      	movs	r4, #153	; 0x99
 80a512c:	3202      	adds	r2, #2
 80a512e:	fbb2 f2f4 	udiv	r2, r2, r4
 80a5132:	4354      	muls	r4, r2
 80a5134:	1ca6      	adds	r6, r4, #2
 80a5136:	2405      	movs	r4, #5
 80a5138:	fbb6 f4f4 	udiv	r4, r6, r4
 80a513c:	2a0a      	cmp	r2, #10
 80a513e:	bf34      	ite	cc
 80a5140:	2602      	movcc	r6, #2
 80a5142:	f06f 0609 	mvncs.w	r6, #9
 80a5146:	4416      	add	r6, r2
 80a5148:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a514c:	fb02 0505 	mla	r5, r2, r5, r0
 80a5150:	1c5f      	adds	r7, r3, #1
 80a5152:	2e01      	cmp	r6, #1
 80a5154:	bf98      	it	ls
 80a5156:	3501      	addls	r5, #1
 80a5158:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80a515c:	eba7 0704 	sub.w	r7, r7, r4
 80a5160:	d302      	bcc.n	80a5168 <gmtime_r+0xdc>
 80a5162:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80a5166:	e014      	b.n	80a5192 <gmtime_r+0x106>
 80a5168:	0782      	lsls	r2, r0, #30
 80a516a:	d105      	bne.n	80a5178 <gmtime_r+0xec>
 80a516c:	2464      	movs	r4, #100	; 0x64
 80a516e:	fbb0 f2f4 	udiv	r2, r0, r4
 80a5172:	fb04 0212 	mls	r2, r4, r2, r0
 80a5176:	b94a      	cbnz	r2, 80a518c <gmtime_r+0x100>
 80a5178:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80a517c:	fbb0 f4f2 	udiv	r4, r0, r2
 80a5180:	fb02 0014 	mls	r0, r2, r4, r0
 80a5184:	fab0 f280 	clz	r2, r0
 80a5188:	0952      	lsrs	r2, r2, #5
 80a518a:	e000      	b.n	80a518e <gmtime_r+0x102>
 80a518c:	2201      	movs	r2, #1
 80a518e:	333b      	adds	r3, #59	; 0x3b
 80a5190:	441a      	add	r2, r3
 80a5192:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80a5196:	2300      	movs	r3, #0
 80a5198:	61ca      	str	r2, [r1, #28]
 80a519a:	614d      	str	r5, [r1, #20]
 80a519c:	610e      	str	r6, [r1, #16]
 80a519e:	60cf      	str	r7, [r1, #12]
 80a51a0:	620b      	str	r3, [r1, #32]
 80a51a2:	4608      	mov	r0, r1
 80a51a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a51a6:	bf00      	nop
 80a51a8:	00015180 	.word	0x00015180
 80a51ac:	00023ab1 	.word	0x00023ab1
 80a51b0:	fffdc54f 	.word	0xfffdc54f
 80a51b4:	00023ab0 	.word	0x00023ab0

080a51b8 <__env_lock>:
 80a51b8:	4770      	bx	lr

080a51ba <__env_unlock>:
 80a51ba:	4770      	bx	lr

080a51bc <dynalib_user>:
 80a51bc:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a51cc:	0000 0000 6577 7461 6568 6372 696c 6e65     ....weatherclien
 80a51dc:	0074 4d42 3245 3038 6e20 746f 6920 696e     t.BME280 not ini
 80a51ec:	6974 6c61 7a69 6465 2500 322e 0066 6577     tialized.%.2f.we
 80a51fc:	7461 6568 2f72 6554 706d 7265 7461 7275     ather/Temperatur
 80a520c:	7700 6165 6874 7265 542f 7972 006b 6577     .weather/Tryk.we
 80a521c:	7461 6568 2f72 7546 7467 6769 6568 0064     ather/Fugtighed.
 80a522c:	6577 7461 6568 2f72 6152 6e69 6166 6c6c     weather/Rainfall
 80a523c:	6300 7275 6e65 3a74 2520 0064 6554 706d     .curent: %d.Temp
 80a524c:	203a 4800 6d75 3a69 0020 7250 7365 3a73     : .Humi: .Press:
 80a525c:	0020 0000                                    ...

080a5260 <_ZTV16Adafruit_SSD1306>:
	...
 80a5268:	0425 080a 0427 080a 0b15 080a 2c2b 080a     %...'.......+,..
 80a5278:	074d 080a 0811 080a 05d5 080a 0461 080a     M...........a...
 80a5288:	08d1 080a 0967 080a 099f 080a 09bb 080a     ....g...........

080a5298 <_ZTV12Adafruit_GFX>:
	...
 80a52a8:	0b15 080a 2c2b 080a 00ad 080a 0811 080a     ....+,..........
 80a52b8:	0931 080a 094d 080a 08d1 080a 0967 080a     1...M.......g...
 80a52c8:	099f 080a 09bb 080a                         ........

080a52d0 <_ZL4font>:
 80a52d0:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a52e0:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a52f0:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a5300:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a5310:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a5320:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a5330:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a5340:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a5350:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a5360:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a5370:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a5380:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a5390:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a53a0:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a53b0:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a53c0:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a53d0:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a53e0:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a53f0:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a5400:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a5410:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a5420:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a5430:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a5440:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a5450:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a5460:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a5470:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a5480:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a5490:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a54a0:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a54b0:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a54c0:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a54d0:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a54e0:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a54f0:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a5500:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a5510:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a5520:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a5530:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a5540:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a5550:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a5560:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
 80a5570:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a5580:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a5590:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
 80a55a0:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a55b0:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
 80a55c0:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
 80a55d0:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
 80a55e0:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a55f0:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a5600:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a5610:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a5620:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a5630:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a5640:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
 80a5650:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
 80a5660:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
 80a5670:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
 80a5680:	141f 1414 001f 1010 f010 0000 0000 101f     ................
 80a5690:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
 80a56a0:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
 80a56b0:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
 80a56c0:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
 80a56d0:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
 80a56e0:	1414 f414 1014 f010 f010 0000 101f 001f     ................
 80a56f0:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
 80a5700:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
 80a5710:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
 80a5720:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
 80a5730:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
 80a5740:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
 80a5750:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
 80a5760:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
 80a5770:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
 80a5780:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
 80a5790:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
 80a57a0:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
 80a57b0:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
 80a57c0:	0012 3c3c 3c3c 0000 0000 0000 4d04 5451     ..<<<<.......MQT
 80a57d0:	0454 0600 514d 7349 7064 0003               T...MQIsdp..

080a57dc <_ZTVN8particle13__SPISettingsE>:
	...
 80a57e4:	1381 080a 6564 6166 6c75 2074 4d00 4253     ....default .MSB
 80a57f4:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
 80a5804:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
 80a5814:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
 80a5824:	4d20 444f 2545 3e64 5400 6d69 2065 6177      MODE%d>.Time wa
 80a5834:	2073 616c 7473 7320 6e79 6863 6f72 696e     s last synchroni
 80a5844:	657a 2064 6c25 2075 696d 6c6c 7369 6365     zed %lu millisec
 80a5854:	6e6f 7364 6120 6f67 5400 6d69 2065 6572     onds ago.Time re
 80a5864:	6563 7669 6465 6620 6f72 206d 6150 7472     ceived from Part
 80a5874:	6369 656c 4420 7665 6369 2065 6c43 756f     icle Device Clou
 80a5884:	2064 6177 3a73 0020                         d was: .

080a588c <_ZTV8SPIClass>:
	...
 80a5894:	24bd 080a 24bf 080a                         .$...$..

080a589c <_ZL14clock_divisors>:
 80a589c:	0800 1810 2820 3830                         .... (08

080a58a4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a58ac:	26b1 080a 26b7 080a 2acf 080a 26c5 080a     .&...&...*...&..
 80a58bc:	26b3 080a                                   .&..

080a58c0 <_ZTV9TCPClient>:
	...
 80a58c8:	0b95 080a 0bc9 080a 266d 080a 2687 080a     ........m&...&..
 80a58d8:	27cd 080a 2737 080a 2709 080a 26af 080a     .'..7'...'...&..
 80a58e8:	2879 080a 2ae9 080a 276b 080a 2845 080a     y(...*..k'..E(..
 80a58f8:	29c7 080a 2a19 080a 2697 080a 298b 080a     .)...*...&...)..
 80a5908:	26e9 080a 6977 6972 676e 5400 5043 6c43     .&..wiring.TCPCl
 80a5918:	6569 746e 7320 636f 656b 3d74 7825 6200     ient socket=%x.b
 80a5928:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a5938:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a5948:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a5958:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a5968:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a5978:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a5988:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a5998:	6c64 7265 6100 7070 2500 3130 7530 0020     dler.app.%010u .
 80a59a8:	205d 2c00 0020 2928 203a 2000 005b 6f63     ] ., .(): . [.co
 80a59b8:	6564 3d20 0020 6925 6400 7465 6961 736c     de = .%i.details
 80a59c8:	3d20 0020 0a0d 6c00 006e 6e66 6300 646f      = ....ln.fn.cod
 80a59d8:	0065 6564 6174 6c69 6e00 6e6f 0065 7274     e.detail.none.tr
 80a59e8:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a59f8:	6f72 0072 6170 696e 0063 2b25 3330 3a64     ror.panic.%+03d:
 80a5a08:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a5a18:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a5a28:	0000 0000                                   ....

080a5a2c <_ZTV9IPAddress>:
	...
 80a5a34:	305d 080a 304d 080a 304f 080a               ]0..M0..O0..

080a5a40 <_ZTV9USBSerial>:
	...
 80a5a48:	3145 080a 3195 080a 31a3 080a 2c2b 080a     E1...1...1..+,..
 80a5a58:	3181 080a 3147 080a 315d 080a 318f 080a     .1..G1..]1...1..
 80a5a68:	3173 080a 3141 080a                         s1..A1..

080a5a70 <_ZTV11USARTSerial>:
	...
 80a5a78:	32f1 080a 3341 080a 334f 080a 2c2b 080a     .2..A3..O3..+,..
 80a5a88:	3305 080a 3327 080a 3313 080a 333b 080a     .3..'3...3..;3..
 80a5a98:	32f3 080a 32f7 080a                         .2...2..

080a5aa0 <_ZTV7TwoWire>:
	...
 80a5aa8:	33f5 080a 343f 080a 3417 080a 33f7 080a     .3..?4...4...3..
 80a5ab8:	341f 080a 3427 080a 342f 080a 3437 080a     .4..'4../4..74..

080a5ac8 <_ZTVN5spark9WiFiClassE>:
	...
 80a5ad0:	3549 080a 353f 080a 3535 080a 34b3 080a     I5..?5..55...4..
 80a5ae0:	2d7d 080a 3529 080a 351d 080a 3515 080a     }-..)5...5...5..
 80a5af0:	350b 080a 3501 080a 34bd 080a               .5...5...4..

080a5afc <_ZTVN5spark12NetworkClassE>:
	...
 80a5b04:	3569 080a 3573 080a 357d 080a 3587 080a     i5..s5..}5...5..
 80a5b14:	3591 080a 359d 080a 35a9 080a 35b5 080a     .5...5...5...5..
 80a5b24:	35bd 080a 35c7 080a 35d1 080a               .5...5...5..

080a5b30 <day_name.4723>:
 80a5b30:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80a5b40:	6972 6153 4a74                                   riSat

080a5b45 <mon_name.4724>:
 80a5b45:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80a5b55:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80a5b65:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80a5b75:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80a5b85:	6425 000a                                   %d..

080a5b89 <_ctype_>:
 80a5b89:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80a5b99:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80a5ba9:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80a5bb9:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80a5bc9:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80a5bd9:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80a5be9:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80a5bf9:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80a5c09:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080a5c8c <__sf_fake_stdin>:
	...

080a5cac <__sf_fake_stdout>:
	...

080a5ccc <__sf_fake_stderr>:
	...
 80a5cec:	0043 0000                                   C...

080a5cf0 <__month_lengths>:
 80a5cf0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80a5d00:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a5d10:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a5d20:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80a5d30:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80a5d40:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80a5d50:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 80a5d60:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 80a5d70:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 80a5d80:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

080a5d8c <link_const_variable_data_end>:
 80a5d8c:	080a0361 	.word	0x080a0361
 80a5d90:	080a0411 	.word	0x080a0411
 80a5d94:	080a0435 	.word	0x080a0435
 80a5d98:	080a080d 	.word	0x080a080d
 80a5d9c:	080a0b8f 	.word	0x080a0b8f
 80a5da0:	080a137b 	.word	0x080a137b
 80a5da4:	080a1c91 	.word	0x080a1c91
 80a5da8:	080a1dc5 	.word	0x080a1dc5
 80a5dac:	080a1f01 	.word	0x080a1f01
 80a5db0:	080a2655 	.word	0x080a2655
 80a5db4:	080a2d89 	.word	0x080a2d89
 80a5db8:	080a2ec1 	.word	0x080a2ec1
 80a5dbc:	080a2ef9 	.word	0x080a2ef9
 80a5dc0:	080a3555 	.word	0x080a3555
 80a5dc4:	080a3639 	.word	0x080a3639
 80a5dc8:	080a3711 	.word	0x080a3711
 80a5dcc:	080a3755 	.word	0x080a3755
 80a5dd0:	080a37d5 	.word	0x080a37d5
 80a5dd4:	080a3859 	.word	0x080a3859
 80a5dd8:	080a391d 	.word	0x080a391d
 80a5ddc:	080a39e1 	.word	0x080a39e1
