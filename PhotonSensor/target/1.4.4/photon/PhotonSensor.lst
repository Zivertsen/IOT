
c:/Studie/IOT/IOT_projekt/PhotonSensor/target/1.4.4/photon/PhotonSensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005224  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a5240  080a5240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a5248  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000048c  20000000  080a524c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000064c  2000048c  2000048c  0004048c  2**2
                  ALLOC
  7 .module_info_suffix 00000028  080a56d8  080a56d8  000356d8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a5700  080a5700  00035700  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000d3172  00000000  00000000  00035704  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00013ac9  00000000  00000000  00108876  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0001914e  00000000  00000000  0011c33f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000025e8  00000000  00000000  0013548d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00003920  00000000  00000000  00137a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0002c8b3  00000000  00000000  0013b395  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0002eac4  00000000  00000000  00167c48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000a9e1e  00000000  00000000  0019670c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000cae0  00000000  00000000  0024052c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 fbd3 	bl	80a47d8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 fbd8 	bl	80a47ee <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a524c 	.word	0x080a524c
 80a004c:	2000048c 	.word	0x2000048c
 80a0050:	2000048c 	.word	0x2000048c
 80a0054:	20000ad8 	.word	0x20000ad8
 80a0058:	20000ad8 	.word	0x20000ad8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 fd9f 	bl	80a2ba0 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a51ec 	.word	0x080a51ec
 80a0084:	080a5238 	.word	0x080a5238

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b824 	b.w	80a00d4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f85b 	bl	80a0148 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 bd45 	b.w	80a2b24 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bf95 	b.w	80a1fc8 <malloc>

080a009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a009e:	f001 bf93 	b.w	80a1fc8 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bf99 	b.w	80a1fd8 <free>

080a00a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00a6:	f001 bf97 	b.w	80a1fd8 <free>
	...

080a00ac <__cxa_pure_virtual>:
        ;
    }
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
 80a00ac:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 80a00ae:	4a03      	ldr	r2, [pc, #12]	; (80a00bc <__cxa_pure_virtual+0x10>)
 80a00b0:	2100      	movs	r1, #0
 80a00b2:	200c      	movs	r0, #12
 80a00b4:	f001 fefc 	bl	80a1eb0 <panic_>
 80a00b8:	e7fe      	b.n	80a00b8 <__cxa_pure_virtual+0xc>
 80a00ba:	bf00      	nop
 80a00bc:	080a1c0d 	.word	0x080a1c0d

080a00c0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00c0:	7800      	ldrb	r0, [r0, #0]
 80a00c2:	fab0 f080 	clz	r0, r0
 80a00c6:	0940      	lsrs	r0, r0, #5
 80a00c8:	4770      	bx	lr

080a00ca <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ca:	2301      	movs	r3, #1
 80a00cc:	7003      	strb	r3, [r0, #0]
 80a00ce:	4770      	bx	lr

080a00d0 <_Z8callbackPcPhj>:
char Server[] = "test.Mosquitto.org";
uint16_t Port = 1883;

MQTT client(Server , 1883, callback);

void callback(char* topic, byte* payload, unsigned int length){
 80a00d0:	4770      	bx	lr
	...

080a00d4 <setup>:

}

// setup() runs once, when the device is first turned on.
void setup() {
 80a00d4:	b513      	push	{r0, r1, r4, lr}

  Serial.begin(9600);
 80a00d6:	f002 fe7f 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a00da:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00de:	f002 fe5b 	bl	80a2d98 <_ZN9USBSerial5beginEl>

  
  if(!BME280_init())
 80a00e2:	f000 f8ef 	bl	80a02c4 <_Z11BME280_initv>
 80a00e6:	b920      	cbnz	r0, 80a00f2 <setup+0x1e>
  {
    Serial.print("BME280 not initialized");
 80a00e8:	f002 fe76 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a00ec:	4911      	ldr	r1, [pc, #68]	; (80a0134 <setup+0x60>)
 80a00ee:	f002 fb58 	bl	80a27a2 <_ZN5Print5printEPKc>
  }
  Serial.println(BME280_Temperatur());
 80a00f2:	f002 fe71 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a00f6:	4604      	mov	r4, r0
 80a00f8:	f000 f8f2 	bl	80a02e0 <_Z17BME280_Temperaturv>
 80a00fc:	f003 fbec 	bl	80a38d8 <__aeabi_f2d>
 80a0100:	2302      	movs	r3, #2
 80a0102:	4602      	mov	r2, r0
 80a0104:	9300      	str	r3, [sp, #0]
 80a0106:	4620      	mov	r0, r4
 80a0108:	460b      	mov	r3, r1
 80a010a:	f002 fc59 	bl	80a29c0 <_ZN5Print7printlnEdi>
  client.connect("weatherclient");
 80a010e:	490a      	ldr	r1, [pc, #40]	; (80a0138 <setup+0x64>)
 80a0110:	480a      	ldr	r0, [pc, #40]	; (80a013c <setup+0x68>)
 80a0112:	f000 fecb 	bl	80a0eac <_ZN4MQTT7connectEPKc>
  

  // publish/subscribe
    if (client.isConnected()) {
 80a0116:	4809      	ldr	r0, [pc, #36]	; (80a013c <setup+0x68>)
 80a0118:	f000 fde3 	bl	80a0ce2 <_ZN4MQTT11isConnectedEv>
 80a011c:	b138      	cbz	r0, 80a012e <setup+0x5a>
        client.publish("weather","Hello from sensor");
 80a011e:	4a08      	ldr	r2, [pc, #32]	; (80a0140 <setup+0x6c>)
 80a0120:	4908      	ldr	r1, [pc, #32]	; (80a0144 <setup+0x70>)
 80a0122:	4806      	ldr	r0, [pc, #24]	; (80a013c <setup+0x68>)
    }

 
}
 80a0124:	b002      	add	sp, #8
 80a0126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  client.connect("weatherclient");
  

  // publish/subscribe
    if (client.isConnected()) {
        client.publish("weather","Hello from sensor");
 80a012a:	f000 bf3e 	b.w	80a0faa <_ZN4MQTT7publishEPKcS1_>
    }

 
}
 80a012e:	b002      	add	sp, #8
 80a0130:	bd10      	pop	{r4, pc}
 80a0132:	bf00      	nop
 80a0134:	080a4874 	.word	0x080a4874
 80a0138:	080a488b 	.word	0x080a488b
 80a013c:	20000490 	.word	0x20000490
 80a0140:	080a4899 	.word	0x080a4899
 80a0144:	080a48ab 	.word	0x080a48ab

080a0148 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a0148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  
    if (client.isConnected())
 80a014c:	4846      	ldr	r0, [pc, #280]	; (80a0268 <loop+0x120>)

 
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
 80a014e:	b08a      	sub	sp, #40	; 0x28
  
    if (client.isConnected())
 80a0150:	f000 fdc7 	bl	80a0ce2 <_ZN4MQTT11isConnectedEv>
 80a0154:	b110      	cbz	r0, 80a015c <loop+0x14>
      client.loop();
 80a0156:	4844      	ldr	r0, [pc, #272]	; (80a0268 <loop+0x120>)
 80a0158:	f000 ff6e 	bl	80a1038 <_ZN4MQTT4loopEv>
char temp[10] = {0};
 80a015c:	2400      	movs	r4, #0
 80a015e:	af01      	add	r7, sp, #4
char press[10] = {0};
 80a0160:	ad04      	add	r5, sp, #16
char humi[10] = {0};
 80a0162:	ae07      	add	r6, sp, #28
// loop() runs over and over again, as quickly as it can execute.
void loop() {
  
    if (client.isConnected())
      client.loop();
char temp[10] = {0};
 80a0164:	9401      	str	r4, [sp, #4]
 80a0166:	607c      	str	r4, [r7, #4]
 80a0168:	813c      	strh	r4, [r7, #8]
char press[10] = {0};
 80a016a:	9404      	str	r4, [sp, #16]
 80a016c:	606c      	str	r4, [r5, #4]
 80a016e:	812c      	strh	r4, [r5, #8]
char humi[10] = {0};
 80a0170:	9407      	str	r4, [sp, #28]
 80a0172:	6074      	str	r4, [r6, #4]
 80a0174:	8134      	strh	r4, [r6, #8]

float temp1 = BME280_Temperatur();
 80a0176:	f000 f8b3 	bl	80a02e0 <_Z17BME280_Temperaturv>
 80a017a:	4682      	mov	sl, r0
float humi1 = BME280_Humidity();
 80a017c:	f000 f8bc 	bl	80a02f8 <_Z15BME280_Humidityv>
 80a0180:	4681      	mov	r9, r0
float press1 = BME280_Pressure()/100;
 80a0182:	f000 f8b3 	bl	80a02ec <_Z15BME280_Pressurev>
 80a0186:	4680      	mov	r8, r0
sprintf(temp, "%.2f", temp1);
 80a0188:	4650      	mov	r0, sl
 80a018a:	f003 fba5 	bl	80a38d8 <__aeabi_f2d>
 80a018e:	4602      	mov	r2, r0
 80a0190:	460b      	mov	r3, r1
 80a0192:	4638      	mov	r0, r7
 80a0194:	4935      	ldr	r1, [pc, #212]	; (80a026c <loop+0x124>)
 80a0196:	f001 ff2f 	bl	80a1ff8 <sprintf>
sprintf(humi,"%.2f", humi1);
 80a019a:	4648      	mov	r0, r9
 80a019c:	f003 fb9c 	bl	80a38d8 <__aeabi_f2d>
 80a01a0:	4602      	mov	r2, r0
 80a01a2:	460b      	mov	r3, r1
 80a01a4:	4630      	mov	r0, r6
 80a01a6:	4931      	ldr	r1, [pc, #196]	; (80a026c <loop+0x124>)
 80a01a8:	f001 ff26 	bl	80a1ff8 <sprintf>
sprintf(press, "%.2f", press1);
 80a01ac:	4930      	ldr	r1, [pc, #192]	; (80a0270 <loop+0x128>)
 80a01ae:	4640      	mov	r0, r8
 80a01b0:	f004 f8a0 	bl	80a42f4 <__aeabi_fdiv>
 80a01b4:	f003 fb90 	bl	80a38d8 <__aeabi_f2d>
 80a01b8:	460b      	mov	r3, r1
 80a01ba:	4602      	mov	r2, r0
 80a01bc:	492b      	ldr	r1, [pc, #172]	; (80a026c <loop+0x124>)
 80a01be:	4628      	mov	r0, r5
 80a01c0:	f001 ff1a 	bl	80a1ff8 <sprintf>

client.publish("weather/Temperatur",temp);
 80a01c4:	463a      	mov	r2, r7
 80a01c6:	492b      	ldr	r1, [pc, #172]	; (80a0274 <loop+0x12c>)
 80a01c8:	4827      	ldr	r0, [pc, #156]	; (80a0268 <loop+0x120>)
 80a01ca:	f000 feee 	bl	80a0faa <_ZN4MQTT7publishEPKcS1_>
delay(5);
 80a01ce:	2005      	movs	r0, #5
 80a01d0:	f002 fc56 	bl	80a2a80 <delay>
client.publish("weather/Tryk",press);
 80a01d4:	462a      	mov	r2, r5
 80a01d6:	4928      	ldr	r1, [pc, #160]	; (80a0278 <loop+0x130>)
 80a01d8:	4823      	ldr	r0, [pc, #140]	; (80a0268 <loop+0x120>)
 80a01da:	f000 fee6 	bl	80a0faa <_ZN4MQTT7publishEPKcS1_>
delay(5);
 80a01de:	2005      	movs	r0, #5
 80a01e0:	f002 fc4e 	bl	80a2a80 <delay>
client.publish("weather/Fugtighed",humi);
 80a01e4:	4925      	ldr	r1, [pc, #148]	; (80a027c <loop+0x134>)
 80a01e6:	4632      	mov	r2, r6
 80a01e8:	481f      	ldr	r0, [pc, #124]	; (80a0268 <loop+0x120>)
 80a01ea:	f000 fede 	bl	80a0faa <_ZN4MQTT7publishEPKcS1_>

Serial.print("Temp: ");
 80a01ee:	f002 fdf3 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a01f2:	4923      	ldr	r1, [pc, #140]	; (80a0280 <loop+0x138>)
 80a01f4:	f002 fad5 	bl	80a27a2 <_ZN5Print5printEPKc>

for(int i =  0; i < 10; i++)
{
  Serial.print(temp[i]);
 80a01f8:	f002 fdee 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a01fc:	5d39      	ldrb	r1, [r7, r4]
delay(5);
client.publish("weather/Fugtighed",humi);

Serial.print("Temp: ");

for(int i =  0; i < 10; i++)
 80a01fe:	3401      	adds	r4, #1
{
  Serial.print(temp[i]);
 80a0200:	f002 fad3 	bl	80a27aa <_ZN5Print5printEc>
delay(5);
client.publish("weather/Fugtighed",humi);

Serial.print("Temp: ");

for(int i =  0; i < 10; i++)
 80a0204:	2c0a      	cmp	r4, #10
 80a0206:	d1f7      	bne.n	80a01f8 <loop+0xb0>
{
  Serial.print(temp[i]);
}
Serial.println();
 80a0208:	f002 fde6 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a020c:	f002 fad0 	bl	80a27b0 <_ZN5Print7printlnEv>
Serial.print("Humi: ");
 80a0210:	f002 fde2 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a0214:	491b      	ldr	r1, [pc, #108]	; (80a0284 <loop+0x13c>)
 80a0216:	f002 fac4 	bl	80a27a2 <_ZN5Print5printEPKc>

for(int i =  0; i < 10; i++)
 80a021a:	2400      	movs	r4, #0
{
  Serial.print(humi[i]);
 80a021c:	f002 fddc 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a0220:	5d31      	ldrb	r1, [r6, r4]
  Serial.print(temp[i]);
}
Serial.println();
Serial.print("Humi: ");

for(int i =  0; i < 10; i++)
 80a0222:	3401      	adds	r4, #1
{
  Serial.print(humi[i]);
 80a0224:	f002 fac1 	bl	80a27aa <_ZN5Print5printEc>
  Serial.print(temp[i]);
}
Serial.println();
Serial.print("Humi: ");

for(int i =  0; i < 10; i++)
 80a0228:	2c0a      	cmp	r4, #10
 80a022a:	d1f7      	bne.n	80a021c <loop+0xd4>
{
  Serial.print(humi[i]);
}
Serial.println();
 80a022c:	f002 fdd4 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a0230:	f002 fabe 	bl	80a27b0 <_ZN5Print7printlnEv>
Serial.print("Press: ");
 80a0234:	f002 fdd0 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a0238:	4913      	ldr	r1, [pc, #76]	; (80a0288 <loop+0x140>)
 80a023a:	f002 fab2 	bl	80a27a2 <_ZN5Print5printEPKc>

for(int i =  0; i < 10; i++)
 80a023e:	2400      	movs	r4, #0
{
  Serial.print(press[i]);
 80a0240:	f002 fdca 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a0244:	5d29      	ldrb	r1, [r5, r4]
  Serial.print(humi[i]);
}
Serial.println();
Serial.print("Press: ");

for(int i =  0; i < 10; i++)
 80a0246:	3401      	adds	r4, #1
{
  Serial.print(press[i]);
 80a0248:	f002 faaf 	bl	80a27aa <_ZN5Print5printEc>
  Serial.print(humi[i]);
}
Serial.println();
Serial.print("Press: ");

for(int i =  0; i < 10; i++)
 80a024c:	2c0a      	cmp	r4, #10
 80a024e:	d1f7      	bne.n	80a0240 <loop+0xf8>
{
  Serial.print(press[i]);
}
Serial.println();
 80a0250:	f002 fdc2 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a0254:	f002 faac 	bl	80a27b0 <_ZN5Print7printlnEv>

delay(10000);
 80a0258:	f242 7010 	movw	r0, #10000	; 0x2710
 80a025c:	f002 fc10 	bl	80a2a80 <delay>

}
 80a0260:	b00a      	add	sp, #40	; 0x28
 80a0262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a0266:	bf00      	nop
 80a0268:	20000490 	.word	0x20000490
 80a026c:	080a48b3 	.word	0x080a48b3
 80a0270:	42c80000 	.word	0x42c80000
 80a0274:	080a48b8 	.word	0x080a48b8
 80a0278:	080a48cb 	.word	0x080a48cb
 80a027c:	080a48d8 	.word	0x080a48d8
 80a0280:	080a48ea 	.word	0x080a48ea
 80a0284:	080a48f1 	.word	0x080a48f1
 80a0288:	080a48f8 	.word	0x080a48f8

080a028c <_GLOBAL__sub_I_Server>:
 80a028c:	b510      	push	{r4, lr}

//byte Server[] = {192,168,0,19};
char Server[] = "test.Mosquitto.org";
uint16_t Port = 1883;

MQTT client(Server , 1883, callback);
 80a028e:	4c08      	ldr	r4, [pc, #32]	; (80a02b0 <_GLOBAL__sub_I_Server+0x24>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0290:	f001 fc5c 	bl	80a1b4c <HAL_Pin_Map>
 80a0294:	f240 725b 	movw	r2, #1883	; 0x75b
 80a0298:	4906      	ldr	r1, [pc, #24]	; (80a02b4 <_GLOBAL__sub_I_Server+0x28>)
 80a029a:	4620      	mov	r0, r4
 80a029c:	4b06      	ldr	r3, [pc, #24]	; (80a02b8 <_GLOBAL__sub_I_Server+0x2c>)
 80a029e:	f000 fc39 	bl	80a0b14 <_ZN4MQTTC1EPctPFvS0_PhjE>
 80a02a2:	4620      	mov	r0, r4
}
Serial.println();

delay(10000);

}
 80a02a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

//byte Server[] = {192,168,0,19};
char Server[] = "test.Mosquitto.org";
uint16_t Port = 1883;

MQTT client(Server , 1883, callback);
 80a02a8:	4a04      	ldr	r2, [pc, #16]	; (80a02bc <_GLOBAL__sub_I_Server+0x30>)
 80a02aa:	4905      	ldr	r1, [pc, #20]	; (80a02c0 <_GLOBAL__sub_I_Server+0x34>)
 80a02ac:	f003 b860 	b.w	80a3370 <__aeabi_atexit>
 80a02b0:	20000490 	.word	0x20000490
 80a02b4:	20000000 	.word	0x20000000
 80a02b8:	080a00d1 	.word	0x080a00d1
 80a02bc:	2000048c 	.word	0x2000048c
 80a02c0:	080a1245 	.word	0x080a1245

080a02c4 <_Z11BME280_initv>:
#include "BME280_waether.h"

Adafruit_BME280 bme;

bool BME280_init()
{
 80a02c4:	b508      	push	{r3, lr}

    if (!Serial)
 80a02c6:	f002 fd87 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a02ca:	f002 fd6c 	bl	80a2da6 <_ZN9USBSerialcvbEv>
 80a02ce:	b120      	cbz	r0, 80a02da <_Z11BME280_initv+0x16>
    {
        return false; // return false if the serson not found
    }

    return true;
}
 80a02d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    if (!Serial)
        return false; // return false if serial not running
        

    bool status = bme.begin();
 80a02d4:	4801      	ldr	r0, [pc, #4]	; (80a02dc <_Z11BME280_initv+0x18>)
 80a02d6:	f001 bad9 	b.w	80a188c <_ZN15Adafruit_BME2805beginEv>
    {
        return false; // return false if the serson not found
    }

    return true;
}
 80a02da:	bd08      	pop	{r3, pc}
 80a02dc:	200004e8 	.word	0x200004e8

080a02e0 <_Z17BME280_Temperaturv>:

float BME280_Temperatur()
{
    return bme.readTemperature();
 80a02e0:	4801      	ldr	r0, [pc, #4]	; (80a02e8 <_Z17BME280_Temperaturv+0x8>)
 80a02e2:	f001 bae7 	b.w	80a18b4 <_ZN15Adafruit_BME28015readTemperatureEv>
 80a02e6:	bf00      	nop
 80a02e8:	200004e8 	.word	0x200004e8

080a02ec <_Z15BME280_Pressurev>:
}


float BME280_Pressure()
{
    return bme.readPressure();
 80a02ec:	4801      	ldr	r0, [pc, #4]	; (80a02f4 <_Z15BME280_Pressurev+0x8>)
 80a02ee:	f001 bb0b 	b.w	80a1908 <_ZN15Adafruit_BME28012readPressureEv>
 80a02f2:	bf00      	nop
 80a02f4:	200004e8 	.word	0x200004e8

080a02f8 <_Z15BME280_Humidityv>:
}

float BME280_Humidity()
{
    return bme.readHumidity();
 80a02f8:	4801      	ldr	r0, [pc, #4]	; (80a0300 <_Z15BME280_Humidityv+0x8>)
 80a02fa:	f001 bbdb 	b.w	80a1ab4 <_ZN15Adafruit_BME28012readHumidityEv>
 80a02fe:	bf00      	nop
 80a0300:	200004e8 	.word	0x200004e8

080a0304 <_GLOBAL__sub_I_bme>:
}
 80a0304:	b508      	push	{r3, lr}
 80a0306:	f001 fc21 	bl	80a1b4c <HAL_Pin_Map>
 80a030a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
#include "BME280_waether.h"

Adafruit_BME280 bme;
 80a030e:	4801      	ldr	r0, [pc, #4]	; (80a0314 <_GLOBAL__sub_I_bme+0x10>)
 80a0310:	f000 bfdc 	b.w	80a12cc <_ZN15Adafruit_BME280C1Ev>
 80a0314:	200004e8 	.word	0x200004e8

080a0318 <_ZN16Adafruit_SSD1306D1Ev>:
#define SSD1306_RIGHT_HORIZONTAL_SCROLL 0x26
#define SSD1306_LEFT_HORIZONTAL_SCROLL 0x27
#define SSD1306_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define SSD1306_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL 0x2A

class Adafruit_SSD1306 : public Adafruit_GFX {
 80a0318:	4770      	bx	lr

080a031a <_ZN16Adafruit_SSD1306D0Ev>:
 80a031a:	b510      	push	{r4, lr}
 80a031c:	4604      	mov	r4, r0
 80a031e:	2124      	movs	r1, #36	; 0x24
 80a0320:	f003 f82b 	bl	80a337a <_ZdlPvj>
 80a0324:	4620      	mov	r0, r4
 80a0326:	bd10      	pop	{r4, pc}

080a0328 <_GLOBAL__sub_I_oled>:
    oled.setTextColor(WHITE);
    oled.setTextSize(1);
    oled.setCursor(42,54);
    oled.print("mm a day");
    oled.display();
}
 80a0328:	b510      	push	{r4, lr}
#include "Display.h"


Adafruit_SSD1306 oled(OLED_RESET);
 80a032a:	4c07      	ldr	r4, [pc, #28]	; (80a0348 <_GLOBAL__sub_I_oled+0x20>)
 80a032c:	f001 fc0e 	bl	80a1b4c <HAL_Pin_Map>
 80a0330:	2104      	movs	r1, #4
 80a0332:	4620      	mov	r0, r4
 80a0334:	f000 f9ce 	bl	80a06d4 <_ZN16Adafruit_SSD1306C1Ea>
 80a0338:	4620      	mov	r0, r4
    oled.setTextColor(WHITE);
    oled.setTextSize(1);
    oled.setCursor(42,54);
    oled.print("mm a day");
    oled.display();
}
 80a033a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "Display.h"


Adafruit_SSD1306 oled(OLED_RESET);
 80a033e:	4a03      	ldr	r2, [pc, #12]	; (80a034c <_GLOBAL__sub_I_oled+0x24>)
 80a0340:	4903      	ldr	r1, [pc, #12]	; (80a0350 <_GLOBAL__sub_I_oled+0x28>)
 80a0342:	f003 b815 	b.w	80a3370 <__aeabi_atexit>
 80a0346:	bf00      	nop
 80a0348:	2000052c 	.word	0x2000052c
 80a034c:	2000048c 	.word	0x2000048c
 80a0350:	080a0319 	.word	0x080a0319

080a0354 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a0354:	b5f0      	push	{r4, r5, r6, r7, lr}
  boolean bSwap = false;
  switch(rotation) { 
 80a0356:	7e44      	ldrb	r4, [r0, #25]
  } else {
    shiftOut(sid, sclk, MSBFIRST, d);		// SSD1306 specs show MSB out first
  }
}

void Adafruit_SSD1306::drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color) {
 80a0358:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  boolean bSwap = false;
  switch(rotation) { 
 80a035c:	2c02      	cmp	r4, #2
 80a035e:	d008      	beq.n	80a0372 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>
 80a0360:	2c03      	cmp	r4, #3
 80a0362:	d00f      	beq.n	80a0384 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x30>
 80a0364:	2c01      	cmp	r4, #1
 80a0366:	d170      	bne.n	80a044a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
      break;
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
 80a0368:	8904      	ldrh	r4, [r0, #8]
 80a036a:	3c01      	subs	r4, #1
 80a036c:	1aa2      	subs	r2, r4, r2
 80a036e:	b212      	sxth	r2, r2
      break;
 80a0370:	e00c      	b.n	80a038c <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x38>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a0372:	8944      	ldrh	r4, [r0, #10]
 80a0374:	3c01      	subs	r4, #1
 80a0376:	1aa2      	subs	r2, r4, r2
      x -= (w-1);
 80a0378:	8904      	ldrh	r4, [r0, #8]
      x = WIDTH - x - 1;
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
      y = HEIGHT - y - 1;
 80a037a:	b212      	sxth	r2, r2
      x -= (w-1);
 80a037c:	1ae4      	subs	r4, r4, r3
 80a037e:	1a61      	subs	r1, r4, r1
 80a0380:	b209      	sxth	r1, r1
      break;
 80a0382:	e062      	b.n	80a044a <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf6>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y  and adjust y for w (not to become h)
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
      y -= (w-1);
 80a0384:	8944      	ldrh	r4, [r0, #10]
 80a0386:	1ae4      	subs	r4, r4, r3
 80a0388:	1a61      	subs	r1, r4, r1
 80a038a:	b209      	sxth	r1, r1


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a038c:	2a00      	cmp	r2, #0
 80a038e:	db5b      	blt.n	80a0448 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xf4>
 80a0390:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a0394:	4294      	cmp	r4, r2
 80a0396:	f340 8090 	ble.w	80a04ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a039a:	2900      	cmp	r1, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a039c:	bfbe      	ittt	lt
 80a039e:	185b      	addlt	r3, r3, r1
 80a03a0:	b21b      	sxthlt	r3, r3
    __y = 0;
 80a03a2:	2100      	movlt	r1, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a03a4:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 80a03a8:	18cc      	adds	r4, r1, r3
 80a03aa:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a03ac:	bfc4      	itt	gt
 80a03ae:	1a43      	subgt	r3, r0, r1
 80a03b0:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a03b2:	2b00      	cmp	r3, #0
 80a03b4:	f340 8081 	ble.w	80a04ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a03b8:	b2c9      	uxtb	r1, r1
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a03ba:	08c8      	lsrs	r0, r1, #3
 80a03bc:	4f3f      	ldr	r7, [pc, #252]	; (80a04bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)
 80a03be:	eb02 12c0 	add.w	r2, r2, r0, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a03c2:	f011 0107 	ands.w	r1, r1, #7
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a03c6:	b2db      	uxtb	r3, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a03c8:	eb07 0402 	add.w	r4, r7, r2

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a03cc:	d017      	beq.n	80a03fe <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xaa>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a03ce:	f1c1 0108 	rsb	r1, r1, #8
 80a03d2:	b2c8      	uxtb	r0, r1

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a03d4:	493a      	ldr	r1, [pc, #232]	; (80a04c0 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x16c>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a03d6:	4283      	cmp	r3, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a03d8:	5c0e      	ldrb	r6, [r1, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a03da:	bf3f      	itttt	cc
 80a03dc:	ebc3 0e00 	rsbcc	lr, r3, r0
 80a03e0:	21ff      	movcc	r1, #255	; 0xff
 80a03e2:	fa41 f10e 	asrcc.w	r1, r1, lr
 80a03e6:	400e      	andcc	r6, r1
 80a03e8:	5cb9      	ldrb	r1, [r7, r2]
    }

    if(color == WHITE) { 
 80a03ea:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a03ec:	bf0c      	ite	eq
 80a03ee:	4331      	orreq	r1, r6
    } else {
      *pBuf &= ~mask;
 80a03f0:	43b1      	bicne	r1, r6
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a03f2:	4283      	cmp	r3, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a03f4:	54b9      	strb	r1, [r7, r2]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a03f6:	d360      	bcc.n	80a04ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

    h -= mod;
 80a03f8:	1a18      	subs	r0, r3, r0
 80a03fa:	b2c3      	uxtb	r3, r0

    pBuf += SSD1306_LCDWIDTH;
 80a03fc:	3480      	adds	r4, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a03fe:	2b07      	cmp	r3, #7
 80a0400:	d917      	bls.n	80a0432 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xde>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a0402:	2d01      	cmp	r5, #1
 80a0404:	bf0c      	ite	eq
 80a0406:	20ff      	moveq	r0, #255	; 0xff
 80a0408:	2000      	movne	r0, #0
 80a040a:	461a      	mov	r2, r3
 80a040c:	f104 0180 	add.w	r1, r4, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a0410:	3a08      	subs	r2, #8
 80a0412:	b2d2      	uxtb	r2, r2
    } while(h >= 8);
 80a0414:	2a07      	cmp	r2, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a0416:	f801 0c80 	strb.w	r0, [r1, #-128]
 80a041a:	f101 0180 	add.w	r1, r1, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a041e:	d8f7      	bhi.n	80a0410 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0xbc>
 80a0420:	f1a3 0208 	sub.w	r2, r3, #8
 80a0424:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80a0428:	3201      	adds	r2, #1
 80a042a:	eb04 14c2 	add.w	r4, r4, r2, lsl #7
 80a042e:	f003 0307 	and.w	r3, r3, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a0432:	2b00      	cmp	r3, #0
 80a0434:	d041      	beq.n	80a04ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a0436:	4a23      	ldr	r2, [pc, #140]	; (80a04c4 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x170>)
    if(color == WHITE) { 
 80a0438:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a043a:	5cd2      	ldrb	r2, [r2, r3]
 80a043c:	7823      	ldrb	r3, [r4, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a043e:	bf0c      	ite	eq
 80a0440:	4313      	orreq	r3, r2
    } else { 
      *pBuf &= ~mask;
 80a0442:	4393      	bicne	r3, r2
 80a0444:	7023      	strb	r3, [r4, #0]
 80a0446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0448:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a044a:	2a00      	cmp	r2, #0
 80a044c:	db35      	blt.n	80a04ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a044e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a0452:	4294      	cmp	r4, r2
 80a0454:	dd31      	ble.n	80a04ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a0456:	2900      	cmp	r1, #0
    w += x;
 80a0458:	bfbc      	itt	lt
 80a045a:	18c9      	addlt	r1, r1, r3
 80a045c:	b20b      	sxthlt	r3, r1
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a045e:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a0462:	bfb8      	it	lt
 80a0464:	2100      	movlt	r1, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a0466:	18ce      	adds	r6, r1, r3
 80a0468:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a046a:	bfc4      	itt	gt
 80a046c:	1a63      	subgt	r3, r4, r1
 80a046e:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a0470:	2b00      	cmp	r3, #0
 80a0472:	dd22      	ble.n	80a04ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0474:	10d0      	asrs	r0, r2, #3
 80a0476:	eb01 11c0 	add.w	r1, r1, r0, lsl #7
 80a047a:	4810      	ldr	r0, [pc, #64]	; (80a04bc <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x168>)

  register uint8_t mask = 1 << (y&7);
 80a047c:	f002 0207 	and.w	r2, r2, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0480:	4401      	add	r1, r0

  register uint8_t mask = 1 << (y&7);
 80a0482:	2001      	movs	r0, #1
 80a0484:	fa00 f202 	lsl.w	r2, r0, r2

  if(color == WHITE) { 
 80a0488:	4285      	cmp	r5, r0
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a048a:	b2d2      	uxtb	r2, r2

  if(color == WHITE) { 
 80a048c:	d109      	bne.n	80a04a2 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x14e>
 80a048e:	3b01      	subs	r3, #1
 80a0490:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ |= mask; }
 80a0492:	1c5c      	adds	r4, r3, #1
 80a0494:	d011      	beq.n	80a04ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a0496:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a049a:	4310      	orrs	r0, r2
 80a049c:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a04a0:	e7f5      	b.n	80a048e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x13a>
  } else {
    mask = ~mask;
 80a04a2:	43d2      	mvns	r2, r2
 80a04a4:	b2d2      	uxtb	r2, r2
 80a04a6:	3b01      	subs	r3, #1
 80a04a8:	b21b      	sxth	r3, r3
    while(w--) { *pBuf++ &= mask; }
 80a04aa:	1c58      	adds	r0, r3, #1
 80a04ac:	d005      	beq.n	80a04ba <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x166>
 80a04ae:	f811 0b01 	ldrb.w	r0, [r1], #1
 80a04b2:	4010      	ands	r0, r2
 80a04b4:	f801 0c01 	strb.w	r0, [r1, #-1]
 80a04b8:	e7f5      	b.n	80a04a6 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x152>
 80a04ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a04bc:	20000023 	.word	0x20000023
 80a04c0:	2000001b 	.word	0x2000001b
 80a04c4:	20000013 	.word	0x20000013

080a04c8 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a04c8:	b5f0      	push	{r4, r5, r6, r7, lr}
  bool bSwap = false;
  switch(rotation) { 
 80a04ca:	7e44      	ldrb	r4, [r0, #25]
    mask = ~mask;
    while(w--) { *pBuf++ &= mask; }
  }
}

void Adafruit_SSD1306::drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color) {
 80a04cc:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  bool bSwap = false;
  switch(rotation) { 
 80a04d0:	2c02      	cmp	r4, #2
 80a04d2:	d008      	beq.n	80a04e6 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>
 80a04d4:	2c03      	cmp	r4, #3
 80a04d6:	d00f      	beq.n	80a04f8 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x30>
 80a04d8:	2c01      	cmp	r4, #1
 80a04da:	d112      	bne.n	80a0502 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 1:
      // 90 degree rotation, swap x & y for rotation, then invert x and adjust x for h (now to become w)
      bSwap = true;
      swap(x, y);
      x = WIDTH - x - 1;
      x -= (h-1);
 80a04dc:	8904      	ldrh	r4, [r0, #8]
 80a04de:	1ae4      	subs	r4, r4, r3
 80a04e0:	1aa2      	subs	r2, r4, r2
 80a04e2:	b212      	sxth	r2, r2
      break;
 80a04e4:	e06d      	b.n	80a05c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a04e6:	8904      	ldrh	r4, [r0, #8]
 80a04e8:	3c01      	subs	r4, #1
 80a04ea:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a04ec:	8944      	ldrh	r4, [r0, #10]
      x = WIDTH - x - 1;
      x -= (h-1);
      break;
    case 2:
      // 180 degree rotation, invert x and y - then shift y around for height.
      x = WIDTH - x - 1;
 80a04ee:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
      y -= (h-1);
 80a04f0:	1ae4      	subs	r4, r4, r3
 80a04f2:	1aa2      	subs	r2, r4, r2
 80a04f4:	b212      	sxth	r2, r2
      break;
 80a04f6:	e004      	b.n	80a0502 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    case 3:
      // 270 degree rotation, swap x & y for rotation, then invert y 
      bSwap = true;
      swap(x, y);
      y = HEIGHT - y - 1;
 80a04f8:	8944      	ldrh	r4, [r0, #10]
 80a04fa:	3c01      	subs	r4, #1
 80a04fc:	1a61      	subs	r1, r4, r1
 80a04fe:	b209      	sxth	r1, r1
      break;
 80a0500:	e05f      	b.n	80a05c2 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xfa>


void Adafruit_SSD1306::drawFastVLineInternal(int16_t x, int16_t __y, int16_t __h, uint16_t color) {

  // do nothing if we're off the left or right side of the screen
  if(x < 0 || x >= WIDTH) { return; }
 80a0502:	2900      	cmp	r1, #0
 80a0504:	db5c      	blt.n	80a05c0 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xf8>
 80a0506:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80a050a:	428c      	cmp	r4, r1
 80a050c:	f340 8091 	ble.w	80a0632 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(__y < 0) { 
 80a0510:	2a00      	cmp	r2, #0
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
 80a0512:	bfbc      	itt	lt
 80a0514:	18d2      	addlt	r2, r2, r3
 80a0516:	b213      	sxthlt	r3, r2
    __y = 0;

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0518:	f9b0 000a 	ldrsh.w	r0, [r0, #10]

  // make sure we don't try to draw below 0
  if(__y < 0) { 
    // __y is negative, this will subtract enough from __h to account for __y being 0
    __h += __y;
    __y = 0;
 80a051c:	bfb8      	it	lt
 80a051e:	2200      	movlt	r2, #0

  } 

  // make sure we don't go past the height of the display
  if( (__y + __h) > HEIGHT) { 
 80a0520:	18d4      	adds	r4, r2, r3
 80a0522:	4284      	cmp	r4, r0
    __h = (HEIGHT - __y);
 80a0524:	bfc4      	itt	gt
 80a0526:	1a83      	subgt	r3, r0, r2
 80a0528:	b21b      	sxthgt	r3, r3
  }

  // if our height is now negative, punt 
  if(__h <= 0) { 
 80a052a:	2b00      	cmp	r3, #0
 80a052c:	f340 8081 	ble.w	80a0632 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
 80a0530:	b2d4      	uxtb	r4, r2
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0532:	4e40      	ldr	r6, [pc, #256]	; (80a0634 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)
    return;
  }

  // this display doesn't need ints for coordinates, use local byte registers for faster juggling
  register uint8_t y = __y;
  register uint8_t h = __h;
 80a0534:	b2da      	uxtb	r2, r3
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0536:	08e3      	lsrs	r3, r4, #3
 80a0538:	eb01 11c3 	add.w	r1, r1, r3, lsl #7

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a053c:	f014 0407 	ands.w	r4, r4, #7
  // set up the pointer for fast movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a0540:	eb06 0301 	add.w	r3, r6, r1

  // do the first partial byte, if necessary - this requires some masking
  register uint8_t mod = (y&7);
  if(mod) {
 80a0544:	d017      	beq.n	80a0576 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xae>
    // mask off the high n bits we want to set 
    mod = 8-mod;
 80a0546:	f1c4 0408 	rsb	r4, r4, #8
 80a054a:	b2e0      	uxtb	r0, r4

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a054c:	4c3a      	ldr	r4, [pc, #232]	; (80a0638 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x170>)

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
 80a054e:	4282      	cmp	r2, r0
    mod = 8-mod;

    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    // register uint8_t mask = ~(0xFF >> (mod));
    static uint8_t premask[8] = {0x00, 0x80, 0xC0, 0xE0, 0xF0, 0xF8, 0xFC, 0xFE };
    register uint8_t mask = premask[mod];
 80a0550:	5c27      	ldrb	r7, [r4, r0]

    // adjust the mask if we're not going to reach the end of this byte
    if( h < mod) { 
      mask &= (0XFF >> (mod-h));
 80a0552:	bf3f      	itttt	cc
 80a0554:	ebc2 0e00 	rsbcc	lr, r2, r0
 80a0558:	24ff      	movcc	r4, #255	; 0xff
 80a055a:	fa44 f40e 	asrcc.w	r4, r4, lr
 80a055e:	4027      	andcc	r7, r4
 80a0560:	5c74      	ldrb	r4, [r6, r1]
    }

    if(color == WHITE) { 
 80a0562:	2d01      	cmp	r5, #1
      *pBuf |= mask;
 80a0564:	bf0c      	ite	eq
 80a0566:	433c      	orreq	r4, r7
    } else {
      *pBuf &= ~mask;
 80a0568:	43bc      	bicne	r4, r7
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a056a:	4282      	cmp	r2, r0
    }

    if(color == WHITE) { 
      *pBuf |= mask;
    } else {
      *pBuf &= ~mask;
 80a056c:	5474      	strb	r4, [r6, r1]
    }

    // fast exit if we're done here!
    if(h<mod) { return; }
 80a056e:	d360      	bcc.n	80a0632 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

    h -= mod;
 80a0570:	1a10      	subs	r0, r2, r0
 80a0572:	b2c2      	uxtb	r2, r0

    pBuf += SSD1306_LCDWIDTH;
 80a0574:	3380      	adds	r3, #128	; 0x80
  }


  // write solid bytes while we can - effectively doing 8 rows at a time
  if(h >= 8) { 
 80a0576:	2a07      	cmp	r2, #7
 80a0578:	d917      	bls.n	80a05aa <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xe2>
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;
 80a057a:	2d01      	cmp	r5, #1
 80a057c:	bf0c      	ite	eq
 80a057e:	24ff      	moveq	r4, #255	; 0xff
 80a0580:	2400      	movne	r4, #0
 80a0582:	4611      	mov	r1, r2
 80a0584:	f103 0080 	add.w	r0, r3, #128	; 0x80

      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
 80a0588:	3908      	subs	r1, #8
 80a058a:	b2c9      	uxtb	r1, r1
    } while(h >= 8);
 80a058c:	2907      	cmp	r1, #7
    // store a local value to work with 
    register uint8_t val = (color == WHITE) ? 255 : 0;

    do  {
      // write our value in
      *pBuf = val;
 80a058e:	f800 4c80 	strb.w	r4, [r0, #-128]
 80a0592:	f100 0080 	add.w	r0, r0, #128	; 0x80
      // adjust the buffer forward 8 rows worth of data
      pBuf += SSD1306_LCDWIDTH;

      // adjust h & y (there's got to be a faster way for me to do this, but this should still help a fair bit for now)
      h -= 8;
    } while(h >= 8);
 80a0596:	d8f7      	bhi.n	80a0588 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0xc0>
 80a0598:	f1a2 0108 	sub.w	r1, r2, #8
 80a059c:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80a05a0:	3101      	adds	r1, #1
 80a05a2:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
 80a05a6:	f002 0207 	and.w	r2, r2, #7
  }

  // now do the final partial byte, if necessary
  if(h) {
 80a05aa:	2a00      	cmp	r2, #0
 80a05ac:	d041      	beq.n	80a0632 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a05ae:	4923      	ldr	r1, [pc, #140]	; (80a063c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x174>)
    if(color == WHITE) { 
 80a05b0:	2d01      	cmp	r5, #1
    mod = h & 7;
    // this time we want to mask the low bits of the byte, vs the high bits we did above
    // register uint8_t mask = (1 << mod) - 1;
    // note - lookup table results in a nearly 10% performance improvement in fill* functions
    static uint8_t postmask[8] = {0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F };
    register uint8_t mask = postmask[mod];
 80a05b2:	5c89      	ldrb	r1, [r1, r2]
 80a05b4:	781a      	ldrb	r2, [r3, #0]
    if(color == WHITE) { 
      *pBuf |= mask;
 80a05b6:	bf0c      	ite	eq
 80a05b8:	430a      	orreq	r2, r1
    } else { 
      *pBuf &= ~mask;
 80a05ba:	438a      	bicne	r2, r1
 80a05bc:	701a      	strb	r2, [r3, #0]
  if(bSwap) { 
    drawFastHLineInternal(x, y, h, color);
  } else {
    drawFastVLineInternal(x, y, h, color);
  }
}
 80a05be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a05c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
}

void Adafruit_SSD1306::drawFastHLineInternal(int16_t x, int16_t y, int16_t w, uint16_t color) {
  // Do bounds/limit checks
  if(y < 0 || y >= HEIGHT) { return; }
 80a05c2:	2900      	cmp	r1, #0
 80a05c4:	db35      	blt.n	80a0632 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a05c6:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
 80a05ca:	428c      	cmp	r4, r1
 80a05cc:	dd31      	ble.n	80a0632 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>

  // make sure we don't try to draw below 0
  if(x < 0) { 
 80a05ce:	2a00      	cmp	r2, #0
    w += x;
 80a05d0:	bfbc      	itt	lt
 80a05d2:	18d2      	addlt	r2, r2, r3
 80a05d4:	b213      	sxthlt	r3, r2
    x = 0;
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a05d6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
  if(y < 0 || y >= HEIGHT) { return; }

  // make sure we don't try to draw below 0
  if(x < 0) { 
    w += x;
    x = 0;
 80a05da:	bfb8      	it	lt
 80a05dc:	2200      	movlt	r2, #0
  }

  // make sure we don't go off the edge of the display
  if( (x + w) > WIDTH) { 
 80a05de:	18d6      	adds	r6, r2, r3
 80a05e0:	42be      	cmp	r6, r7
    w = (HEIGHT- x);
 80a05e2:	bfc4      	itt	gt
 80a05e4:	1aa3      	subgt	r3, r4, r2
 80a05e6:	b21b      	sxthgt	r3, r3
  }

  // if our width is now negative, punt
  if(w <= 0) { return; }
 80a05e8:	2b00      	cmp	r3, #0
 80a05ea:	dd22      	ble.n	80a0632 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a05ec:	10c8      	asrs	r0, r1, #3
 80a05ee:	eb02 12c0 	add.w	r2, r2, r0, lsl #7
 80a05f2:	4810      	ldr	r0, [pc, #64]	; (80a0634 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16c>)

  register uint8_t mask = 1 << (y&7);
 80a05f4:	f001 0107 	and.w	r1, r1, #7
  // set up the pointer for  movement through the buffer
  register uint8_t *pBuf = buffer;
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;
 80a05f8:	4410      	add	r0, r2

  register uint8_t mask = 1 << (y&7);
 80a05fa:	2201      	movs	r2, #1
 80a05fc:	fa02 f101 	lsl.w	r1, r2, r1

  if(color == WHITE) { 
 80a0600:	4295      	cmp	r5, r2
  // adjust the buffer pointer for the current row
  pBuf += ((y/8) * SSD1306_LCDWIDTH);
  // and offset x columns in
  pBuf += x;

  register uint8_t mask = 1 << (y&7);
 80a0602:	b2c9      	uxtb	r1, r1

  if(color == WHITE) { 
 80a0604:	d109      	bne.n	80a061a <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x152>
 80a0606:	1e5a      	subs	r2, r3, #1
 80a0608:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ |= mask; }
 80a060a:	1c5c      	adds	r4, r3, #1
 80a060c:	d011      	beq.n	80a0632 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a060e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a0612:	430a      	orrs	r2, r1
 80a0614:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a0618:	e7f5      	b.n	80a0606 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x13e>
  } else {
    mask = ~mask;
 80a061a:	43c9      	mvns	r1, r1
 80a061c:	b2c9      	uxtb	r1, r1
 80a061e:	1e5a      	subs	r2, r3, #1
 80a0620:	b213      	sxth	r3, r2
    while(w--) { *pBuf++ &= mask; }
 80a0622:	1c5a      	adds	r2, r3, #1
 80a0624:	d005      	beq.n	80a0632 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x16a>
 80a0626:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a062a:	400a      	ands	r2, r1
 80a062c:	f800 2c01 	strb.w	r2, [r0, #-1]
 80a0630:	e7f5      	b.n	80a061e <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x156>
 80a0632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a0634:	20000023 	.word	0x20000023
 80a0638:	2000001b 	.word	0x2000001b
 80a063c:	20000013 	.word	0x20000013

080a0640 <_ZN16Adafruit_SSD13069drawPixelEsst>:
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a0642:	1e0d      	subs	r5, r1, #0
};



// the most basic function, set a single pixel
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
 80a0644:	4606      	mov	r6, r0
 80a0646:	4614      	mov	r4, r2
 80a0648:	461f      	mov	r7, r3
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
 80a064a:	db3f      	blt.n	80a06cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a064c:	f000 fa13 	bl	80a0a76 <_ZN12Adafruit_GFX5widthEv>
 80a0650:	4285      	cmp	r5, r0
 80a0652:	da3b      	bge.n	80a06cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0654:	2c00      	cmp	r4, #0
 80a0656:	db39      	blt.n	80a06cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
 80a0658:	4630      	mov	r0, r6
 80a065a:	f000 fa0f 	bl	80a0a7c <_ZN12Adafruit_GFX6heightEv>
 80a065e:	4284      	cmp	r4, r0
 80a0660:	da34      	bge.n	80a06cc <_ZN16Adafruit_SSD13069drawPixelEsst+0x8c>
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a0662:	4630      	mov	r0, r6
 80a0664:	f000 fa05 	bl	80a0a72 <_ZN12Adafruit_GFX11getRotationEv>
 80a0668:	2802      	cmp	r0, #2
 80a066a:	d127      	bne.n	80a06bc <_ZN16Adafruit_SSD13069drawPixelEsst+0x7c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a066c:	8931      	ldrh	r1, [r6, #8]
    y = HEIGHT - y - 1;
 80a066e:	8970      	ldrh	r0, [r6, #10]
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0670:	3901      	subs	r1, #1
    y = HEIGHT - y - 1;
 80a0672:	3801      	subs	r0, #1
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0674:	1b49      	subs	r1, r1, r5
    y = HEIGHT - y - 1;
 80a0676:	1b00      	subs	r0, r0, r4
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
    break;
  case 2:
    x = WIDTH - x - 1;
 80a0678:	b20d      	sxth	r5, r1
    y = HEIGHT - y - 1;
 80a067a:	b204      	sxth	r4, r0
 80a067c:	e006      	b.n	80a068c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a067e:	2801      	cmp	r0, #1
 80a0680:	d104      	bne.n	80a068c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
  case 1:
    swap(x, y);
    x = WIDTH - x - 1;
 80a0682:	8933      	ldrh	r3, [r6, #8]
 80a0684:	3b01      	subs	r3, #1
 80a0686:	1b1b      	subs	r3, r3, r4
 80a0688:	462c      	mov	r4, r5
 80a068a:	b21d      	sxth	r5, r3
 80a068c:	2008      	movs	r0, #8
    break;
  }  

  // x is which column
  if (color == WHITE) 
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a068e:	fb94 f0f0 	sdiv	r0, r4, r0
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a0692:	2f01      	cmp	r7, #1
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a0694:	b200      	sxth	r0, r0
 80a0696:	4b0e      	ldr	r3, [pc, #56]	; (80a06d0 <_ZN16Adafruit_SSD13069drawPixelEsst+0x90>)
 80a0698:	f004 0207 	and.w	r2, r4, #7
 80a069c:	eb05 11c0 	add.w	r1, r5, r0, lsl #7
    y = HEIGHT - y - 1;
    break;
  }  

  // x is which column
  if (color == WHITE) 
 80a06a0:	d104      	bne.n	80a06ac <_ZN16Adafruit_SSD13069drawPixelEsst+0x6c>
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] |= (1 << (y&7));  
 80a06a2:	4097      	lsls	r7, r2
 80a06a4:	5c5a      	ldrb	r2, [r3, r1]
 80a06a6:	4317      	orrs	r7, r2
 80a06a8:	545f      	strb	r7, [r3, r1]
 80a06aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else
    buffer[x+ (y/8)*SSD1306_LCDWIDTH] &= ~(1 << (y&7)); 
 80a06ac:	5c58      	ldrb	r0, [r3, r1]
 80a06ae:	2701      	movs	r7, #1
 80a06b0:	fa07 f202 	lsl.w	r2, r7, r2
 80a06b4:	ea20 0202 	bic.w	r2, r0, r2
 80a06b8:	545a      	strb	r2, [r3, r1]
 80a06ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if ((x < 0) || (x >= width()) || (y < 0) || (y >= height()))
    return;

  // check rotation, move pixel around if necessary
  switch (getRotation()) {
 80a06bc:	2803      	cmp	r0, #3
 80a06be:	d1de      	bne.n	80a067e <_ZN16Adafruit_SSD13069drawPixelEsst+0x3e>
    x = WIDTH - x - 1;
    y = HEIGHT - y - 1;
    break;
  case 3:
    swap(x, y);
    y = HEIGHT - y - 1;
 80a06c0:	8973      	ldrh	r3, [r6, #10]
 80a06c2:	3b01      	subs	r3, #1
 80a06c4:	1b5b      	subs	r3, r3, r5
 80a06c6:	4625      	mov	r5, r4
 80a06c8:	b21c      	sxth	r4, r3
 80a06ca:	e7df      	b.n	80a068c <_ZN16Adafruit_SSD13069drawPixelEsst+0x4c>
 80a06cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a06ce:	bf00      	nop
 80a06d0:	20000023 	.word	0x20000023

080a06d4 <_ZN16Adafruit_SSD1306C1Ea>:
  cs = CS;
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
 80a06d4:	b538      	push	{r3, r4, r5, lr}
 80a06d6:	4604      	mov	r4, r0
 80a06d8:	460d      	mov	r5, r1
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a06da:	2240      	movs	r2, #64	; 0x40
 80a06dc:	2180      	movs	r1, #128	; 0x80
 80a06de:	f000 f8e7 	bl	80a08b0 <_ZN12Adafruit_GFXC1Ess>
 80a06e2:	4b06      	ldr	r3, [pc, #24]	; (80a06fc <_ZN16Adafruit_SSD1306C1Ea+0x28>)
  sclk = dc = cs = sid = -1;
  rst = reset;
 80a06e4:	f884 5020 	strb.w	r5, [r4, #32]
  hwSPI = true;
}

// initializer for I2C - we only indicate the reset pin!
Adafruit_SSD1306::Adafruit_SSD1306(int8_t reset) :
Adafruit_GFX(SSD1306_LCDWIDTH, SSD1306_LCDHEIGHT) {
 80a06e8:	6023      	str	r3, [r4, #0]
  sclk = dc = cs = sid = -1;
 80a06ea:	23ff      	movs	r3, #255	; 0xff
 80a06ec:	7763      	strb	r3, [r4, #29]
 80a06ee:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 80a06f2:	77e3      	strb	r3, [r4, #31]
 80a06f4:	77a3      	strb	r3, [r4, #30]
  rst = reset;
}
 80a06f6:	4620      	mov	r0, r4
 80a06f8:	bd38      	pop	{r3, r4, r5, pc}
 80a06fa:	bf00      	nop
 80a06fc:	080a4908 	.word	0x080a4908

080a0700 <_GLOBAL__sub_I__ZN16Adafruit_SSD13069drawPixelEsst>:
 80a0700:	f001 ba24 	b.w	80a1b4c <HAL_Pin_Map>

080a0704 <_ZN12Adafruit_GFX8drawLineEsssst>:
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0708:	461e      	mov	r6, r3
 80a070a:	b085      	sub	sp, #20
 80a070c:	f9bd 3038 	ldrsh.w	r3, [sp, #56]	; 0x38
 80a0710:	4615      	mov	r5, r2
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80a0712:	1a9a      	subs	r2, r3, r2
 80a0714:	2a00      	cmp	r2, #0
 80a0716:	bfb8      	it	lt
 80a0718:	4252      	neglt	r2, r2
 80a071a:	9200      	str	r2, [sp, #0]
 80a071c:	1a72      	subs	r2, r6, r1
 80a071e:	2a00      	cmp	r2, #0
 80a0720:	bfb8      	it	lt
 80a0722:	4252      	neglt	r2, r2
 80a0724:	9201      	str	r2, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0726:	460c      	mov	r4, r1
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0728:	9a00      	ldr	r2, [sp, #0]
 80a072a:	9901      	ldr	r1, [sp, #4]
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a072c:	4681      	mov	r9, r0
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a072e:	428a      	cmp	r2, r1
}

// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
 80a0730:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a0734:	dd05      	ble.n	80a0742 <_ZN12Adafruit_GFX8drawLineEsssst+0x3e>
 80a0736:	4632      	mov	r2, r6
    swap(x0, y0);
    swap(x1, y1);
 80a0738:	461e      	mov	r6, r3
 80a073a:	4613      	mov	r3, r2
// Bresenham's algorithm - thx wikpedia
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0,
			    int16_t x1, int16_t y1,
			    uint16_t color) {
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
  if (steep) {
 80a073c:	4622      	mov	r2, r4
    swap(x0, y0);
 80a073e:	462c      	mov	r4, r5
 80a0740:	4615      	mov	r5, r2
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a0742:	42b4      	cmp	r4, r6
 80a0744:	dd05      	ble.n	80a0752 <_ZN12Adafruit_GFX8drawLineEsssst+0x4e>
 80a0746:	462a      	mov	r2, r5
    swap(x0, x1);
    swap(y0, y1);
 80a0748:	461d      	mov	r5, r3
 80a074a:	4613      	mov	r3, r2
  if (steep) {
    swap(x0, y0);
    swap(x1, y1);
  }

  if (x0 > x1) {
 80a074c:	4622      	mov	r2, r4
 80a074e:	4634      	mov	r4, r6
 80a0750:	4616      	mov	r6, r2
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);
 80a0752:	1b5a      	subs	r2, r3, r5
 80a0754:	2a00      	cmp	r2, #0
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a0756:	ebc4 0806 	rsb	r8, r4, r6
  dy = abs(y1 - y0);
 80a075a:	bfb8      	it	lt
 80a075c:	4252      	neglt	r2, r2
    swap(x0, x1);
    swap(y0, y1);
  }

  int16_t dx, dy;
  dx = x1 - x0;
 80a075e:	fa1f f888 	uxth.w	r8, r8
  dy = abs(y1 - y0);
 80a0762:	9203      	str	r2, [sp, #12]

  int16_t err = dx / 2;
 80a0764:	fa0f f788 	sxth.w	r7, r8
 80a0768:	2202      	movs	r2, #2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a076a:	429d      	cmp	r5, r3
 80a076c:	bfb4      	ite	lt
 80a076e:	2301      	movlt	r3, #1
 80a0770:	f04f 33ff 	movge.w	r3, #4294967295

  int16_t dx, dy;
  dx = x1 - x0;
  dy = abs(y1 - y0);

  int16_t err = dx / 2;
 80a0774:	fb97 f7f2 	sdiv	r7, r7, r2
  int16_t ystep;

  if (y0 < y1) {
    ystep = 1;
  } else {
    ystep = -1;
 80a0778:	9302      	str	r3, [sp, #8]
  }

  for (; x0<=x1; x0++) {
 80a077a:	42b4      	cmp	r4, r6
 80a077c:	dc1f      	bgt.n	80a07be <_ZN12Adafruit_GFX8drawLineEsssst+0xba>
    if (steep) {
 80a077e:	9a01      	ldr	r2, [sp, #4]
 80a0780:	9b00      	ldr	r3, [sp, #0]
      drawPixel(y0, x0, color);
    } else {
      drawPixel(x0, y0, color);
 80a0782:	4648      	mov	r0, r9
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
    if (steep) {
 80a0784:	4293      	cmp	r3, r2
 80a0786:	f8d9 3000 	ldr.w	r3, [r9]
      drawPixel(y0, x0, color);
 80a078a:	bfc8      	it	gt
 80a078c:	4622      	movgt	r2, r4
 80a078e:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a0792:	bfc8      	it	gt
 80a0794:	4629      	movgt	r1, r5
 80a0796:	4653      	mov	r3, sl
    } else {
      drawPixel(x0, y0, color);
 80a0798:	bfdc      	itt	le
 80a079a:	462a      	movle	r2, r5
 80a079c:	4621      	movle	r1, r4
 80a079e:	47d8      	blx	fp
    }
    err -= dy;
 80a07a0:	9b03      	ldr	r3, [sp, #12]
 80a07a2:	1aff      	subs	r7, r7, r3
 80a07a4:	b2bb      	uxth	r3, r7
 80a07a6:	b21f      	sxth	r7, r3
    if (err < 0) {
 80a07a8:	2f00      	cmp	r7, #0
 80a07aa:	da05      	bge.n	80a07b8 <_ZN12Adafruit_GFX8drawLineEsssst+0xb4>
      y0 += ystep;
 80a07ac:	9a02      	ldr	r2, [sp, #8]
      err += dx;
 80a07ae:	eb08 0703 	add.w	r7, r8, r3
    } else {
      drawPixel(x0, y0, color);
    }
    err -= dy;
    if (err < 0) {
      y0 += ystep;
 80a07b2:	4415      	add	r5, r2
 80a07b4:	b22d      	sxth	r5, r5
      err += dx;
 80a07b6:	b23f      	sxth	r7, r7
 80a07b8:	3401      	adds	r4, #1
 80a07ba:	b224      	sxth	r4, r4
    ystep = 1;
  } else {
    ystep = -1;
  }

  for (; x0<=x1; x0++) {
 80a07bc:	e7dd      	b.n	80a077a <_ZN12Adafruit_GFX8drawLineEsssst+0x76>
    if (err < 0) {
      y0 += ystep;
      err += dx;
    }
  }
}
 80a07be:	b005      	add	sp, #20
 80a07c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a07c4 <_ZN12Adafruit_GFX8drawRectEsssst>:

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a07c4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a07c8:	4604      	mov	r4, r0
 80a07ca:	4691      	mov	r9, r2
 80a07cc:	460d      	mov	r5, r1
 80a07ce:	4698      	mov	r8, r3
 80a07d0:	f8bd 602c 	ldrh.w	r6, [sp, #44]	; 0x2c
  drawFastHLine(x, y, w, color);
 80a07d4:	6807      	ldr	r7, [r0, #0]
}

// Draw a rectangle
void Adafruit_GFX::drawRect(int16_t x, int16_t y,
			    int16_t w, int16_t h,
			    uint16_t color) {
 80a07d6:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
  drawFastHLine(x, y, w, color);
 80a07da:	9600      	str	r6, [sp, #0]
 80a07dc:	69ff      	ldr	r7, [r7, #28]
 80a07de:	47b8      	blx	r7
  drawFastHLine(x, y+h-1, w, color);
 80a07e0:	6823      	ldr	r3, [r4, #0]
 80a07e2:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a07e6:	9600      	str	r6, [sp, #0]
 80a07e8:	444a      	add	r2, r9
 80a07ea:	69df      	ldr	r7, [r3, #28]
 80a07ec:	4629      	mov	r1, r5
 80a07ee:	4643      	mov	r3, r8
 80a07f0:	4620      	mov	r0, r4
 80a07f2:	b212      	sxth	r2, r2
 80a07f4:	47b8      	blx	r7
  drawFastVLine(x, y, h, color);
 80a07f6:	6823      	ldr	r3, [r4, #0]
 80a07f8:	9600      	str	r6, [sp, #0]
 80a07fa:	699f      	ldr	r7, [r3, #24]
 80a07fc:	464a      	mov	r2, r9
 80a07fe:	4653      	mov	r3, sl
 80a0800:	4629      	mov	r1, r5
 80a0802:	4620      	mov	r0, r4
 80a0804:	47b8      	blx	r7
  drawFastVLine(x+w-1, y, h, color);
 80a0806:	6823      	ldr	r3, [r4, #0]
 80a0808:	f108 31ff 	add.w	r1, r8, #4294967295
 80a080c:	960a      	str	r6, [sp, #40]	; 0x28
 80a080e:	4429      	add	r1, r5
 80a0810:	699d      	ldr	r5, [r3, #24]
 80a0812:	464a      	mov	r2, r9
 80a0814:	4653      	mov	r3, sl
 80a0816:	4620      	mov	r0, r4
 80a0818:	46ac      	mov	ip, r5
 80a081a:	b209      	sxth	r1, r1
}
 80a081c:	b002      	add	sp, #8
 80a081e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			    int16_t w, int16_t h,
			    uint16_t color) {
  drawFastHLine(x, y, w, color);
  drawFastHLine(x, y+h-1, w, color);
  drawFastVLine(x, y, h, color);
  drawFastVLine(x+w-1, y, h, color);
 80a0822:	4760      	bx	ip

080a0824 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
}

void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
				 int16_t h, uint16_t color) {
 80a0824:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x, y+h-1, color);
 80a0826:	3b01      	subs	r3, #1
 80a0828:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a082c:	4413      	add	r3, r2
 80a082e:	6804      	ldr	r4, [r0, #0]
 80a0830:	b21b      	sxth	r3, r3
 80a0832:	9300      	str	r3, [sp, #0]
 80a0834:	9501      	str	r5, [sp, #4]
 80a0836:	6964      	ldr	r4, [r4, #20]
 80a0838:	460b      	mov	r3, r1
 80a083a:	47a0      	blx	r4
}
 80a083c:	b003      	add	sp, #12
 80a083e:	bd30      	pop	{r4, r5, pc}

080a0840 <_ZN12Adafruit_GFX13drawFastHLineEssst>:

void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
				 int16_t w, uint16_t color) {
 80a0840:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
 80a0842:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80a0846:	6804      	ldr	r4, [r0, #0]
 80a0848:	e88d 0024 	stmia.w	sp, {r2, r5}
 80a084c:	3b01      	subs	r3, #1
 80a084e:	440b      	add	r3, r1
 80a0850:	6964      	ldr	r4, [r4, #20]
 80a0852:	b21b      	sxth	r3, r3
 80a0854:	47a0      	blx	r4
}
 80a0856:	b003      	add	sp, #12
 80a0858:	bd30      	pop	{r4, r5, pc}

080a085a <_ZN12Adafruit_GFX8fillRectEsssst>:

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a085a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80a085e:	4605      	mov	r5, r0
 80a0860:	4617      	mov	r7, r2
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a0862:	460c      	mov	r4, r1
  // Update in subclasses if desired!
  drawLine(x, y, x+w-1, y, color);
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
 80a0864:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80a0868:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a086c:	eb01 0a03 	add.w	sl, r1, r3
 80a0870:	4554      	cmp	r4, sl
 80a0872:	da0b      	bge.n	80a088c <_ZN12Adafruit_GFX8fillRectEsssst+0x32>
    drawFastVLine(i, y, h, color);
 80a0874:	682b      	ldr	r3, [r5, #0]
 80a0876:	f8cd 9000 	str.w	r9, [sp]
 80a087a:	699e      	ldr	r6, [r3, #24]
 80a087c:	4621      	mov	r1, r4
 80a087e:	4643      	mov	r3, r8
 80a0880:	463a      	mov	r2, r7
 80a0882:	4628      	mov	r0, r5
 80a0884:	3401      	adds	r4, #1
 80a0886:	47b0      	blx	r6
 80a0888:	b224      	sxth	r4, r4
}

void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
			    uint16_t color) {
  // Update in subclasses if desired!
  for (int16_t i=x; i<x+w; i++) {
 80a088a:	e7f1      	b.n	80a0870 <_ZN12Adafruit_GFX8fillRectEsssst+0x16>
    drawFastVLine(i, y, h, color);
  }
}
 80a088c:	b002      	add	sp, #8
 80a088e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0892 <_ZN12Adafruit_GFX10fillScreenEt>:

void Adafruit_GFX::fillScreen(uint16_t color) {
 80a0892:	b513      	push	{r0, r1, r4, lr}
  fillRect(0, 0, _width, _height, color);
 80a0894:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 80a0898:	6804      	ldr	r4, [r0, #0]
 80a089a:	9101      	str	r1, [sp, #4]
 80a089c:	9200      	str	r2, [sp, #0]
 80a089e:	2200      	movs	r2, #0
 80a08a0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80a08a4:	6a64      	ldr	r4, [r4, #36]	; 0x24
 80a08a6:	4611      	mov	r1, r2
 80a08a8:	47a0      	blx	r4
}
 80a08aa:	b002      	add	sp, #8
 80a08ac:	bd10      	pop	{r4, pc}

080a08ae <_ZN12Adafruit_GFX13invertDisplayEb>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}

void Adafruit_GFX::invertDisplay(boolean i) {
 80a08ae:	4770      	bx	lr

080a08b0 <_ZN12Adafruit_GFXC1Ess>:
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a08b0:	8101      	strh	r1, [r0, #8]
{
  _width    = WIDTH;
 80a08b2:	8181      	strh	r1, [r0, #12]
  _height   = HEIGHT;
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
  textcolor = textbgcolor = 0xFFFF;
 80a08b4:	f64f 71ff 	movw	r1, #65535	; 0xffff
	0x00, 0x19, 0x1D, 0x17, 0x12,
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 80a08b8:	b530      	push	{r4, r5, lr}
  WIDTH(w), HEIGHT(h)
 80a08ba:	4d07      	ldr	r5, [pc, #28]	; (80a08d8 <_ZN12Adafruit_GFXC1Ess+0x28>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a08bc:	2400      	movs	r4, #0
 80a08be:	8142      	strh	r2, [r0, #10]
{
  _width    = WIDTH;
  _height   = HEIGHT;
 80a08c0:	81c2      	strh	r2, [r0, #14]
  rotation  = 0;
  cursor_y  = cursor_x    = 0;
  textsize  = 1;
 80a08c2:	2201      	movs	r2, #1
 80a08c4:	6044      	str	r4, [r0, #4]
	0x00, 0x3C, 0x3C, 0x3C, 0x3C,
	0x00, 0x00, 0x00, 0x00, 0x00
};

Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
  WIDTH(w), HEIGHT(h)
 80a08c6:	6005      	str	r5, [r0, #0]
{
  _width    = WIDTH;
  _height   = HEIGHT;
  rotation  = 0;
 80a08c8:	7644      	strb	r4, [r0, #25]
  cursor_y  = cursor_x    = 0;
 80a08ca:	8204      	strh	r4, [r0, #16]
 80a08cc:	8244      	strh	r4, [r0, #18]
  textsize  = 1;
 80a08ce:	7602      	strb	r2, [r0, #24]
  textcolor = textbgcolor = 0xFFFF;
 80a08d0:	82c1      	strh	r1, [r0, #22]
 80a08d2:	8281      	strh	r1, [r0, #20]
  wrap      = true;
 80a08d4:	7682      	strb	r2, [r0, #26]
}
 80a08d6:	bd30      	pop	{r4, r5, pc}
 80a08d8:	080a4940 	.word	0x080a4940

080a08dc <_ZN12Adafruit_GFX8drawCharEsshtth>:
  return 1;
}

// Draw a character
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
			    uint16_t color, uint16_t bg, uint8_t size) {
 80a08dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a08e0:	b08f      	sub	sp, #60	; 0x3c
 80a08e2:	9106      	str	r1, [sp, #24]
 80a08e4:	f8bd 1060 	ldrh.w	r1, [sp, #96]	; 0x60
 80a08e8:	4604      	mov	r4, r0
 80a08ea:	9107      	str	r1, [sp, #28]
 80a08ec:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80a08f0:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 80a08f4:	9108      	str	r1, [sp, #32]

  if((x >= _width)            || // Clip right
 80a08f6:	f9b0 100c 	ldrsh.w	r1, [r0, #12]
 80a08fa:	9806      	ldr	r0, [sp, #24]
 80a08fc:	4281      	cmp	r1, r0
 80a08fe:	dd7d      	ble.n	80a09fc <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
 80a0900:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80a0904:	4291      	cmp	r1, r2
 80a0906:	dd79      	ble.n	80a09fc <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     (y >= _height)           || // Clip bottom
 80a0908:	2106      	movs	r1, #6
 80a090a:	fb01 0008 	mla	r0, r1, r8, r0
 80a090e:	2800      	cmp	r0, #0
 80a0910:	dd74      	ble.n	80a09fc <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
     ((x + 6 * size - 1) < 0) || // Clip left
 80a0912:	eb02 00c8 	add.w	r0, r2, r8, lsl #3
 80a0916:	2800      	cmp	r0, #0
 80a0918:	dd70      	ble.n	80a09fc <_ZN12Adafruit_GFX8drawCharEsshtth+0x120>
  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a091a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80a091e:	b295      	uxth	r5, r2
 80a0920:	930c      	str	r3, [sp, #48]	; 0x30
 80a0922:	f105 0308 	add.w	r3, r5, #8
 80a0926:	b29b      	uxth	r3, r3
 80a0928:	9109      	str	r1, [sp, #36]	; 0x24
 80a092a:	2600      	movs	r6, #0
 80a092c:	930d      	str	r3, [sp, #52]	; 0x34
 80a092e:	462f      	mov	r7, r5
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0930:	46a9      	mov	r9, r5
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
 80a0932:	2e05      	cmp	r6, #5
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
 80a0934:	bf1f      	itttt	ne
 80a0936:	4b33      	ldrne	r3, [pc, #204]	; (80a0a04 <_ZN12Adafruit_GFX8drawCharEsshtth+0x128>)
 80a0938:	9a0c      	ldrne	r2, [sp, #48]	; 0x30
 80a093a:	199b      	addne	r3, r3, r6
 80a093c:	f813 a002 	ldrbne.w	sl, [r3, r2]
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0940:	fa1f f388 	uxth.w	r3, r8
 80a0944:	9304      	str	r3, [sp, #16]
 80a0946:	9904      	ldr	r1, [sp, #16]
 80a0948:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 80a094c:	b2b2      	uxth	r2, r6
 80a094e:	fb01 3102 	mla	r1, r1, r2, r3
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0952:	4413      	add	r3, r2
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0954:	b209      	sxth	r1, r1
 80a0956:	910a      	str	r1, [sp, #40]	; 0x28
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0958:	b21b      	sxth	r3, r3
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a095a:	fa0f f188 	sxth.w	r1, r8
    return;

  for (int8_t i=0; i<6; i++ ) {
    uint8_t line;
    if (i == 5) 
      line = 0x0;
 80a095e:	bf08      	it	eq
 80a0960:	f04f 0a00 	moveq.w	sl, #0
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, color);
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0964:	9505      	str	r5, [sp, #20]
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a0966:	9103      	str	r1, [sp, #12]
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
        } 
      } else if (bg != color) {
        if (size == 1) // default size
          drawPixel(x+i, y+j, bg);
 80a0968:	930b      	str	r3, [sp, #44]	; 0x2c
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
      if (line & 0x1) {
 80a096a:	f01a 0f01 	tst.w	sl, #1
 80a096e:	d011      	beq.n	80a0994 <_ZN12Adafruit_GFX8drawCharEsshtth+0xb8>
        if (size == 1) // default size
 80a0970:	f1b8 0f01 	cmp.w	r8, #1
 80a0974:	6823      	ldr	r3, [r4, #0]
 80a0976:	d103      	bne.n	80a0980 <_ZN12Adafruit_GFX8drawCharEsshtth+0xa4>
          drawPixel(x+i, y+j, color);
 80a0978:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a097c:	9b07      	ldr	r3, [sp, #28]
 80a097e:	e014      	b.n	80a09aa <_ZN12Adafruit_GFX8drawCharEsshtth+0xce>
        else {  // big size
          fillRect(x+(i*size), y+(j*size), size, size, color);
 80a0980:	9a07      	ldr	r2, [sp, #28]
 80a0982:	9201      	str	r2, [sp, #4]
 80a0984:	9a03      	ldr	r2, [sp, #12]
 80a0986:	9200      	str	r2, [sp, #0]
 80a0988:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a098c:	4613      	mov	r3, r2
 80a098e:	fa0f f289 	sxth.w	r2, r9
 80a0992:	e018      	b.n	80a09c6 <_ZN12Adafruit_GFX8drawCharEsshtth+0xea>
        } 
      } else if (bg != color) {
 80a0994:	9b07      	ldr	r3, [sp, #28]
 80a0996:	9a08      	ldr	r2, [sp, #32]
 80a0998:	4293      	cmp	r3, r2
 80a099a:	d017      	beq.n	80a09cc <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        if (size == 1) // default size
 80a099c:	f1b8 0f01 	cmp.w	r8, #1
 80a09a0:	6823      	ldr	r3, [r4, #0]
 80a09a2:	d107      	bne.n	80a09b4 <_ZN12Adafruit_GFX8drawCharEsshtth+0xd8>
          drawPixel(x+i, y+j, bg);
 80a09a4:	f8d3 b010 	ldr.w	fp, [r3, #16]
 80a09a8:	4613      	mov	r3, r2
 80a09aa:	b23a      	sxth	r2, r7
 80a09ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80a09ae:	4620      	mov	r0, r4
 80a09b0:	47d8      	blx	fp
 80a09b2:	e00b      	b.n	80a09cc <_ZN12Adafruit_GFX8drawCharEsshtth+0xf0>
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
 80a09b4:	9a08      	ldr	r2, [sp, #32]
 80a09b6:	9201      	str	r2, [sp, #4]
 80a09b8:	9a03      	ldr	r2, [sp, #12]
 80a09ba:	9200      	str	r2, [sp, #0]
 80a09bc:	f8d3 b024 	ldr.w	fp, [r3, #36]	; 0x24
 80a09c0:	4613      	mov	r3, r2
 80a09c2:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80a09c6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80a09c8:	4620      	mov	r0, r4
 80a09ca:	47d8      	blx	fp
 80a09cc:	9b04      	ldr	r3, [sp, #16]
 80a09ce:	9a04      	ldr	r2, [sp, #16]
 80a09d0:	4499      	add	r9, r3
 80a09d2:	9b05      	ldr	r3, [sp, #20]
 80a09d4:	3701      	adds	r7, #1
 80a09d6:	4413      	add	r3, r2
 80a09d8:	b29b      	uxth	r3, r3
 80a09da:	9305      	str	r3, [sp, #20]
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a09dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80a09de:	b2bf      	uxth	r7, r7
 80a09e0:	429f      	cmp	r7, r3
          drawPixel(x+i, y+j, bg);
        else {  // big size
          fillRect(x+i*size, y+j*size, size, size, bg);
        }
      }
      line >>= 1;
 80a09e2:	ea4f 0a5a 	mov.w	sl, sl, lsr #1
 80a09e6:	fa1f f989 	uxth.w	r9, r9
    uint8_t line;
    if (i == 5) 
      line = 0x0;
    else 
      line = pgm_read_byte(font+(c*5)+i);
    for (int8_t j = 0; j<8; j++) {
 80a09ea:	d1be      	bne.n	80a096a <_ZN12Adafruit_GFX8drawCharEsshtth+0x8e>
 80a09ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
     (y >= _height)           || // Clip bottom
     ((x + 6 * size - 1) < 0) || // Clip left
     ((y + 8 * size - 1) < 0))   // Clip top
    return;

  for (int8_t i=0; i<6; i++ ) {
 80a09ee:	3601      	adds	r6, #1
 80a09f0:	3b01      	subs	r3, #1
 80a09f2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80a09f6:	b276      	sxtb	r6, r6
 80a09f8:	9309      	str	r3, [sp, #36]	; 0x24
 80a09fa:	d198      	bne.n	80a092e <_ZN12Adafruit_GFX8drawCharEsshtth+0x52>
        }
      }
      line >>= 1;
    }
  }
}
 80a09fc:	b00f      	add	sp, #60	; 0x3c
 80a09fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0a02:	bf00      	nop
 80a0a04:	080a4970 	.word	0x080a4970

080a0a08 <_ZN12Adafruit_GFX5writeEh>:
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0a08:	b530      	push	{r4, r5, lr}

  if (c == '\n') {
 80a0a0a:	290a      	cmp	r1, #10
      }
    }
  }
}

size_t Adafruit_GFX::write(uint8_t c) {
 80a0a0c:	b085      	sub	sp, #20
 80a0a0e:	4604      	mov	r4, r0
 80a0a10:	460b      	mov	r3, r1

  if (c == '\n') {
 80a0a12:	d104      	bne.n	80a0a1e <_ZN12Adafruit_GFX5writeEh+0x16>
    cursor_y += textsize*8;
 80a0a14:	7e02      	ldrb	r2, [r0, #24]
 80a0a16:	8a43      	ldrh	r3, [r0, #18]
 80a0a18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80a0a1c:	e023      	b.n	80a0a66 <_ZN12Adafruit_GFX5writeEh+0x5e>
    cursor_x  = 0;
  } else if (c == '\r') {
 80a0a1e:	290d      	cmp	r1, #13
 80a0a20:	d024      	beq.n	80a0a6c <_ZN12Adafruit_GFX5writeEh+0x64>
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
 80a0a22:	7e05      	ldrb	r5, [r0, #24]
 80a0a24:	f9b0 2012 	ldrsh.w	r2, [r0, #18]
 80a0a28:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80a0a2c:	9502      	str	r5, [sp, #8]
 80a0a2e:	8ac5      	ldrh	r5, [r0, #22]
 80a0a30:	9501      	str	r5, [sp, #4]
 80a0a32:	8a85      	ldrh	r5, [r0, #20]
 80a0a34:	9500      	str	r5, [sp, #0]
 80a0a36:	f7ff ff51 	bl	80a08dc <_ZN12Adafruit_GFX8drawCharEsshtth>
    cursor_x += textsize*6;
 80a0a3a:	7e22      	ldrb	r2, [r4, #24]
 80a0a3c:	8a23      	ldrh	r3, [r4, #16]
 80a0a3e:	b291      	uxth	r1, r2
 80a0a40:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80a0a44:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a0a48:	7ea0      	ldrb	r0, [r4, #26]
    cursor_x  = 0;
  } else if (c == '\r') {
    // skip em
  } else {
    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize);
    cursor_x += textsize*6;
 80a0a4a:	b21b      	sxth	r3, r3
 80a0a4c:	8223      	strh	r3, [r4, #16]
    if (wrap && (cursor_x > (_width - textsize*6))) {
 80a0a4e:	b168      	cbz	r0, 80a0a6c <_ZN12Adafruit_GFX5writeEh+0x64>
 80a0a50:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 80a0a54:	f06f 0505 	mvn.w	r5, #5
 80a0a58:	fb05 0202 	mla	r2, r5, r2, r0
 80a0a5c:	4293      	cmp	r3, r2
 80a0a5e:	dd05      	ble.n	80a0a6c <_ZN12Adafruit_GFX5writeEh+0x64>
      cursor_y += textsize*8;
 80a0a60:	8a63      	ldrh	r3, [r4, #18]
 80a0a62:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80a0a66:	8263      	strh	r3, [r4, #18]
      cursor_x = 0;
 80a0a68:	2300      	movs	r3, #0
 80a0a6a:	8223      	strh	r3, [r4, #16]
    }
  }
  return 1;
}
 80a0a6c:	2001      	movs	r0, #1
 80a0a6e:	b005      	add	sp, #20
 80a0a70:	bd30      	pop	{r4, r5, pc}

080a0a72 <_ZN12Adafruit_GFX11getRotationEv>:
  wrap = w;
}

uint8_t Adafruit_GFX::getRotation(void) {
  return rotation;
}
 80a0a72:	7e40      	ldrb	r0, [r0, #25]
 80a0a74:	4770      	bx	lr

080a0a76 <_ZN12Adafruit_GFX5widthEv>:
}

// Return the size of the display (per current rotation)
int16_t Adafruit_GFX::width(void) {
  return _width;
}
 80a0a76:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80a0a7a:	4770      	bx	lr

080a0a7c <_ZN12Adafruit_GFX6heightEv>:
 
int16_t Adafruit_GFX::height(void) {
  return _height;
}
 80a0a7c:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 80a0a80:	4770      	bx	lr

080a0a82 <_GLOBAL__sub_I__ZN12Adafruit_GFXC2Ess>:
 80a0a82:	f001 b863 	b.w	80a1b4c <HAL_Pin_Map>
	...

080a0a88 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a0a88:	b538      	push	{r3, r4, r5, lr}
 80a0a8a:	4b0b      	ldr	r3, [pc, #44]	; (80a0ab8 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a0a8c:	6984      	ldr	r4, [r0, #24]
 80a0a8e:	4605      	mov	r5, r0
 80a0a90:	6003      	str	r3, [r0, #0]
 80a0a92:	b17c      	cbz	r4, 80a0ab4 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0a94:	6863      	ldr	r3, [r4, #4]
 80a0a96:	3b01      	subs	r3, #1
 80a0a98:	6063      	str	r3, [r4, #4]
 80a0a9a:	b95b      	cbnz	r3, 80a0ab4 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a0a9c:	6823      	ldr	r3, [r4, #0]
 80a0a9e:	4620      	mov	r0, r4
 80a0aa0:	689b      	ldr	r3, [r3, #8]
 80a0aa2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0aa4:	68a3      	ldr	r3, [r4, #8]
 80a0aa6:	3b01      	subs	r3, #1
 80a0aa8:	60a3      	str	r3, [r4, #8]
 80a0aaa:	b91b      	cbnz	r3, 80a0ab4 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a0aac:	6823      	ldr	r3, [r4, #0]
 80a0aae:	4620      	mov	r0, r4
 80a0ab0:	68db      	ldr	r3, [r3, #12]
 80a0ab2:	4798      	blx	r3
 80a0ab4:	4628      	mov	r0, r5
 80a0ab6:	bd38      	pop	{r3, r4, r5, pc}
 80a0ab8:	080a4f0c 	.word	0x080a4f0c

080a0abc <_ZN9TCPClientD0Ev>:
 80a0abc:	b510      	push	{r4, lr}
 80a0abe:	4604      	mov	r4, r0
 80a0ac0:	f7ff ffe2 	bl	80a0a88 <_ZN9TCPClientD1Ev>
 80a0ac4:	4620      	mov	r0, r4
 80a0ac6:	211c      	movs	r1, #28
 80a0ac8:	f002 fc57 	bl	80a337a <_ZdlPvj>
 80a0acc:	4620      	mov	r0, r4
 80a0ace:	bd10      	pop	{r4, pc}

080a0ad0 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0ad0:	b538      	push	{r3, r4, r5, lr}
 80a0ad2:	461d      	mov	r5, r3
    this->callback = callback;
 80a0ad4:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a0ad6:	4604      	mov	r4, r0
    this->callback = callback;
 80a0ad8:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a0ada:	2300      	movs	r3, #0
 80a0adc:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a0ade:	b102      	cbz	r2, 80a0ae2 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a0ae0:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a0ae2:	b119      	cbz	r1, 80a0aec <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a0ae4:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0ae8:	f001 fe24 	bl	80a2734 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a0aec:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a0aee:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a0af0:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0af2:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a0af4:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a0af8:	2bff      	cmp	r3, #255	; 0xff
 80a0afa:	bfb8      	it	lt
 80a0afc:	23ff      	movlt	r3, #255	; 0xff
 80a0afe:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a0b02:	b108      	cbz	r0, 80a0b08 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a0b04:	f7ff facf 	bl	80a00a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a0b08:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a0b0c:	f7ff fac7 	bl	80a009e <_Znaj>
 80a0b10:	61e0      	str	r0, [r4, #28]
 80a0b12:	bd38      	pop	{r3, r4, r5, pc}

080a0b14 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0b14:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a0b18:	4604      	mov	r4, r0
 80a0b1a:	4617      	mov	r7, r2
 80a0b1c:	4698      	mov	r8, r3
 80a0b1e:	460e      	mov	r6, r1
 80a0b20:	2500      	movs	r5, #0
 80a0b22:	f001 fd55 	bl	80a25d0 <_ZN9TCPClientC1Ev>
 80a0b26:	61e5      	str	r5, [r4, #28]
 80a0b28:	490a      	ldr	r1, [pc, #40]	; (80a0b54 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
 80a0b2a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a0b2e:	f001 fdee 	bl	80a270e <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a0b32:	23ff      	movs	r3, #255	; 0xff
 80a0b34:	9302      	str	r3, [sp, #8]
 80a0b36:	230f      	movs	r3, #15
 80a0b38:	9300      	str	r3, [sp, #0]
 80a0b3a:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a0b3c:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a0b3e:	f8cd 8004 	str.w	r8, [sp, #4]
 80a0b42:	463b      	mov	r3, r7
 80a0b44:	462a      	mov	r2, r5
 80a0b46:	4631      	mov	r1, r6
 80a0b48:	f7ff ffc2 	bl	80a0ad0 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a0b4c:	4620      	mov	r0, r4
 80a0b4e:	b004      	add	sp, #16
 80a0b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0b54:	080a5023 	.word	0x080a5023

080a0b58 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a0b58:	b510      	push	{r4, lr}
 80a0b5a:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a0b5c:	4620      	mov	r0, r4
 80a0b5e:	f001 fbcb 	bl	80a22f8 <_ZN9TCPClient9availableEv>
 80a0b62:	2800      	cmp	r0, #0
 80a0b64:	d0fa      	beq.n	80a0b5c <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a0b66:	4620      	mov	r0, r4
 80a0b68:	f001 fb7b 	bl	80a2262 <_ZN9TCPClient4readEv>
}
 80a0b6c:	b2c0      	uxtb	r0, r0
 80a0b6e:	bd10      	pop	{r4, pc}

080a0b70 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0b74:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0b76:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a0b78:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0b7a:	f7ff ffed 	bl	80a0b58 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a0b7e:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a0b82:	4646      	mov	r6, r8
 80a0b84:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a0b86:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a0b88:	2700      	movs	r7, #0
 80a0b8a:	f893 9000 	ldrb.w	r9, [r3]
 80a0b8e:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a0b92:	4628      	mov	r0, r5
 80a0b94:	f7ff ffe0 	bl	80a0b58 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a0b98:	69eb      	ldr	r3, [r5, #28]
 80a0b9a:	1c74      	adds	r4, r6, #1
 80a0b9c:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a0b9e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a0ba2:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a0ba6:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0ba8:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a0baa:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a0bac:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a0bb0:	d501      	bpl.n	80a0bb6 <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a0bb2:	4626      	mov	r6, r4
 80a0bb4:	e7ed      	b.n	80a0b92 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0bb6:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a0bb8:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a0bbc:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a0bc0:	d113      	bne.n	80a0bea <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a0bc2:	4628      	mov	r0, r5
 80a0bc4:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a0bc8:	f7ff ffc6 	bl	80a0b58 <_ZN4MQTT8readByteEv>
 80a0bcc:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a0bd0:	4628      	mov	r0, r5
 80a0bd2:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a0bd6:	f7ff ffbf 	bl	80a0b58 <_ZN4MQTT8readByteEv>
 80a0bda:	1cf4      	adds	r4, r6, #3
 80a0bdc:	3602      	adds	r6, #2
 80a0bde:	b2b6      	uxth	r6, r6
 80a0be0:	b2a4      	uxth	r4, r4
 80a0be2:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a0be6:	2302      	movs	r3, #2
 80a0be8:	e000      	b.n	80a0bec <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a0bea:	2300      	movs	r3, #0
 80a0bec:	1b1b      	subs	r3, r3, r4
 80a0bee:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0bf0:	19a3      	adds	r3, r4, r6
 80a0bf2:	b29b      	uxth	r3, r3
 80a0bf4:	429f      	cmp	r7, r3
 80a0bf6:	d90b      	bls.n	80a0c10 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a0bf8:	4628      	mov	r0, r5
 80a0bfa:	f7ff ffad 	bl	80a0b58 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a0bfe:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a0c02:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a0c04:	bf84      	itt	hi
 80a0c06:	69eb      	ldrhi	r3, [r5, #28]
 80a0c08:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a0c0a:	3401      	adds	r4, #1
 80a0c0c:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a0c0e:	e7ef      	b.n	80a0bf0 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a0c10:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a0c14:	42a0      	cmp	r0, r4
 80a0c16:	bf2c      	ite	cs
 80a0c18:	4620      	movcs	r0, r4
 80a0c1a:	2000      	movcc	r0, #0
 80a0c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a0c20 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a0c20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a0c22:	4607      	mov	r7, r0
 80a0c24:	468e      	mov	lr, r1
 80a0c26:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a0c28:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a0c2a:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a0c2c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0c30:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a0c32:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0c34:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a0c36:	bf18      	it	ne
 80a0c38:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a0c3c:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a0c3e:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a0c42:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a0c44:	2d00      	cmp	r5, #0
 80a0c46:	d1f1      	bne.n	80a0c2c <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a0c48:	f1c4 0304 	rsb	r3, r4, #4
 80a0c4c:	18d1      	adds	r1, r2, r3
 80a0c4e:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a0c52:	42a5      	cmp	r5, r4
 80a0c54:	da06      	bge.n	80a0c64 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a0c56:	a801      	add	r0, sp, #4
 80a0c58:	1b2b      	subs	r3, r5, r4
 80a0c5a:	5c28      	ldrb	r0, [r5, r0]
 80a0c5c:	4413      	add	r3, r2
 80a0c5e:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a0c60:	3501      	adds	r5, #1
 80a0c62:	e7f6      	b.n	80a0c52 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a0c64:	1c72      	adds	r2, r6, #1
 80a0c66:	4422      	add	r2, r4
 80a0c68:	4638      	mov	r0, r7
 80a0c6a:	f001 faa2 	bl	80a21b2 <_ZN9TCPClient5writeEPKhj>
 80a0c6e:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0c70:	f000 ffd4 	bl	80a1c1c <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a0c74:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a0c76:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a0c78:	4434      	add	r4, r6
 80a0c7a:	b2a8      	uxth	r0, r5
}
 80a0c7c:	1a23      	subs	r3, r4, r0
 80a0c7e:	4258      	negs	r0, r3
 80a0c80:	4158      	adcs	r0, r3
 80a0c82:	b003      	add	sp, #12
 80a0c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0c86 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a0c86:	b510      	push	{r4, lr}
 80a0c88:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a0c8a:	69c3      	ldr	r3, [r0, #28]
 80a0c8c:	22e0      	movs	r2, #224	; 0xe0
 80a0c8e:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a0c90:	69c3      	ldr	r3, [r0, #28]
 80a0c92:	2200      	movs	r2, #0
 80a0c94:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a0c96:	69c1      	ldr	r1, [r0, #28]
 80a0c98:	2202      	movs	r2, #2
 80a0c9a:	f001 fa8a 	bl	80a21b2 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a0c9e:	4620      	mov	r0, r4
 80a0ca0:	f001 fb66 	bl	80a2370 <_ZN9TCPClient4stopEv>
 80a0ca4:	f000 ffba 	bl	80a1c1c <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a0ca8:	6260      	str	r0, [r4, #36]	; 0x24
 80a0caa:	62a0      	str	r0, [r4, #40]	; 0x28
 80a0cac:	bd10      	pop	{r4, pc}

080a0cae <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a0cae:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a0cb0:	460d      	mov	r5, r1
 80a0cb2:	3302      	adds	r3, #2
 80a0cb4:	b29b      	uxth	r3, r3
 80a0cb6:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a0cb8:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a0cbc:	b2a4      	uxth	r4, r4
 80a0cbe:	b13e      	cbz	r6, 80a0cd0 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a0cc0:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a0cc4:	429f      	cmp	r7, r3
 80a0cc6:	d903      	bls.n	80a0cd0 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a0cc8:	1c5c      	adds	r4, r3, #1
 80a0cca:	54d6      	strb	r6, [r2, r3]
 80a0ccc:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a0cce:	e7f2      	b.n	80a0cb6 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a0cd0:	1b19      	subs	r1, r3, r4
 80a0cd2:	440a      	add	r2, r1
 80a0cd4:	1221      	asrs	r1, r4, #8
 80a0cd6:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a0cda:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a0cde:	4618      	mov	r0, r3
 80a0ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0ce2 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a0ce2:	b538      	push	{r3, r4, r5, lr}
 80a0ce4:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a0ce6:	f001 fc04 	bl	80a24f2 <_ZN9TCPClient9connectedEv>
 80a0cea:	2800      	cmp	r0, #0
 80a0cec:	bf14      	ite	ne
 80a0cee:	2401      	movne	r4, #1
 80a0cf0:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a0cf2:	d102      	bne.n	80a0cfa <_ZN4MQTT11isConnectedEv+0x18>
 80a0cf4:	4628      	mov	r0, r5
 80a0cf6:	f001 fb3b 	bl	80a2370 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a0cfa:	4620      	mov	r0, r4
 80a0cfc:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0d00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a0d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a0d04:	b087      	sub	sp, #28
 80a0d06:	4604      	mov	r4, r0
 80a0d08:	4689      	mov	r9, r1
 80a0d0a:	4617      	mov	r7, r2
 80a0d0c:	461e      	mov	r6, r3
 80a0d0e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a0d12:	f7ff ffe6 	bl	80a0ce2 <_ZN4MQTT11isConnectedEv>
 80a0d16:	4605      	mov	r5, r0
 80a0d18:	2800      	cmp	r0, #0
 80a0d1a:	f040 80bd 	bne.w	80a0e98 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a0d1e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a0d20:	b939      	cbnz	r1, 80a0d32 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a0d22:	4603      	mov	r3, r0
 80a0d24:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0d28:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a0d2a:	4620      	mov	r0, r4
 80a0d2c:	f001 fc72 	bl	80a2614 <_ZN9TCPClient7connectEPKctm>
 80a0d30:	e009      	b.n	80a0d46 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a0d32:	4668      	mov	r0, sp
 80a0d34:	f001 ffd0 	bl	80a2cd8 <_ZN9IPAddressC1EPKh>
 80a0d38:	462b      	mov	r3, r5
 80a0d3a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a0d3e:	4669      	mov	r1, sp
 80a0d40:	4620      	mov	r0, r4
 80a0d42:	f001 fb2f 	bl	80a23a4 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a0d46:	2800      	cmp	r0, #0
 80a0d48:	f000 80a2 	beq.w	80a0e90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a0d4c:	2301      	movs	r3, #1
 80a0d4e:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a0d50:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a0d54:	2b04      	cmp	r3, #4
 80a0d56:	d115      	bne.n	80a0d84 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0d58:	4b52      	ldr	r3, [pc, #328]	; (80a0ea4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a0d5a:	6818      	ldr	r0, [r3, #0]
 80a0d5c:	889a      	ldrh	r2, [r3, #4]
 80a0d5e:	9000      	str	r0, [sp, #0]
 80a0d60:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a0d64:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0d66:	69e2      	ldr	r2, [r4, #28]
 80a0d68:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a0d6a:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a0d6e:	f8c2 0005 	str.w	r0, [r2, #5]
 80a0d72:	1d53      	adds	r3, r2, #5
 80a0d74:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a0d78:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a0d7c:	8099      	strh	r1, [r3, #4]
 80a0d7e:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a0d80:	230c      	movs	r3, #12
 80a0d82:	e012      	b.n	80a0daa <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0d84:	466a      	mov	r2, sp
 80a0d86:	4b48      	ldr	r3, [pc, #288]	; (80a0ea8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0d88:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a0d8c:	6818      	ldr	r0, [r3, #0]
 80a0d8e:	6859      	ldr	r1, [r3, #4]
 80a0d90:	7a1b      	ldrb	r3, [r3, #8]
 80a0d92:	c203      	stmia	r2!, {r0, r1}
 80a0d94:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a0d96:	466b      	mov	r3, sp
 80a0d98:	cb03      	ldmia	r3!, {r0, r1}
 80a0d9a:	f8cc 0005 	str.w	r0, [ip, #5]
 80a0d9e:	f8cc 1009 	str.w	r1, [ip, #9]
 80a0da2:	7813      	ldrb	r3, [r2, #0]
 80a0da4:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a0da8:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a0daa:	f1b8 0f00 	cmp.w	r8, #0
 80a0dae:	d00a      	beq.n	80a0dc6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a0db0:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a0db4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a0db8:	0152      	lsls	r2, r2, #5
 80a0dba:	f042 0206 	orr.w	r2, r2, #6
 80a0dbe:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a0dc2:	b2d2      	uxtb	r2, r2
 80a0dc4:	e000      	b.n	80a0dc8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a0dc6:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a0dc8:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a0dcc:	b909      	cbnz	r1, 80a0dd2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a0dce:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a0dd2:	b12f      	cbz	r7, 80a0de0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a0dd4:	b916      	cbnz	r6, 80a0ddc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a0dd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a0dda:	e001      	b.n	80a0de0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a0ddc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a0de0:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a0de2:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a0de4:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a0de6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a0de8:	69e1      	ldr	r1, [r4, #28]
 80a0dea:	1212      	asrs	r2, r2, #8
 80a0dec:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a0dee:	69e1      	ldr	r1, [r4, #28]
 80a0df0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a0df2:	1c9a      	adds	r2, r3, #2
 80a0df4:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a0df6:	3303      	adds	r3, #3
 80a0df8:	69e2      	ldr	r2, [r4, #28]
 80a0dfa:	4649      	mov	r1, r9
 80a0dfc:	4620      	mov	r0, r4
 80a0dfe:	f7ff ff56 	bl	80a0cae <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a0e02:	f1b8 0f00 	cmp.w	r8, #0
 80a0e06:	d00b      	beq.n	80a0e20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a0e08:	4603      	mov	r3, r0
 80a0e0a:	69e2      	ldr	r2, [r4, #28]
 80a0e0c:	4641      	mov	r1, r8
 80a0e0e:	4620      	mov	r0, r4
 80a0e10:	f7ff ff4d 	bl	80a0cae <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a0e14:	69e2      	ldr	r2, [r4, #28]
 80a0e16:	4603      	mov	r3, r0
 80a0e18:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a0e1a:	4620      	mov	r0, r4
 80a0e1c:	f7ff ff47 	bl	80a0cae <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a0e20:	b167      	cbz	r7, 80a0e3c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a0e22:	4603      	mov	r3, r0
 80a0e24:	69e2      	ldr	r2, [r4, #28]
 80a0e26:	4639      	mov	r1, r7
 80a0e28:	4620      	mov	r0, r4
 80a0e2a:	f7ff ff40 	bl	80a0cae <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a0e2e:	b12e      	cbz	r6, 80a0e3c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a0e30:	4603      	mov	r3, r0
 80a0e32:	69e2      	ldr	r2, [r4, #28]
 80a0e34:	4631      	mov	r1, r6
 80a0e36:	4620      	mov	r0, r4
 80a0e38:	f7ff ff39 	bl	80a0cae <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a0e3c:	1f43      	subs	r3, r0, #5
 80a0e3e:	b29b      	uxth	r3, r3
 80a0e40:	69e2      	ldr	r2, [r4, #28]
 80a0e42:	2110      	movs	r1, #16
 80a0e44:	4620      	mov	r0, r4
 80a0e46:	f7ff feeb 	bl	80a0c20 <_ZN4MQTT5writeEhPht>
 80a0e4a:	f000 fee7 	bl	80a1c1c <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0e4e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a0e52:	6260      	str	r0, [r4, #36]	; 0x24
 80a0e54:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a0e56:	4620      	mov	r0, r4
 80a0e58:	f001 fa4e 	bl	80a22f8 <_ZN9TCPClient9availableEv>
 80a0e5c:	b940      	cbnz	r0, 80a0e70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a0e5e:	f000 fedd 	bl	80a1c1c <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a0e62:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0e64:	1ac0      	subs	r0, r0, r3
 80a0e66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a0e68:	4373      	muls	r3, r6
 80a0e6a:	4298      	cmp	r0, r3
 80a0e6c:	d9f3      	bls.n	80a0e56 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a0e6e:	e00f      	b.n	80a0e90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a0e70:	4669      	mov	r1, sp
 80a0e72:	4620      	mov	r0, r4
 80a0e74:	f7ff fe7c 	bl	80a0b70 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a0e78:	2804      	cmp	r0, #4
 80a0e7a:	d109      	bne.n	80a0e90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a0e7c:	69e3      	ldr	r3, [r4, #28]
 80a0e7e:	78de      	ldrb	r6, [r3, #3]
 80a0e80:	b936      	cbnz	r6, 80a0e90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a0e82:	f000 fecb 	bl	80a1c1c <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a0e86:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a0e88:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a0e8a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a0e8e:	e004      	b.n	80a0e9a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a0e90:	4620      	mov	r0, r4
 80a0e92:	f001 fa6d 	bl	80a2370 <_ZN9TCPClient4stopEv>
 80a0e96:	e000      	b.n	80a0e9a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a0e98:	2500      	movs	r5, #0
}
 80a0e9a:	4628      	mov	r0, r5
 80a0e9c:	b007      	add	sp, #28
 80a0e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0ea2:	bf00      	nop
 80a0ea4:	080a4e6b 	.word	0x080a4e6b
 80a0ea8:	080a4e72 	.word	0x080a4e72

080a0eac <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a0eac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a0eae:	2304      	movs	r3, #4
 80a0eb0:	9305      	str	r3, [sp, #20]
 80a0eb2:	2301      	movs	r3, #1
 80a0eb4:	9304      	str	r3, [sp, #16]
 80a0eb6:	2300      	movs	r3, #0
 80a0eb8:	9303      	str	r3, [sp, #12]
 80a0eba:	9302      	str	r3, [sp, #8]
 80a0ebc:	9301      	str	r3, [sp, #4]
 80a0ebe:	9300      	str	r3, [sp, #0]
 80a0ec0:	461a      	mov	r2, r3
 80a0ec2:	f7ff ff1d 	bl	80a0d00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a0ec6:	b007      	add	sp, #28
 80a0ec8:	f85d fb04 	ldr.w	pc, [sp], #4

080a0ecc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0ecc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0ed0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a0ed2:	4604      	mov	r4, r0
 80a0ed4:	468b      	mov	fp, r1
 80a0ed6:	4691      	mov	r9, r2
 80a0ed8:	469a      	mov	sl, r3
 80a0eda:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a0ede:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a0ee2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a0ee6:	f7ff fefc 	bl	80a0ce2 <_ZN4MQTT11isConnectedEv>
 80a0eea:	2800      	cmp	r0, #0
 80a0eec:	d04b      	beq.n	80a0f86 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a0eee:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a0ef2:	2100      	movs	r1, #0
 80a0ef4:	69e0      	ldr	r0, [r4, #28]
 80a0ef6:	f003 fc7a 	bl	80a47ee <memset>

        length = writeString(topic, buffer, length);
 80a0efa:	2305      	movs	r3, #5
 80a0efc:	69e2      	ldr	r2, [r4, #28]
 80a0efe:	4659      	mov	r1, fp
 80a0f00:	4620      	mov	r0, r4
 80a0f02:	f7ff fed4 	bl	80a0cae <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a0f06:	1e6b      	subs	r3, r5, #1
 80a0f08:	2b01      	cmp	r3, #1
 80a0f0a:	d812      	bhi.n	80a0f32 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a0f0c:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0f0e:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a0f10:	3301      	adds	r3, #1
 80a0f12:	b29b      	uxth	r3, r3
 80a0f14:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a0f16:	121b      	asrs	r3, r3, #8
 80a0f18:	5413      	strb	r3, [r2, r0]
 80a0f1a:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0f1c:	69e3      	ldr	r3, [r4, #28]
 80a0f1e:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a0f20:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a0f22:	3002      	adds	r0, #2
 80a0f24:	b280      	uxth	r0, r0
 80a0f26:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a0f28:	b11e      	cbz	r6, 80a0f32 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a0f2a:	8c23      	ldrh	r3, [r4, #32]
 80a0f2c:	1c5a      	adds	r2, r3, #1
 80a0f2e:	8422      	strh	r2, [r4, #32]
 80a0f30:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a0f32:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a0f34:	b291      	uxth	r1, r2
 80a0f36:	1883      	adds	r3, r0, r2
 80a0f38:	458a      	cmp	sl, r1
 80a0f3a:	b29b      	uxth	r3, r3
 80a0f3c:	d909      	bls.n	80a0f52 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a0f3e:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a0f42:	3201      	adds	r2, #1
 80a0f44:	429e      	cmp	r6, r3
 80a0f46:	d904      	bls.n	80a0f52 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a0f48:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a0f4c:	69e1      	ldr	r1, [r4, #28]
 80a0f4e:	54ce      	strb	r6, [r1, r3]
 80a0f50:	e7f0      	b.n	80a0f34 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a0f52:	f1b8 0f00 	cmp.w	r8, #0
 80a0f56:	bf0c      	ite	eq
 80a0f58:	2130      	moveq	r1, #48	; 0x30
 80a0f5a:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a0f5c:	b10f      	cbz	r7, 80a0f62 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a0f5e:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a0f62:	2d02      	cmp	r5, #2
 80a0f64:	d102      	bne.n	80a0f6c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a0f66:	f041 0104 	orr.w	r1, r1, #4
 80a0f6a:	e003      	b.n	80a0f74 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a0f6c:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a0f6e:	bf08      	it	eq
 80a0f70:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a0f74:	4620      	mov	r0, r4
 80a0f76:	3b05      	subs	r3, #5
 80a0f78:	69e2      	ldr	r2, [r4, #28]
 80a0f7a:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a0f7c:	b001      	add	sp, #4
 80a0f7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a0f82:	f7ff be4d 	b.w	80a0c20 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a0f86:	b001      	add	sp, #4
 80a0f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a0f8c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 80a0f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 80a0f8e:	9c08      	ldr	r4, [sp, #32]
 80a0f90:	9403      	str	r4, [sp, #12]
 80a0f92:	2400      	movs	r4, #0
 80a0f94:	9402      	str	r4, [sp, #8]
 80a0f96:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80a0f9a:	9401      	str	r4, [sp, #4]
 80a0f9c:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80a0fa0:	9400      	str	r4, [sp, #0]
 80a0fa2:	f7ff ff93 	bl	80a0ecc <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 80a0fa6:	b004      	add	sp, #16
 80a0fa8:	bd10      	pop	{r4, pc}

080a0faa <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a0faa:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0fac:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0fae:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 80a0fb0:	460e      	mov	r6, r1
 80a0fb2:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 80a0fb4:	f003 fc4c 	bl	80a4850 <strlen>
 80a0fb8:	2300      	movs	r3, #0
 80a0fba:	9302      	str	r3, [sp, #8]
 80a0fbc:	9301      	str	r3, [sp, #4]
 80a0fbe:	9300      	str	r3, [sp, #0]
 80a0fc0:	4622      	mov	r2, r4
 80a0fc2:	4603      	mov	r3, r0
 80a0fc4:	4631      	mov	r1, r6
 80a0fc6:	4628      	mov	r0, r5
 80a0fc8:	f7ff ffe0 	bl	80a0f8c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 80a0fcc:	b004      	add	sp, #16
 80a0fce:	bd70      	pop	{r4, r5, r6, pc}

080a0fd0 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
 80a0fd0:	b538      	push	{r3, r4, r5, lr}
 80a0fd2:	4604      	mov	r4, r0
 80a0fd4:	460d      	mov	r5, r1
    if (isConnected()) {
 80a0fd6:	f7ff fe84 	bl	80a0ce2 <_ZN4MQTT11isConnectedEv>
 80a0fda:	b190      	cbz	r0, 80a1002 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a0fdc:	69e3      	ldr	r3, [r4, #28]
 80a0fde:	2262      	movs	r2, #98	; 0x62
 80a0fe0:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a0fe2:	69e3      	ldr	r3, [r4, #28]
 80a0fe4:	2202      	movs	r2, #2
 80a0fe6:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a0fe8:	69e3      	ldr	r3, [r4, #28]
 80a0fea:	122a      	asrs	r2, r5, #8
 80a0fec:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a0fee:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a0ff0:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a0ff2:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a0ff4:	69e1      	ldr	r1, [r4, #28]
 80a0ff6:	4620      	mov	r0, r4
 80a0ff8:	f001 f8db 	bl	80a21b2 <_ZN9TCPClient5writeEPKhj>
 80a0ffc:	3000      	adds	r0, #0
 80a0ffe:	bf18      	it	ne
 80a1000:	2001      	movne	r0, #1
    }
    return false;
}
 80a1002:	bd38      	pop	{r3, r4, r5, pc}

080a1004 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 80a1004:	b538      	push	{r3, r4, r5, lr}
 80a1006:	4604      	mov	r4, r0
 80a1008:	460d      	mov	r5, r1
    if (isConnected()) {
 80a100a:	f7ff fe6a 	bl	80a0ce2 <_ZN4MQTT11isConnectedEv>
 80a100e:	b190      	cbz	r0, 80a1036 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a1010:	69e3      	ldr	r3, [r4, #28]
 80a1012:	2272      	movs	r2, #114	; 0x72
 80a1014:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a1016:	69e3      	ldr	r3, [r4, #28]
 80a1018:	2202      	movs	r2, #2
 80a101a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a101c:	69e3      	ldr	r3, [r4, #28]
 80a101e:	122a      	asrs	r2, r5, #8
 80a1020:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a1022:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a1024:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a1026:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a1028:	69e1      	ldr	r1, [r4, #28]
 80a102a:	4620      	mov	r0, r4
 80a102c:	f001 f8c1 	bl	80a21b2 <_ZN9TCPClient5writeEPKhj>
 80a1030:	3000      	adds	r0, #0
 80a1032:	bf18      	it	ne
 80a1034:	2001      	movne	r0, #1
    }
    return false;
}
 80a1036:	bd38      	pop	{r3, r4, r5, pc}

080a1038 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a1038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a103c:	b083      	sub	sp, #12
 80a103e:	af00      	add	r7, sp, #0
 80a1040:	4604      	mov	r4, r0
    if (isConnected()) {
 80a1042:	f7ff fe4e 	bl	80a0ce2 <_ZN4MQTT11isConnectedEv>
 80a1046:	4681      	mov	r9, r0
 80a1048:	2800      	cmp	r0, #0
 80a104a:	f000 80f6 	beq.w	80a123a <_ZN4MQTT4loopEv+0x202>
 80a104e:	f000 fde5 	bl	80a1c1c <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a1052:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a1054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1058:	4353      	muls	r3, r2
 80a105a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a105c:	4605      	mov	r5, r0
 80a105e:	1a82      	subs	r2, r0, r2
 80a1060:	429a      	cmp	r2, r3
 80a1062:	d803      	bhi.n	80a106c <_ZN4MQTT4loopEv+0x34>
 80a1064:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a1066:	1a82      	subs	r2, r0, r2
 80a1068:	4293      	cmp	r3, r2
 80a106a:	d217      	bcs.n	80a109c <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a106c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a1070:	b12b      	cbz	r3, 80a107e <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a1072:	4620      	mov	r0, r4
 80a1074:	f001 f97c 	bl	80a2370 <_ZN9TCPClient4stopEv>
                return false;
 80a1078:	f04f 0900 	mov.w	r9, #0
 80a107c:	e0dd      	b.n	80a123a <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a107e:	69e2      	ldr	r2, [r4, #28]
 80a1080:	21c0      	movs	r1, #192	; 0xc0
 80a1082:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a1084:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a1086:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a1088:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a108a:	69e1      	ldr	r1, [r4, #28]
 80a108c:	2202      	movs	r2, #2
 80a108e:	f001 f890 	bl	80a21b2 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a1092:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a1094:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a1096:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a1098:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a109c:	4620      	mov	r0, r4
 80a109e:	f001 f92b 	bl	80a22f8 <_ZN9TCPClient9availableEv>
 80a10a2:	2800      	cmp	r0, #0
 80a10a4:	f000 80c9 	beq.w	80a123a <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a10a8:	1df9      	adds	r1, r7, #7
 80a10aa:	4620      	mov	r0, r4
 80a10ac:	f7ff fd60 	bl	80a0b70 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a10b0:	4602      	mov	r2, r0
 80a10b2:	2800      	cmp	r0, #0
 80a10b4:	f000 80c1 	beq.w	80a123a <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a10b8:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a10ba:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a10bc:	7818      	ldrb	r0, [r3, #0]
 80a10be:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a10c2:	2930      	cmp	r1, #48	; 0x30
 80a10c4:	d17d      	bne.n	80a11c2 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 80a10c6:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a10ca:	f1bb 0f00 	cmp.w	fp, #0
 80a10ce:	f000 80b4 	beq.w	80a123a <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a10d2:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a10d6:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a10d8:	eb03 000c 	add.w	r0, r3, ip
 80a10dc:	7881      	ldrb	r1, [r0, #2]
 80a10de:	f890 e001 	ldrb.w	lr, [r0, #1]
 80a10e2:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 80a10e6:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 80a10ea:	f10e 0108 	add.w	r1, lr, #8
 80a10ee:	f021 0107 	bic.w	r1, r1, #7
 80a10f2:	ebad 0d01 	sub.w	sp, sp, r1
 80a10f6:	4668      	mov	r0, sp
 80a10f8:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a10fa:	b28e      	uxth	r6, r1
 80a10fc:	45b6      	cmp	lr, r6
 80a10fe:	d906      	bls.n	80a110e <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a1100:	eb0c 0601 	add.w	r6, ip, r1
 80a1104:	441e      	add	r6, r3
 80a1106:	78f6      	ldrb	r6, [r6, #3]
 80a1108:	5446      	strb	r6, [r0, r1]
 80a110a:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a110c:	e7f5      	b.n	80a10fa <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a110e:	2100      	movs	r1, #0
 80a1110:	f800 100e 	strb.w	r1, [r0, lr]
 80a1114:	781e      	ldrb	r6, [r3, #0]
 80a1116:	f10c 0103 	add.w	r1, ip, #3
 80a111a:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a111e:	2e02      	cmp	r6, #2
 80a1120:	ebcc 0202 	rsb	r2, ip, r2
 80a1124:	d11e      	bne.n	80a1164 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1126:	4471      	add	r1, lr
 80a1128:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a112c:	4419      	add	r1, r3
 80a112e:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a1130:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a1134:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a1138:	f10c 0105 	add.w	r1, ip, #5
 80a113c:	4471      	add	r1, lr
 80a113e:	3a05      	subs	r2, #5
 80a1140:	4419      	add	r1, r3
 80a1142:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a1144:	69e3      	ldr	r3, [r4, #28]
 80a1146:	2240      	movs	r2, #64	; 0x40
 80a1148:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a114a:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a114c:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 80a1150:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a1152:	69e3      	ldr	r3, [r4, #28]
 80a1154:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a1158:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a115a:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a115c:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a115e:	f883 8003 	strb.w	r8, [r3, #3]
 80a1162:	e020      	b.n	80a11a6 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a1164:	2e04      	cmp	r6, #4
 80a1166:	d124      	bne.n	80a11b2 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1168:	4471      	add	r1, lr
 80a116a:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a116e:	4419      	add	r1, r3
 80a1170:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a1172:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1176:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a117a:	f10c 0105 	add.w	r1, ip, #5
 80a117e:	4471      	add	r1, lr
 80a1180:	3a05      	subs	r2, #5
 80a1182:	4419      	add	r1, r3
 80a1184:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a1186:	69e3      	ldr	r3, [r4, #28]
 80a1188:	2250      	movs	r2, #80	; 0x50
 80a118a:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a118c:	69e3      	ldr	r3, [r4, #28]
 80a118e:	2202      	movs	r2, #2
 80a1190:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a1192:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a1194:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 80a1198:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a119c:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 80a119e:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 80a11a0:	69e3      	ldr	r3, [r4, #28]
 80a11a2:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 80a11a6:	69e1      	ldr	r1, [r4, #28]
 80a11a8:	4620      	mov	r0, r4
 80a11aa:	f001 f802 	bl	80a21b2 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 80a11ae:	6265      	str	r5, [r4, #36]	; 0x24
 80a11b0:	e005      	b.n	80a11be <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a11b2:	3a03      	subs	r2, #3
 80a11b4:	4471      	add	r1, lr
 80a11b6:	ebce 0202 	rsb	r2, lr, r2
 80a11ba:	4419      	add	r1, r3
 80a11bc:	47d8      	blx	fp
 80a11be:	46d5      	mov	sp, sl
 80a11c0:	e03b      	b.n	80a123a <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 80a11c2:	2950      	cmp	r1, #80	; 0x50
 80a11c4:	d108      	bne.n	80a11d8 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 80a11c6:	7899      	ldrb	r1, [r3, #2]
 80a11c8:	78db      	ldrb	r3, [r3, #3]
 80a11ca:	4620      	mov	r0, r4
 80a11cc:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a11d0:	b289      	uxth	r1, r1
 80a11d2:	f7ff fefd 	bl	80a0fd0 <_ZN4MQTT14publishReleaseEt>
 80a11d6:	e030      	b.n	80a123a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 80a11d8:	2940      	cmp	r1, #64	; 0x40
 80a11da:	d00c      	beq.n	80a11f6 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 80a11dc:	2960      	cmp	r1, #96	; 0x60
 80a11de:	d108      	bne.n	80a11f2 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 80a11e0:	7899      	ldrb	r1, [r3, #2]
 80a11e2:	78db      	ldrb	r3, [r3, #3]
 80a11e4:	4620      	mov	r0, r4
 80a11e6:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a11ea:	b289      	uxth	r1, r1
 80a11ec:	f7ff ff0a 	bl	80a1004 <_ZN4MQTT15publishCompleteEt>
 80a11f0:	e023      	b.n	80a123a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 80a11f2:	2970      	cmp	r1, #112	; 0x70
 80a11f4:	d10d      	bne.n	80a1212 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 80a11f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a11f8:	b1f9      	cbz	r1, 80a123a <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a11fa:	2a04      	cmp	r2, #4
 80a11fc:	d11d      	bne.n	80a123a <_ZN4MQTT4loopEv+0x202>
 80a11fe:	f010 0f06 	tst.w	r0, #6
 80a1202:	d11a      	bne.n	80a123a <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 80a1204:	7898      	ldrb	r0, [r3, #2]
 80a1206:	78db      	ldrb	r3, [r3, #3]
 80a1208:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a120c:	b280      	uxth	r0, r0
 80a120e:	4788      	blx	r1
 80a1210:	e013      	b.n	80a123a <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 80a1212:	2990      	cmp	r1, #144	; 0x90
 80a1214:	d011      	beq.n	80a123a <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a1216:	29c0      	cmp	r1, #192	; 0xc0
 80a1218:	d10a      	bne.n	80a1230 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 80a121a:	22d0      	movs	r2, #208	; 0xd0
 80a121c:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a121e:	69e3      	ldr	r3, [r4, #28]
 80a1220:	2200      	movs	r2, #0
 80a1222:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a1224:	69e1      	ldr	r1, [r4, #28]
 80a1226:	2202      	movs	r2, #2
 80a1228:	4620      	mov	r0, r4
 80a122a:	f000 ffc2 	bl	80a21b2 <_ZN9TCPClient5writeEPKhj>
 80a122e:	e004      	b.n	80a123a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 80a1230:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 80a1232:	bf04      	itt	eq
 80a1234:	2300      	moveq	r3, #0
 80a1236:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a123a:	4648      	mov	r0, r9
 80a123c:	370c      	adds	r7, #12
 80a123e:	46bd      	mov	sp, r7
 80a1240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1244 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a1244:	b510      	push	{r4, lr}
 80a1246:	4604      	mov	r4, r0
    if (isConnected()) {
 80a1248:	f7ff fd4b 	bl	80a0ce2 <_ZN4MQTT11isConnectedEv>
 80a124c:	b110      	cbz	r0, 80a1254 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a124e:	4620      	mov	r0, r4
 80a1250:	f7ff fd19 	bl	80a0c86 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a1254:	69e0      	ldr	r0, [r4, #28]
 80a1256:	b108      	cbz	r0, 80a125c <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a1258:	f7fe ff25 	bl	80a00a6 <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a125c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a1260:	f001 fa0e 	bl	80a2680 <_ZN6StringD1Ev>
 80a1264:	4620      	mov	r0, r4
 80a1266:	f7ff fc0f 	bl	80a0a88 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a126a:	4620      	mov	r0, r4
 80a126c:	bd10      	pop	{r4, pc}

080a126e <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a126e:	f000 bc6d 	b.w	80a1b4c <HAL_Pin_Map>
	...

080a1274 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a1274:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a1276:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 80a1278:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 80a127a:	4608      	mov	r0, r1
 80a127c:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 80a127e:	b133      	cbz	r3, 80a128e <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 80a1280:	b93d      	cbnz	r5, 80a1292 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 80a1282:	490c      	ldr	r1, [pc, #48]	; (80a12b4 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 80a1284:	b004      	add	sp, #16
 80a1286:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 80a128a:	f001 ba8a 	b.w	80a27a2 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 80a128e:	4b0a      	ldr	r3, [pc, #40]	; (80a12b8 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 80a1290:	e000      	b.n	80a1294 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 80a1292:	4b0a      	ldr	r3, [pc, #40]	; (80a12bc <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 80a1294:	7b16      	ldrb	r6, [r2, #12]
 80a1296:	4c0a      	ldr	r4, [pc, #40]	; (80a12c0 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 80a1298:	490a      	ldr	r1, [pc, #40]	; (80a12c4 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 80a129a:	7b52      	ldrb	r2, [r2, #13]
 80a129c:	2e01      	cmp	r6, #1
 80a129e:	bf08      	it	eq
 80a12a0:	4621      	moveq	r1, r4
 80a12a2:	9202      	str	r2, [sp, #8]
 80a12a4:	9101      	str	r1, [sp, #4]
 80a12a6:	9500      	str	r5, [sp, #0]
 80a12a8:	4a07      	ldr	r2, [pc, #28]	; (80a12c8 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 80a12aa:	2100      	movs	r1, #0
 80a12ac:	f001 fb96 	bl	80a29dc <_ZN5Print11printf_implEbPKcz>
  }
 80a12b0:	b004      	add	sp, #16
 80a12b2:	bd70      	pop	{r4, r5, r6, pc}
 80a12b4:	080a4e99 	.word	0x080a4e99
 80a12b8:	080a5023 	.word	0x080a5023
 80a12bc:	080a4e88 	.word	0x080a4e88
 80a12c0:	080a4e91 	.word	0x080a4e91
 80a12c4:	080a4e95 	.word	0x080a4e95
 80a12c8:	080a4eaf 	.word	0x080a4eaf

080a12cc <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
 80a12cc:	22ff      	movs	r2, #255	; 0xff
 80a12ce:	7402      	strb	r2, [r0, #16]
 80a12d0:	7442      	strb	r2, [r0, #17]
 80a12d2:	7482      	strb	r2, [r0, #18]
 80a12d4:	74c2      	strb	r2, [r0, #19]
{ }
 80a12d6:	4770      	bx	lr

080a12d8 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a12d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
 80a12dc:	f990 3013 	ldrsb.w	r3, [r0, #19]
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a12e0:	4605      	mov	r5, r0
    // hardware SPI
    if (_sck == -1)
 80a12e2:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
 80a12e4:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
 80a12e6:	d104      	bne.n	80a12f2 <_ZN15Adafruit_BME2807spixferEh+0x1a>
        return SPI.transfer(x);
 80a12e8:	4816      	ldr	r0, [pc, #88]	; (80a1344 <_ZN15Adafruit_BME2807spixferEh+0x6c>)
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
 80a12ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
    // hardware SPI
    if (_sck == -1)
        return SPI.transfer(x);
 80a12ee:	f000 bf3d 	b.w	80a216c <_ZN8SPIClass8transferEh>
 80a12f2:	2607      	movs	r6, #7
 80a12f4:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
 80a12f6:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
 80a12fa:	f995 0013 	ldrsb.w	r0, [r5, #19]
 80a12fe:	2100      	movs	r1, #0
 80a1300:	b280      	uxth	r0, r0
 80a1302:	f001 ffae 	bl	80a3262 <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
 80a1306:	f995 0011 	ldrsb.w	r0, [r5, #17]
 80a130a:	fa08 f106 	lsl.w	r1, r8, r6
 80a130e:	4039      	ands	r1, r7
 80a1310:	b280      	uxth	r0, r0
 80a1312:	f001 ffa6 	bl	80a3262 <digitalWrite>
        digitalWrite(_sck, HIGH);
 80a1316:	f995 0013 	ldrsb.w	r0, [r5, #19]
 80a131a:	2101      	movs	r1, #1
 80a131c:	b280      	uxth	r0, r0
 80a131e:	f001 ffa0 	bl	80a3262 <digitalWrite>
        if (digitalRead(_miso))
 80a1322:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
 80a1326:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
 80a1328:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
 80a132a:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
 80a132c:	f001 ffb2 	bl	80a3294 <digitalRead>
 80a1330:	b108      	cbz	r0, 80a1336 <_ZN15Adafruit_BME2807spixferEh+0x5e>
            reply |= 1;
 80a1332:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
 80a1336:	f116 36ff 	adds.w	r6, r6, #4294967295
 80a133a:	d2de      	bcs.n	80a12fa <_ZN15Adafruit_BME2807spixferEh+0x22>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
 80a133c:	4620      	mov	r0, r4
 80a133e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1342:	bf00      	nop
 80a1344:	200009e4 	.word	0x200009e4

080a1348 <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 80a1348:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
 80a134a:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 80a134e:	4604      	mov	r4, r0
    if (_cs == -1) {
 80a1350:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
 80a1352:	460e      	mov	r6, r1
 80a1354:	4615      	mov	r5, r2
    if (_cs == -1) {
 80a1356:	d111      	bne.n	80a137c <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a1358:	7901      	ldrb	r1, [r0, #4]
 80a135a:	6800      	ldr	r0, [r0, #0]
 80a135c:	f001 fe70 	bl	80a3040 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a1360:	6820      	ldr	r0, [r4, #0]
 80a1362:	4631      	mov	r1, r6
 80a1364:	6803      	ldr	r3, [r0, #0]
 80a1366:	689b      	ldr	r3, [r3, #8]
 80a1368:	4798      	blx	r3
        _wire -> write((uint8_t)value);
 80a136a:	6820      	ldr	r0, [r4, #0]
 80a136c:	4629      	mov	r1, r5
 80a136e:	6803      	ldr	r3, [r0, #0]
 80a1370:	689b      	ldr	r3, [r3, #8]
 80a1372:	4798      	blx	r3
        _wire -> endTransmission();
 80a1374:	6820      	ldr	r0, [r4, #0]
 80a1376:	f001 fe6b 	bl	80a3050 <_ZN7TwoWire15endTransmissionEv>
 80a137a:	e02f      	b.n	80a13dc <_ZN15Adafruit_BME2806write8Ehh+0x94>
    } else {
        if (_sck == -1)
 80a137c:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a1380:	3301      	adds	r3, #1
 80a1382:	d10f      	bne.n	80a13a4 <_ZN15Adafruit_BME2806write8Ehh+0x5c>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 80a1384:	4b16      	ldr	r3, [pc, #88]	; (80a13e0 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
 80a1386:	4a17      	ldr	r2, [pc, #92]	; (80a13e4 <_ZN15Adafruit_BME2806write8Ehh+0x9c>)
 80a1388:	9300      	str	r3, [sp, #0]
 80a138a:	9202      	str	r2, [sp, #8]
 80a138c:	2300      	movs	r3, #0
 80a138e:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a1390:	4669      	mov	r1, sp
 80a1392:	4815      	ldr	r0, [pc, #84]	; (80a13e8 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
 80a1394:	f88d 3004 	strb.w	r3, [sp, #4]
 80a1398:	f88d 200c 	strb.w	r2, [sp, #12]
 80a139c:	f88d 300d 	strb.w	r3, [sp, #13]
 80a13a0:	f000 fe74 	bl	80a208c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
 80a13a4:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a13a8:	2100      	movs	r1, #0
 80a13aa:	b280      	uxth	r0, r0
 80a13ac:	f001 ff59 	bl	80a3262 <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
 80a13b0:	f006 017f 	and.w	r1, r6, #127	; 0x7f
 80a13b4:	4620      	mov	r0, r4
 80a13b6:	f7ff ff8f 	bl	80a12d8 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
 80a13ba:	4629      	mov	r1, r5
 80a13bc:	4620      	mov	r0, r4
 80a13be:	f7ff ff8b 	bl	80a12d8 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
 80a13c2:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a13c6:	2101      	movs	r1, #1
 80a13c8:	b280      	uxth	r0, r0
 80a13ca:	f001 ff4a 	bl	80a3262 <digitalWrite>
    if (_sck == -1)
 80a13ce:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a13d2:	3301      	adds	r3, #1
 80a13d4:	d102      	bne.n	80a13dc <_ZN15Adafruit_BME2806write8Ehh+0x94>
        SPI.endTransaction(); // release the SPI bus
 80a13d6:	4804      	ldr	r0, [pc, #16]	; (80a13e8 <_ZN15Adafruit_BME2806write8Ehh+0xa0>)
 80a13d8:	f000 fe3f 	bl	80a205a <_ZN8SPIClass14endTransactionEv>
    }
}
 80a13dc:	b004      	add	sp, #16
 80a13de:	bd70      	pop	{r4, r5, r6, pc}
 80a13e0:	080a4e84 	.word	0x080a4e84
 80a13e4:	0007a120 	.word	0x0007a120
 80a13e8:	200009e4 	.word	0x200009e4

080a13ec <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a13ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a13ee:	4604      	mov	r4, r0
    _measReg.mode     = mode;
 80a13f0:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a13f4:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.mode     = mode;
 80a13f8:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
 80a13fc:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
 80a1400:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
 80a1404:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a1408:	f89d e01c 	ldrb.w	lr, [sp, #28]
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
 80a140c:	f366 1347 	bfi	r3, r6, #5, #3
 80a1410:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
 80a1414:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
 80a1418:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
 80a141c:	f36e 03c5 	bfi	r3, lr, #3, #3
    _configReg.t_sb   = duration;
 80a1420:	f367 0302 	bfi	r3, r7, #0, #3
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
 80a1424:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
 80a1428:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
 80a142c:	f006 0207 	and.w	r2, r6, #7
 80a1430:	21f2      	movs	r1, #242	; 0xf2
 80a1432:	f7ff ff89 	bl	80a1348 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
 80a1436:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
 80a143a:	4620      	mov	r0, r4
 80a143c:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a1440:	f002 0107 	and.w	r1, r2, #7
 80a1444:	009b      	lsls	r3, r3, #2
 80a1446:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a144a:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
 80a144e:	21f5      	movs	r1, #245	; 0xf5
 80a1450:	f7ff ff7a 	bl	80a1348 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
 80a1454:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a1458:	4620      	mov	r0, r4
 80a145a:	f3c2 03c2 	ubfx	r3, r2, #3, #3
 80a145e:	f002 0107 	and.w	r1, r2, #7
 80a1462:	009b      	lsls	r3, r3, #2
 80a1464:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80a1468:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
 80a146c:	21f4      	movs	r1, #244	; 0xf4
}
 80a146e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
 80a1472:	f7ff bf69 	b.w	80a1348 <_ZN15Adafruit_BME2806write8Ehh>
	...

080a1478 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 80a1478:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
 80a147a:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 80a147e:	b085      	sub	sp, #20
    uint8_t value;
    
    if (_cs == -1) {
 80a1480:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
 80a1482:	4604      	mov	r4, r0
 80a1484:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
 80a1486:	d116      	bne.n	80a14b6 <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a1488:	7901      	ldrb	r1, [r0, #4]
 80a148a:	6800      	ldr	r0, [r0, #0]
 80a148c:	f001 fdd8 	bl	80a3040 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a1490:	6820      	ldr	r0, [r4, #0]
 80a1492:	4629      	mov	r1, r5
 80a1494:	6803      	ldr	r3, [r0, #0]
 80a1496:	689b      	ldr	r3, [r3, #8]
 80a1498:	4798      	blx	r3
        _wire -> endTransmission();
 80a149a:	6820      	ldr	r0, [r4, #0]
 80a149c:	f001 fdd8 	bl	80a3050 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
 80a14a0:	2201      	movs	r2, #1
 80a14a2:	7921      	ldrb	r1, [r4, #4]
 80a14a4:	6820      	ldr	r0, [r4, #0]
 80a14a6:	f001 fdc8 	bl	80a303a <_ZN7TwoWire11requestFromEhh>
        value = _wire -> read();
 80a14aa:	6820      	ldr	r0, [r4, #0]
 80a14ac:	6803      	ldr	r3, [r0, #0]
 80a14ae:	695b      	ldr	r3, [r3, #20]
 80a14b0:	4798      	blx	r3
 80a14b2:	b2c5      	uxtb	r5, r0
 80a14b4:	e030      	b.n	80a1518 <_ZN15Adafruit_BME2805read8Eh+0xa0>
    } else {
        if (_sck == -1)
 80a14b6:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a14ba:	3301      	adds	r3, #1
 80a14bc:	d10f      	bne.n	80a14de <_ZN15Adafruit_BME2805read8Eh+0x66>
 80a14be:	4b18      	ldr	r3, [pc, #96]	; (80a1520 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
 80a14c0:	4a18      	ldr	r2, [pc, #96]	; (80a1524 <_ZN15Adafruit_BME2805read8Eh+0xac>)
 80a14c2:	9300      	str	r3, [sp, #0]
 80a14c4:	9202      	str	r2, [sp, #8]
 80a14c6:	2300      	movs	r3, #0
 80a14c8:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a14ca:	4669      	mov	r1, sp
 80a14cc:	4816      	ldr	r0, [pc, #88]	; (80a1528 <_ZN15Adafruit_BME2805read8Eh+0xb0>)
 80a14ce:	f88d 3004 	strb.w	r3, [sp, #4]
 80a14d2:	f88d 200c 	strb.w	r2, [sp, #12]
 80a14d6:	f88d 300d 	strb.w	r3, [sp, #13]
 80a14da:	f000 fdd7 	bl	80a208c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
 80a14de:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a14e2:	2100      	movs	r1, #0
 80a14e4:	b280      	uxth	r0, r0
 80a14e6:	f001 febc 	bl	80a3262 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a14ea:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a14ee:	4620      	mov	r0, r4
 80a14f0:	f7ff fef2 	bl	80a12d8 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
 80a14f4:	2100      	movs	r1, #0
 80a14f6:	4620      	mov	r0, r4
 80a14f8:	f7ff feee 	bl	80a12d8 <_ZN15Adafruit_BME2807spixferEh>
 80a14fc:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
 80a14fe:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1502:	2101      	movs	r1, #1
 80a1504:	b280      	uxth	r0, r0
 80a1506:	f001 feac 	bl	80a3262 <digitalWrite>
        if (_sck == -1)
 80a150a:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a150e:	3301      	adds	r3, #1
 80a1510:	d102      	bne.n	80a1518 <_ZN15Adafruit_BME2805read8Eh+0xa0>
            SPI.endTransaction(); // release the SPI bus
 80a1512:	4805      	ldr	r0, [pc, #20]	; (80a1528 <_ZN15Adafruit_BME2805read8Eh+0xb0>)
 80a1514:	f000 fda1 	bl	80a205a <_ZN8SPIClass14endTransactionEv>
    }
    return value;
}
 80a1518:	4628      	mov	r0, r5
 80a151a:	b005      	add	sp, #20
 80a151c:	bd30      	pop	{r4, r5, pc}
 80a151e:	bf00      	nop
 80a1520:	080a4e84 	.word	0x080a4e84
 80a1524:	0007a120 	.word	0x0007a120
 80a1528:	200009e4 	.word	0x200009e4

080a152c <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
 80a152c:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
 80a152e:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
 80a1532:	b085      	sub	sp, #20
    uint16_t value;

    if (_cs == -1) {
 80a1534:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
 80a1536:	4604      	mov	r4, r0
 80a1538:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
 80a153a:	d11d      	bne.n	80a1578 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a153c:	7901      	ldrb	r1, [r0, #4]
 80a153e:	6800      	ldr	r0, [r0, #0]
 80a1540:	f001 fd7e 	bl	80a3040 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a1544:	6820      	ldr	r0, [r4, #0]
 80a1546:	4629      	mov	r1, r5
 80a1548:	6803      	ldr	r3, [r0, #0]
 80a154a:	689b      	ldr	r3, [r3, #8]
 80a154c:	4798      	blx	r3
        _wire -> endTransmission();
 80a154e:	6820      	ldr	r0, [r4, #0]
 80a1550:	f001 fd7e 	bl	80a3050 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
 80a1554:	2202      	movs	r2, #2
 80a1556:	7921      	ldrb	r1, [r4, #4]
 80a1558:	6820      	ldr	r0, [r4, #0]
 80a155a:	f001 fd6e 	bl	80a303a <_ZN7TwoWire11requestFromEhh>
        value = (_wire -> read() << 8) | _wire -> read();
 80a155e:	6820      	ldr	r0, [r4, #0]
 80a1560:	6803      	ldr	r3, [r0, #0]
 80a1562:	695b      	ldr	r3, [r3, #20]
 80a1564:	4798      	blx	r3
 80a1566:	4605      	mov	r5, r0
 80a1568:	6820      	ldr	r0, [r4, #0]
 80a156a:	6803      	ldr	r3, [r0, #0]
 80a156c:	695b      	ldr	r3, [r3, #20]
 80a156e:	4798      	blx	r3
 80a1570:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80a1574:	b285      	uxth	r5, r0
 80a1576:	e037      	b.n	80a15e8 <_ZN15Adafruit_BME2806read16Eh+0xbc>
    } else {
        if (_sck == -1)
 80a1578:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a157c:	3301      	adds	r3, #1
 80a157e:	d10f      	bne.n	80a15a0 <_ZN15Adafruit_BME2806read16Eh+0x74>
 80a1580:	4b1b      	ldr	r3, [pc, #108]	; (80a15f0 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
 80a1582:	4a1c      	ldr	r2, [pc, #112]	; (80a15f4 <_ZN15Adafruit_BME2806read16Eh+0xc8>)
 80a1584:	9300      	str	r3, [sp, #0]
 80a1586:	9202      	str	r2, [sp, #8]
 80a1588:	2300      	movs	r3, #0
 80a158a:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a158c:	4669      	mov	r1, sp
 80a158e:	481a      	ldr	r0, [pc, #104]	; (80a15f8 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
 80a1590:	f88d 3004 	strb.w	r3, [sp, #4]
 80a1594:	f88d 200c 	strb.w	r2, [sp, #12]
 80a1598:	f88d 300d 	strb.w	r3, [sp, #13]
 80a159c:	f000 fd76 	bl	80a208c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
 80a15a0:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a15a4:	2100      	movs	r1, #0
 80a15a6:	b280      	uxth	r0, r0
 80a15a8:	f001 fe5b 	bl	80a3262 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a15ac:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a15b0:	4620      	mov	r0, r4
 80a15b2:	f7ff fe91 	bl	80a12d8 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
 80a15b6:	2100      	movs	r1, #0
 80a15b8:	4620      	mov	r0, r4
 80a15ba:	f7ff fe8d 	bl	80a12d8 <_ZN15Adafruit_BME2807spixferEh>
 80a15be:	2100      	movs	r1, #0
 80a15c0:	4605      	mov	r5, r0
 80a15c2:	4620      	mov	r0, r4
 80a15c4:	f7ff fe88 	bl	80a12d8 <_ZN15Adafruit_BME2807spixferEh>
 80a15c8:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 80a15cc:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
 80a15ce:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a15d2:	2101      	movs	r1, #1
 80a15d4:	b280      	uxth	r0, r0
 80a15d6:	f001 fe44 	bl	80a3262 <digitalWrite>
        if (_sck == -1)
 80a15da:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a15de:	3301      	adds	r3, #1
 80a15e0:	d102      	bne.n	80a15e8 <_ZN15Adafruit_BME2806read16Eh+0xbc>
            SPI.endTransaction(); // release the SPI bus
 80a15e2:	4805      	ldr	r0, [pc, #20]	; (80a15f8 <_ZN15Adafruit_BME2806read16Eh+0xcc>)
 80a15e4:	f000 fd39 	bl	80a205a <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
 80a15e8:	4628      	mov	r0, r5
 80a15ea:	b005      	add	sp, #20
 80a15ec:	bd30      	pop	{r4, r5, pc}
 80a15ee:	bf00      	nop
 80a15f0:	080a4e84 	.word	0x080a4e84
 80a15f4:	0007a120 	.word	0x0007a120
 80a15f8:	200009e4 	.word	0x200009e4

080a15fc <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
 80a15fc:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
 80a15fe:	f7ff ff95 	bl	80a152c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
 80a1602:	ba40      	rev16	r0, r0
}
 80a1604:	b280      	uxth	r0, r0
 80a1606:	bd08      	pop	{r3, pc}

080a1608 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
 80a1608:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
 80a160a:	f990 3010 	ldrsb.w	r3, [r0, #16]
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
 80a160e:	b085      	sub	sp, #20
    uint32_t value;

    if (_cs == -1) {
 80a1610:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
 80a1612:	4604      	mov	r4, r0
 80a1614:	460d      	mov	r5, r1
    uint32_t value;

    if (_cs == -1) {
 80a1616:	d121      	bne.n	80a165c <_ZN15Adafruit_BME2806read24Eh+0x54>
        _wire -> beginTransmission((uint8_t)_i2caddr);
 80a1618:	7901      	ldrb	r1, [r0, #4]
 80a161a:	6800      	ldr	r0, [r0, #0]
 80a161c:	f001 fd10 	bl	80a3040 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
 80a1620:	6820      	ldr	r0, [r4, #0]
 80a1622:	4629      	mov	r1, r5
 80a1624:	6803      	ldr	r3, [r0, #0]
 80a1626:	689b      	ldr	r3, [r3, #8]
 80a1628:	4798      	blx	r3
        _wire -> endTransmission();
 80a162a:	6820      	ldr	r0, [r4, #0]
 80a162c:	f001 fd10 	bl	80a3050 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
 80a1630:	2203      	movs	r2, #3
 80a1632:	7921      	ldrb	r1, [r4, #4]
 80a1634:	6820      	ldr	r0, [r4, #0]
 80a1636:	f001 fd00 	bl	80a303a <_ZN7TwoWire11requestFromEhh>

        value = _wire -> read();
 80a163a:	6820      	ldr	r0, [r4, #0]
 80a163c:	6803      	ldr	r3, [r0, #0]
 80a163e:	695b      	ldr	r3, [r3, #20]
 80a1640:	4798      	blx	r3
        value <<= 8;
 80a1642:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
 80a1644:	6820      	ldr	r0, [r4, #0]
 80a1646:	6803      	ldr	r3, [r0, #0]
 80a1648:	695b      	ldr	r3, [r3, #20]
 80a164a:	4798      	blx	r3
 80a164c:	4328      	orrs	r0, r5
        value <<= 8;
 80a164e:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
 80a1650:	6820      	ldr	r0, [r4, #0]
 80a1652:	6803      	ldr	r3, [r0, #0]
 80a1654:	695b      	ldr	r3, [r3, #20]
 80a1656:	4798      	blx	r3
 80a1658:	4305      	orrs	r5, r0
 80a165a:	e03b      	b.n	80a16d4 <_ZN15Adafruit_BME2806read24Eh+0xcc>
    } else {
        if (_sck == -1)
 80a165c:	f990 3013 	ldrsb.w	r3, [r0, #19]
 80a1660:	3301      	adds	r3, #1
 80a1662:	d10f      	bne.n	80a1684 <_ZN15Adafruit_BME2806read24Eh+0x7c>
 80a1664:	4b1d      	ldr	r3, [pc, #116]	; (80a16dc <_ZN15Adafruit_BME2806read24Eh+0xd4>)
 80a1666:	4a1e      	ldr	r2, [pc, #120]	; (80a16e0 <_ZN15Adafruit_BME2806read24Eh+0xd8>)
 80a1668:	9300      	str	r3, [sp, #0]
 80a166a:	9202      	str	r2, [sp, #8]
 80a166c:	2300      	movs	r3, #0
 80a166e:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
 80a1670:	4669      	mov	r1, sp
 80a1672:	481c      	ldr	r0, [pc, #112]	; (80a16e4 <_ZN15Adafruit_BME2806read24Eh+0xdc>)
 80a1674:	f88d 3004 	strb.w	r3, [sp, #4]
 80a1678:	f88d 200c 	strb.w	r2, [sp, #12]
 80a167c:	f88d 300d 	strb.w	r3, [sp, #13]
 80a1680:	f000 fd04 	bl	80a208c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
        digitalWrite(_cs, LOW);
 80a1684:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a1688:	2100      	movs	r1, #0
 80a168a:	b280      	uxth	r0, r0
 80a168c:	f001 fde9 	bl	80a3262 <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
 80a1690:	f045 0180 	orr.w	r1, r5, #128	; 0x80
 80a1694:	4620      	mov	r0, r4
 80a1696:	f7ff fe1f 	bl	80a12d8 <_ZN15Adafruit_BME2807spixferEh>

        value = spixfer(0);
 80a169a:	2100      	movs	r1, #0
 80a169c:	4620      	mov	r0, r4
 80a169e:	f7ff fe1b 	bl	80a12d8 <_ZN15Adafruit_BME2807spixferEh>
        value <<= 8;
        value |= spixfer(0);
 80a16a2:	2100      	movs	r1, #0
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
        digitalWrite(_cs, LOW);
        spixfer(reg | 0x80); // read, bit 7 high

        value = spixfer(0);
        value <<= 8;
 80a16a4:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
 80a16a6:	4620      	mov	r0, r4
 80a16a8:	f7ff fe16 	bl	80a12d8 <_ZN15Adafruit_BME2807spixferEh>
 80a16ac:	4328      	orrs	r0, r5
        value <<= 8;
 80a16ae:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
 80a16b0:	2100      	movs	r1, #0
 80a16b2:	4620      	mov	r0, r4
 80a16b4:	f7ff fe10 	bl	80a12d8 <_ZN15Adafruit_BME2807spixferEh>
 80a16b8:	4305      	orrs	r5, r0

        digitalWrite(_cs, HIGH);
 80a16ba:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a16be:	2101      	movs	r1, #1
 80a16c0:	b280      	uxth	r0, r0
 80a16c2:	f001 fdce 	bl	80a3262 <digitalWrite>
        if (_sck == -1)
 80a16c6:	f994 3013 	ldrsb.w	r3, [r4, #19]
 80a16ca:	3301      	adds	r3, #1
 80a16cc:	d102      	bne.n	80a16d4 <_ZN15Adafruit_BME2806read24Eh+0xcc>
            SPI.endTransaction(); // release the SPI bus
 80a16ce:	4805      	ldr	r0, [pc, #20]	; (80a16e4 <_ZN15Adafruit_BME2806read24Eh+0xdc>)
 80a16d0:	f000 fcc3 	bl	80a205a <_ZN8SPIClass14endTransactionEv>
    }

    return value;
}
 80a16d4:	4628      	mov	r0, r5
 80a16d6:	b005      	add	sp, #20
 80a16d8:	bd30      	pop	{r4, r5, pc}
 80a16da:	bf00      	nop
 80a16dc:	080a4e84 	.word	0x080a4e84
 80a16e0:	0007a120 	.word	0x0007a120
 80a16e4:	200009e4 	.word	0x200009e4

080a16e8 <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
 80a16e8:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a16ea:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
 80a16ec:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a16ee:	f7ff ff85 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a16f2:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
 80a16f4:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a16f6:	4620      	mov	r0, r4
 80a16f8:	f7ff ff80 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
 80a16fc:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
 80a16fe:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1700:	4620      	mov	r0, r4
 80a1702:	f7ff ff7b 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a1706:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
 80a1708:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a170a:	4620      	mov	r0, r4
 80a170c:	f7ff ff76 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1710:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
 80a1712:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1714:	4620      	mov	r0, r4
 80a1716:	f7ff ff71 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
 80a171a:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
 80a171c:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a171e:	4620      	mov	r0, r4
 80a1720:	f7ff ff6c 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
 80a1724:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
 80a1726:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1728:	4620      	mov	r0, r4
 80a172a:	f7ff ff67 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
 80a172e:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
 80a1730:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1732:	4620      	mov	r0, r4
 80a1734:	f7ff ff62 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
 80a1738:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
 80a173a:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a173c:	4620      	mov	r0, r4
 80a173e:	f7ff ff5d 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
 80a1742:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
 80a1744:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1746:	4620      	mov	r0, r4
 80a1748:	f7ff ff58 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
 80a174c:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
 80a174e:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1750:	4620      	mov	r0, r4
 80a1752:	f7ff ff53 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
 80a1756:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
 80a1758:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a175a:	4620      	mov	r0, r4
 80a175c:	f7ff ff4e 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a1760:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
 80a1762:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a1764:	4620      	mov	r0, r4
 80a1766:	f7ff fe87 	bl	80a1478 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a176a:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
 80a176c:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
 80a1770:	4620      	mov	r0, r4
 80a1772:	f7ff ff43 	bl	80a15fc <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a1776:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
 80a1778:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a177a:	4620      	mov	r0, r4
 80a177c:	f7ff fe7c 	bl	80a1478 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a1780:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
 80a1782:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
 80a1786:	4620      	mov	r0, r4
 80a1788:	f7ff fe76 	bl	80a1478 <_ZN15Adafruit_BME2805read8Eh>
 80a178c:	21e5      	movs	r1, #229	; 0xe5
 80a178e:	4605      	mov	r5, r0
 80a1790:	4620      	mov	r0, r4
 80a1792:	f7ff fe71 	bl	80a1478 <_ZN15Adafruit_BME2805read8Eh>
 80a1796:	f000 000f 	and.w	r0, r0, #15
 80a179a:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 80a179e:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
 80a17a0:	21e6      	movs	r1, #230	; 0xe6
 80a17a2:	4620      	mov	r0, r4
 80a17a4:	f7ff fe68 	bl	80a1478 <_ZN15Adafruit_BME2805read8Eh>
 80a17a8:	21e5      	movs	r1, #229	; 0xe5
 80a17aa:	4605      	mov	r5, r0
 80a17ac:	4620      	mov	r0, r4
 80a17ae:	f7ff fe63 	bl	80a1478 <_ZN15Adafruit_BME2805read8Eh>
 80a17b2:	1100      	asrs	r0, r0, #4
 80a17b4:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
 80a17b8:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
 80a17ba:	21e7      	movs	r1, #231	; 0xe7
 80a17bc:	4620      	mov	r0, r4
 80a17be:	f7ff fe5b 	bl	80a1478 <_ZN15Adafruit_BME2805read8Eh>
 80a17c2:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
 80a17c6:	bd38      	pop	{r3, r4, r5, pc}

080a17c8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
 80a17c8:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
 80a17ca:	21f3      	movs	r1, #243	; 0xf3
 80a17cc:	f7ff fe54 	bl	80a1478 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
 80a17d0:	f000 0001 	and.w	r0, r0, #1
 80a17d4:	bd08      	pop	{r3, pc}
	...

080a17d8 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
 80a17d8:	b530      	push	{r4, r5, lr}
 80a17da:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
 80a17dc:	f990 0010 	ldrsb.w	r0, [r0, #16]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
 80a17e0:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
 80a17e2:	1c42      	adds	r2, r0, #1
 80a17e4:	d103      	bne.n	80a17ee <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
 80a17e6:	6820      	ldr	r0, [r4, #0]
 80a17e8:	f001 fc18 	bl	80a301c <_ZN7TwoWire5beginEv>
 80a17ec:	e021      	b.n	80a1832 <_ZN15Adafruit_BME2804initEv+0x5a>
    } else {
        digitalWrite(_cs, HIGH);
 80a17ee:	2101      	movs	r1, #1
 80a17f0:	b280      	uxth	r0, r0
 80a17f2:	f001 fd36 	bl	80a3262 <digitalWrite>
        pinMode(_cs, OUTPUT);
 80a17f6:	f994 0010 	ldrsb.w	r0, [r4, #16]
 80a17fa:	2101      	movs	r1, #1
 80a17fc:	b280      	uxth	r0, r0
 80a17fe:	f001 fd1f 	bl	80a3240 <pinMode>
        if (_sck == -1) {
 80a1802:	f994 0013 	ldrsb.w	r0, [r4, #19]
 80a1806:	1c43      	adds	r3, r0, #1
 80a1808:	d103      	bne.n	80a1812 <_ZN15Adafruit_BME2804initEv+0x3a>
            // hardware SPI
            SPI.begin();
 80a180a:	481f      	ldr	r0, [pc, #124]	; (80a1888 <_ZN15Adafruit_BME2804initEv+0xb0>)
 80a180c:	f000 fc20 	bl	80a2050 <_ZN8SPIClass5beginEv>
 80a1810:	e00f      	b.n	80a1832 <_ZN15Adafruit_BME2804initEv+0x5a>
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
 80a1812:	2101      	movs	r1, #1
 80a1814:	b280      	uxth	r0, r0
 80a1816:	f001 fd13 	bl	80a3240 <pinMode>
            pinMode(_mosi, OUTPUT);
 80a181a:	f994 0011 	ldrsb.w	r0, [r4, #17]
 80a181e:	2101      	movs	r1, #1
 80a1820:	b280      	uxth	r0, r0
 80a1822:	f001 fd0d 	bl	80a3240 <pinMode>
            pinMode(_miso, INPUT);
 80a1826:	f994 0012 	ldrsb.w	r0, [r4, #18]
 80a182a:	2100      	movs	r1, #0
 80a182c:	b280      	uxth	r0, r0
 80a182e:	f001 fd07 	bl	80a3240 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
 80a1832:	21d0      	movs	r1, #208	; 0xd0
 80a1834:	4620      	mov	r0, r4
 80a1836:	f7ff fe1f 	bl	80a1478 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
 80a183a:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
 80a183c:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
 80a183e:	d120      	bne.n	80a1882 <_ZN15Adafruit_BME2804initEv+0xaa>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
 80a1840:	4620      	mov	r0, r4
 80a1842:	22b6      	movs	r2, #182	; 0xb6
 80a1844:	21e0      	movs	r1, #224	; 0xe0
 80a1846:	f7ff fd7f 	bl	80a1348 <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
 80a184a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a184e:	f001 f917 	bl	80a2a80 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
 80a1852:	4620      	mov	r0, r4
 80a1854:	f7ff ffb8 	bl	80a17c8 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
 80a1858:	4605      	mov	r5, r0
 80a185a:	b108      	cbz	r0, 80a1860 <_ZN15Adafruit_BME2804initEv+0x88>
          delay(100);
 80a185c:	2064      	movs	r0, #100	; 0x64
 80a185e:	e7f6      	b.n	80a184e <_ZN15Adafruit_BME2804initEv+0x76>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
 80a1860:	4620      	mov	r0, r4
 80a1862:	f7ff ff41 	bl	80a16e8 <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
 80a1866:	2305      	movs	r3, #5
 80a1868:	9300      	str	r3, [sp, #0]
 80a186a:	461a      	mov	r2, r3
 80a186c:	2103      	movs	r1, #3
 80a186e:	4620      	mov	r0, r4
 80a1870:	9502      	str	r5, [sp, #8]
 80a1872:	9501      	str	r5, [sp, #4]
 80a1874:	f7ff fdba 	bl	80a13ec <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
 80a1878:	2064      	movs	r0, #100	; 0x64
 80a187a:	f001 f901 	bl	80a2a80 <delay>

    return true;
 80a187e:	2001      	movs	r0, #1
 80a1880:	e000      	b.n	80a1884 <_ZN15Adafruit_BME2804initEv+0xac>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
 80a1882:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
 80a1884:	b005      	add	sp, #20
 80a1886:	bd30      	pop	{r4, r5, pc}
 80a1888:	200009e4 	.word	0x200009e4

080a188c <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
 80a188c:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
 80a188e:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
 80a1890:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
 80a1892:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
 80a1894:	f001 fd4c 	bl	80a3330 <_Z19__fetch_global_Wirev>
 80a1898:	6020      	str	r0, [r4, #0]
	status = init();
 80a189a:	4620      	mov	r0, r4
 80a189c:	f7ff ff9c 	bl	80a17d8 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
 80a18a0:	b930      	cbnz	r0, 80a18b0 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 80a18a2:	2376      	movs	r3, #118	; 0x76
 80a18a4:	7123      	strb	r3, [r4, #4]
 		status = init();
 80a18a6:	4620      	mov	r0, r4
 		}
	return status;
}
 80a18a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
 80a18ac:	f7ff bf94 	b.w	80a17d8 <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
 80a18b0:	bd10      	pop	{r4, pc}
	...

080a18b4 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
 80a18b4:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 80a18b6:	21fa      	movs	r1, #250	; 0xfa
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
 80a18b8:	4604      	mov	r4, r0
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
 80a18ba:	f7ff fea5 	bl	80a1608 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
 80a18be:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a18c2:	d01b      	beq.n	80a18fc <_ZN15Adafruit_BME28015readTemperatureEv+0x48>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
 80a18c4:	8aa2      	ldrh	r2, [r4, #20]
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
             
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
 80a18c6:	ebc2 2320 	rsb	r3, r2, r0, asr #8
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;
 80a18ca:	435b      	muls	r3, r3
 80a18cc:	0052      	lsls	r2, r2, #1
 80a18ce:	ebc2 10e0 	rsb	r0, r2, r0, asr #7
 80a18d2:	f9b4 2016 	ldrsh.w	r2, [r4, #22]
 80a18d6:	131b      	asrs	r3, r3, #12
 80a18d8:	4350      	muls	r0, r2
 80a18da:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 80a18de:	4353      	muls	r3, r2
 80a18e0:	139b      	asrs	r3, r3, #14
 80a18e2:	eb03 20e0 	add.w	r0, r3, r0, asr #11
 80a18e6:	60e0      	str	r0, [r4, #12]

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
 80a18e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80a18ec:	3080      	adds	r0, #128	; 0x80
 80a18ee:	1200      	asrs	r0, r0, #8
 80a18f0:	f002 fbf8 	bl	80a40e4 <__aeabi_i2f>
 80a18f4:	4902      	ldr	r1, [pc, #8]	; (80a1900 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>)
 80a18f6:	f002 fcfd 	bl	80a42f4 <__aeabi_fdiv>
 80a18fa:	bd10      	pop	{r4, pc}
{
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
    if (adc_T == 0x800000) // value in case temp measurement was disabled
        return NAN;
 80a18fc:	4801      	ldr	r0, [pc, #4]	; (80a1904 <_ZN15Adafruit_BME28015readTemperatureEv+0x50>)

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
}
 80a18fe:	bd10      	pop	{r4, pc}
 80a1900:	42c80000 	.word	0x42c80000
 80a1904:	7fc00000 	.word	0x7fc00000

080a1908 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
 80a1908:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a190c:	4606      	mov	r6, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
 80a190e:	f7ff ffd1 	bl	80a18b4 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 80a1912:	21f7      	movs	r1, #247	; 0xf7
 80a1914:	4630      	mov	r0, r6
 80a1916:	f7ff fe77 	bl	80a1608 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
 80a191a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
float Adafruit_BME280::readPressure(void) {
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
 80a191e:	4607      	mov	r7, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
 80a1920:	f000 80bf 	beq.w	80a1aa2 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
 80a1924:	68f4      	ldr	r4, [r6, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a1926:	f9b6 201c 	ldrsh.w	r2, [r6, #28]
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
 80a192a:	17e5      	asrs	r5, r4, #31
 80a192c:	f5b4 34fa 	subs.w	r4, r4, #128000	; 0x1f400
 80a1930:	f145 35ff 	adc.w	r5, r5, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a1934:	fba4 8904 	umull	r8, r9, r4, r4
 80a1938:	fb04 f305 	mul.w	r3, r4, r5
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a193c:	fb02 f105 	mul.w	r1, r2, r5
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a1940:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
 80a1944:	17d3      	asrs	r3, r2, #31
 80a1946:	fb04 1103 	mla	r1, r4, r3, r1
 80a194a:	fba2 2304 	umull	r2, r3, r2, r4
 80a194e:	440b      	add	r3, r1
 80a1950:	0319      	lsls	r1, r3, #12
 80a1952:	ea41 5112 	orr.w	r1, r1, r2, lsr #20
 80a1956:	0310      	lsls	r0, r2, #12
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
 80a1958:	f9b6 201e 	ldrsh.w	r2, [r6, #30]
 80a195c:	fb02 fe09 	mul.w	lr, r2, r9
 80a1960:	17d3      	asrs	r3, r2, #31
 80a1962:	fb08 ee03 	mla	lr, r8, r3, lr
 80a1966:	fba2 2308 	umull	r2, r3, r2, r8
 80a196a:	4473      	add	r3, lr
 80a196c:	ea4f 2a12 	mov.w	sl, r2, lsr #8
 80a1970:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
 80a1974:	eb1a 0a00 	adds.w	sl, sl, r0
 80a1978:	8b72      	ldrh	r2, [r6, #26]
 80a197a:	ea4f 2b23 	mov.w	fp, r3, asr #8
 80a197e:	eb4b 0b01 	adc.w	fp, fp, r1
 80a1982:	f11a 0000 	adds.w	r0, sl, #0
 80a1986:	f54b 4100 	adc.w	r1, fp, #32768	; 0x8000
 80a198a:	fba0 ab02 	umull	sl, fp, r0, r2
 80a198e:	fb02 bb01 	mla	fp, r2, r1, fp
 80a1992:	ea4f 026b 	mov.w	r2, fp, asr #1
 80a1996:	ea4f 73eb 	mov.w	r3, fp, asr #31

    if (var1 == 0) {
 80a199a:	ea52 0103 	orrs.w	r1, r2, r3
 80a199e:	f000 8083 	beq.w	80a1aa8 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
 80a19a2:	1138      	asrs	r0, r7, #4
 80a19a4:	f640 4735 	movw	r7, #3125	; 0xc35
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a19a8:	f9b6 a024 	ldrsh.w	sl, [r6, #36]	; 0x24

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
 80a19ac:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a19b0:	fb0a f109 	mul.w	r1, sl, r9
 80a19b4:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80a19b8:	fb08 110b 	mla	r1, r8, fp, r1
 80a19bc:	fbaa 8908 	umull	r8, r9, sl, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a19c0:	f9b6 a022 	ldrsh.w	sl, [r6, #34]	; 0x22
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
 80a19c4:	4489      	add	r9, r1
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
 80a19c6:	fb0a f105 	mul.w	r1, sl, r5
 80a19ca:	ea4f 7bea 	mov.w	fp, sl, asr #31
 80a19ce:	fb04 110b 	mla	r1, r4, fp, r1
 80a19d2:	fbaa 4504 	umull	r4, r5, sl, r4
 80a19d6:	440d      	add	r5, r1
 80a19d8:	ea4f 4b45 	mov.w	fp, r5, lsl #17
 80a19dc:	ea4f 4a44 	mov.w	sl, r4, lsl #17
 80a19e0:	eb1a 0a08 	adds.w	sl, sl, r8
 80a19e4:	ea4b 3bd4 	orr.w	fp, fp, r4, lsr #15
 80a19e8:	eb4b 0b09 	adc.w	fp, fp, r9

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
 80a19ec:	ea4f 79e0 	mov.w	r9, r0, asr #31
 80a19f0:	ea4f 75c9 	mov.w	r5, r9, lsl #31
 80a19f4:	ea45 0550 	orr.w	r5, r5, r0, lsr #1
 80a19f8:	07c4      	lsls	r4, r0, #31
 80a19fa:	f9b6 0020 	ldrsh.w	r0, [r6, #32]
 80a19fe:	f04f 0800 	mov.w	r8, #0
 80a1a02:	eb18 080a 	adds.w	r8, r8, sl
 80a1a06:	ea4f 09c0 	mov.w	r9, r0, lsl #3
 80a1a0a:	eb49 090b 	adc.w	r9, r9, fp
 80a1a0e:	ebb4 0408 	subs.w	r4, r4, r8
 80a1a12:	fba4 0107 	umull	r0, r1, r4, r7
 80a1a16:	eb65 0509 	sbc.w	r5, r5, r9
 80a1a1a:	fb07 1105 	mla	r1, r7, r5, r1
 80a1a1e:	f002 fd05 	bl	80a442c <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a1a22:	f9b6 202a 	ldrsh.w	r2, [r6, #42]	; 0x2a
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80a1a26:	134c      	asrs	r4, r1, #13
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a1a28:	fb02 f704 	mul.w	r7, r2, r4
    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
 80a1a2c:	0b45      	lsrs	r5, r0, #13
 80a1a2e:	ea45 45c1 	orr.w	r5, r5, r1, lsl #19
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a1a32:	17d3      	asrs	r3, r2, #31
 80a1a34:	fb05 7703 	mla	r7, r5, r3, r7
 80a1a38:	fba2 2305 	umull	r2, r3, r2, r5
 80a1a3c:	4354      	muls	r4, r2
 80a1a3e:	443b      	add	r3, r7
 80a1a40:	fb05 4403 	mla	r4, r5, r3, r4
 80a1a44:	fba2 2305 	umull	r2, r3, r2, r5
 80a1a48:	4423      	add	r3, r4
 80a1a4a:	0e54      	lsrs	r4, r2, #25
 80a1a4c:	ea44 14c3 	orr.w	r4, r4, r3, lsl #7
 80a1a50:	f9b6 2028 	ldrsh.w	r2, [r6, #40]	; 0x28
 80a1a54:	1824      	adds	r4, r4, r0
 80a1a56:	ea4f 6563 	mov.w	r5, r3, asr #25
 80a1a5a:	414d      	adcs	r5, r1
 80a1a5c:	4351      	muls	r1, r2
 80a1a5e:	17d3      	asrs	r3, r2, #31
 80a1a60:	fb00 1303 	mla	r3, r0, r3, r1
 80a1a64:	fba2 0100 	umull	r0, r1, r2, r0
 80a1a68:	4419      	add	r1, r3
 80a1a6a:	0cc2      	lsrs	r2, r0, #19
 80a1a6c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80a1a70:	1912      	adds	r2, r2, r4
    return (float)p/256;
 80a1a72:	f9b6 4026 	ldrsh.w	r4, [r6, #38]	; 0x26
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a1a76:	ea4f 43e1 	mov.w	r3, r1, asr #19
 80a1a7a:	416b      	adcs	r3, r5
 80a1a7c:	0a10      	lsrs	r0, r2, #8
    return (float)p/256;
 80a1a7e:	17e5      	asrs	r5, r4, #31
 80a1a80:	0122      	lsls	r2, r4, #4
    p = 1048576 - adc_P;
    p = (((p<<31) - var2)*3125) / var1;
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
 80a1a82:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80a1a86:	1219      	asrs	r1, r3, #8
    return (float)p/256;
 80a1a88:	012b      	lsls	r3, r5, #4
 80a1a8a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80a1a8e:	1880      	adds	r0, r0, r2
 80a1a90:	4159      	adcs	r1, r3
 80a1a92:	f002 fb3d 	bl	80a4110 <__aeabi_l2f>
 80a1a96:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80a1a9a:	f002 fb77 	bl	80a418c <__aeabi_fmul>
 80a1a9e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

    readTemperature(); // must be done first to get t_fine

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
        return NAN;
 80a1aa2:	4803      	ldr	r0, [pc, #12]	; (80a1ab0 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>)
 80a1aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;

    if (var1 == 0) {
        return 0; // avoid exception caused by division by zero
 80a1aa8:	2000      	movs	r0, #0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
    return (float)p/256;
}
 80a1aaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1aae:	bf00      	nop
 80a1ab0:	7fc00000 	.word	0x7fc00000

080a1ab4 <_ZN15Adafruit_BME28012readHumidityEv>:
/*!
    @brief  Returns the humidity from the sensor
    @returns the humidity value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readHumidity(void) {
 80a1ab4:	b510      	push	{r4, lr}
 80a1ab6:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
 80a1ab8:	f7ff fefc 	bl	80a18b4 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
 80a1abc:	21fd      	movs	r1, #253	; 0xfd
 80a1abe:	4620      	mov	r0, r4
 80a1ac0:	f7ff fd34 	bl	80a152c <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
 80a1ac4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80a1ac8:	d03a      	beq.n	80a1b40 <_ZN15Adafruit_BME28012readHumidityEv+0x8c>
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a1aca:	f9b4 3032 	ldrsh.w	r3, [r4, #50]	; 0x32
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
 80a1ace:	68e2      	ldr	r2, [r4, #12]

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a1ad0:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	; 0x34
 80a1ad4:	051b      	lsls	r3, r3, #20
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
        
    int32_t v_x1_u32r;

    v_x1_u32r = (t_fine - ((int32_t)76800));
 80a1ad6:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00

    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
 80a1ada:	ebc3 3380 	rsb	r3, r3, r0, lsl #14
 80a1ade:	fb02 3311 	mls	r3, r2, r1, r3
 80a1ae2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80a1ae6:	13d8      	asrs	r0, r3, #15
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
 80a1ae8:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 80a1aec:	f994 1036 	ldrsb.w	r1, [r4, #54]	; 0x36
 80a1af0:	4353      	muls	r3, r2
 80a1af2:	434a      	muls	r2, r1
 80a1af4:	12db      	asrs	r3, r3, #11
 80a1af6:	1292      	asrs	r2, r2, #10
 80a1af8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80a1afc:	4353      	muls	r3, r2
 80a1afe:	f9b4 202e 	ldrsh.w	r2, [r4, #46]	; 0x2e
 80a1b02:	129b      	asrs	r3, r3, #10
 80a1b04:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a1b08:	4353      	muls	r3, r2
 80a1b0a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80a1b0e:	139b      	asrs	r3, r3, #14
 80a1b10:	4343      	muls	r3, r0

    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
 80a1b12:	13d8      	asrs	r0, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
 80a1b14:	4340      	muls	r0, r0
 80a1b16:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80a1b1a:	11c0      	asrs	r0, r0, #7
 80a1b1c:	4350      	muls	r0, r2
 80a1b1e:	eba3 1020 	sub.w	r0, r3, r0, asr #4

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
 80a1b22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
 80a1b26:	f1b0 5fc8 	cmp.w	r0, #419430400	; 0x19000000
 80a1b2a:	bfa8      	it	ge
 80a1b2c:	f04f 50c8 	movge.w	r0, #419430400	; 0x19000000
 80a1b30:	1300      	asrs	r0, r0, #12
 80a1b32:	f002 fad7 	bl	80a40e4 <__aeabi_i2f>
 80a1b36:	f04f 516a 	mov.w	r1, #981467136	; 0x3a800000
 80a1b3a:	f002 fb27 	bl	80a418c <__aeabi_fmul>
 80a1b3e:	bd10      	pop	{r4, pc}
float Adafruit_BME280::readHumidity(void) {
    readTemperature(); // must be done first to get t_fine

    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
        return NAN;
 80a1b40:	4800      	ldr	r0, [pc, #0]	; (80a1b44 <_ZN15Adafruit_BME28012readHumidityEv+0x90>)

    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
    float h = (v_x1_u32r>>12);
    return  h / 1024.0;
}
 80a1b42:	bd10      	pop	{r4, pc}
 80a1b44:	7fc00000 	.word	0x7fc00000

080a1b48 <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
 80a1b48:	f000 b800 	b.w	80a1b4c <HAL_Pin_Map>

080a1b4c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1b4c:	b508      	push	{r3, lr}
 80a1b4e:	4b02      	ldr	r3, [pc, #8]	; (80a1b58 <HAL_Pin_Map+0xc>)
 80a1b50:	681b      	ldr	r3, [r3, #0]
 80a1b52:	681b      	ldr	r3, [r3, #0]
 80a1b54:	9301      	str	r3, [sp, #4]
 80a1b56:	bd08      	pop	{r3, pc}
 80a1b58:	080601b0 	.word	0x080601b0

080a1b5c <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1b5c:	b508      	push	{r3, lr}
 80a1b5e:	4b02      	ldr	r3, [pc, #8]	; (80a1b68 <HAL_Pin_Mode+0xc>)
 80a1b60:	681b      	ldr	r3, [r3, #0]
 80a1b62:	689b      	ldr	r3, [r3, #8]
 80a1b64:	9301      	str	r3, [sp, #4]
 80a1b66:	bd08      	pop	{r3, pc}
 80a1b68:	080601b0 	.word	0x080601b0

080a1b6c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a1b6c:	b508      	push	{r3, lr}
 80a1b6e:	4b02      	ldr	r3, [pc, #8]	; (80a1b78 <HAL_Get_Pin_Mode+0xc>)
 80a1b70:	681b      	ldr	r3, [r3, #0]
 80a1b72:	68db      	ldr	r3, [r3, #12]
 80a1b74:	9301      	str	r3, [sp, #4]
 80a1b76:	bd08      	pop	{r3, pc}
 80a1b78:	080601b0 	.word	0x080601b0

080a1b7c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a1b7c:	b508      	push	{r3, lr}
 80a1b7e:	4b02      	ldr	r3, [pc, #8]	; (80a1b88 <HAL_GPIO_Write+0xc>)
 80a1b80:	681b      	ldr	r3, [r3, #0]
 80a1b82:	691b      	ldr	r3, [r3, #16]
 80a1b84:	9301      	str	r3, [sp, #4]
 80a1b86:	bd08      	pop	{r3, pc}
 80a1b88:	080601b0 	.word	0x080601b0

080a1b8c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1b8c:	b508      	push	{r3, lr}
 80a1b8e:	4b02      	ldr	r3, [pc, #8]	; (80a1b98 <HAL_GPIO_Read+0xc>)
 80a1b90:	681b      	ldr	r3, [r3, #0]
 80a1b92:	695b      	ldr	r3, [r3, #20]
 80a1b94:	9301      	str	r3, [sp, #4]
 80a1b96:	bd08      	pop	{r3, pc}
 80a1b98:	080601b0 	.word	0x080601b0

080a1b9c <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 80a1b9c:	b508      	push	{r3, lr}
 80a1b9e:	4b02      	ldr	r3, [pc, #8]	; (80a1ba8 <HAL_SPI_Begin+0xc>)
 80a1ba0:	681b      	ldr	r3, [r3, #0]
 80a1ba2:	681b      	ldr	r3, [r3, #0]
 80a1ba4:	9301      	str	r3, [sp, #4]
 80a1ba6:	bd08      	pop	{r3, pc}
 80a1ba8:	080601b4 	.word	0x080601b4

080a1bac <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80a1bac:	b508      	push	{r3, lr}
 80a1bae:	4b02      	ldr	r3, [pc, #8]	; (80a1bb8 <HAL_SPI_Send_Receive_Data+0xc>)
 80a1bb0:	681b      	ldr	r3, [r3, #0]
 80a1bb2:	695b      	ldr	r3, [r3, #20]
 80a1bb4:	9301      	str	r3, [sp, #4]
 80a1bb6:	bd08      	pop	{r3, pc}
 80a1bb8:	080601b4 	.word	0x080601b4

080a1bbc <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1bbc:	b508      	push	{r3, lr}
 80a1bbe:	4b02      	ldr	r3, [pc, #8]	; (80a1bc8 <HAL_SPI_Init+0xc>)
 80a1bc0:	681b      	ldr	r3, [r3, #0]
 80a1bc2:	69db      	ldr	r3, [r3, #28]
 80a1bc4:	9301      	str	r3, [sp, #4]
 80a1bc6:	bd08      	pop	{r3, pc}
 80a1bc8:	080601b4 	.word	0x080601b4

080a1bcc <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1bcc:	b508      	push	{r3, lr}
 80a1bce:	4b02      	ldr	r3, [pc, #8]	; (80a1bd8 <HAL_SPI_Is_Enabled+0xc>)
 80a1bd0:	681b      	ldr	r3, [r3, #0]
 80a1bd2:	6a1b      	ldr	r3, [r3, #32]
 80a1bd4:	9301      	str	r3, [sp, #4]
 80a1bd6:	bd08      	pop	{r3, pc}
 80a1bd8:	080601b4 	.word	0x080601b4

080a1bdc <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80a1bdc:	b508      	push	{r3, lr}
 80a1bde:	4b02      	ldr	r3, [pc, #8]	; (80a1be8 <HAL_SPI_Info+0xc>)
 80a1be0:	681b      	ldr	r3, [r3, #0]
 80a1be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1be4:	9301      	str	r3, [sp, #4]
 80a1be6:	bd08      	pop	{r3, pc}
 80a1be8:	080601b4 	.word	0x080601b4

080a1bec <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80a1bec:	b508      	push	{r3, lr}
 80a1bee:	4b02      	ldr	r3, [pc, #8]	; (80a1bf8 <HAL_SPI_Set_Settings+0xc>)
 80a1bf0:	681b      	ldr	r3, [r3, #0]
 80a1bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1bf4:	9301      	str	r3, [sp, #4]
 80a1bf6:	bd08      	pop	{r3, pc}
 80a1bf8:	080601b4 	.word	0x080601b4

080a1bfc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1bfc:	b508      	push	{r3, lr}
 80a1bfe:	4b02      	ldr	r3, [pc, #8]	; (80a1c08 <HAL_RNG_GetRandomNumber+0xc>)
 80a1c00:	681b      	ldr	r3, [r3, #0]
 80a1c02:	685b      	ldr	r3, [r3, #4]
 80a1c04:	9301      	str	r3, [sp, #4]
 80a1c06:	bd08      	pop	{r3, pc}
 80a1c08:	0806019c 	.word	0x0806019c

080a1c0c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1c0c:	b508      	push	{r3, lr}
 80a1c0e:	4b02      	ldr	r3, [pc, #8]	; (80a1c18 <HAL_Delay_Microseconds+0xc>)
 80a1c10:	681b      	ldr	r3, [r3, #0]
 80a1c12:	68db      	ldr	r3, [r3, #12]
 80a1c14:	9301      	str	r3, [sp, #4]
 80a1c16:	bd08      	pop	{r3, pc}
 80a1c18:	0806019c 	.word	0x0806019c

080a1c1c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1c1c:	b508      	push	{r3, lr}
 80a1c1e:	4b02      	ldr	r3, [pc, #8]	; (80a1c28 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1c20:	681b      	ldr	r3, [r3, #0]
 80a1c22:	695b      	ldr	r3, [r3, #20]
 80a1c24:	9301      	str	r3, [sp, #4]
 80a1c26:	bd08      	pop	{r3, pc}
 80a1c28:	0806019c 	.word	0x0806019c

080a1c2c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1c2c:	b508      	push	{r3, lr}
 80a1c2e:	4b02      	ldr	r3, [pc, #8]	; (80a1c38 <os_mutex_create+0xc>)
 80a1c30:	681b      	ldr	r3, [r3, #0]
 80a1c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1c34:	9301      	str	r3, [sp, #4]
 80a1c36:	bd08      	pop	{r3, pc}
 80a1c38:	080601d0 	.word	0x080601d0

080a1c3c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 80a1c3c:	b508      	push	{r3, lr}
 80a1c3e:	4b02      	ldr	r3, [pc, #8]	; (80a1c48 <os_mutex_lock+0xc>)
 80a1c40:	681b      	ldr	r3, [r3, #0]
 80a1c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1c44:	9301      	str	r3, [sp, #4]
 80a1c46:	bd08      	pop	{r3, pc}
 80a1c48:	080601d0 	.word	0x080601d0

080a1c4c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80a1c4c:	b508      	push	{r3, lr}
 80a1c4e:	4b02      	ldr	r3, [pc, #8]	; (80a1c58 <os_mutex_unlock+0xc>)
 80a1c50:	681b      	ldr	r3, [r3, #0]
 80a1c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1c54:	9301      	str	r3, [sp, #4]
 80a1c56:	bd08      	pop	{r3, pc}
 80a1c58:	080601d0 	.word	0x080601d0

080a1c5c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1c5c:	b508      	push	{r3, lr}
 80a1c5e:	4b02      	ldr	r3, [pc, #8]	; (80a1c68 <HAL_USART_Init+0xc>)
 80a1c60:	681b      	ldr	r3, [r3, #0]
 80a1c62:	699b      	ldr	r3, [r3, #24]
 80a1c64:	9301      	str	r3, [sp, #4]
 80a1c66:	bd08      	pop	{r3, pc}
 80a1c68:	080601c4 	.word	0x080601c4

080a1c6c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1c6c:	b508      	push	{r3, lr}
 80a1c6e:	4b02      	ldr	r3, [pc, #8]	; (80a1c78 <HAL_USART_Write_Data+0xc>)
 80a1c70:	681b      	ldr	r3, [r3, #0]
 80a1c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1c74:	9301      	str	r3, [sp, #4]
 80a1c76:	bd08      	pop	{r3, pc}
 80a1c78:	080601c4 	.word	0x080601c4

080a1c7c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1c7c:	b508      	push	{r3, lr}
 80a1c7e:	4b02      	ldr	r3, [pc, #8]	; (80a1c88 <HAL_USART_Available_Data+0xc>)
 80a1c80:	681b      	ldr	r3, [r3, #0]
 80a1c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1c84:	9301      	str	r3, [sp, #4]
 80a1c86:	bd08      	pop	{r3, pc}
 80a1c88:	080601c4 	.word	0x080601c4

080a1c8c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1c8c:	b508      	push	{r3, lr}
 80a1c8e:	4b02      	ldr	r3, [pc, #8]	; (80a1c98 <HAL_USART_Read_Data+0xc>)
 80a1c90:	681b      	ldr	r3, [r3, #0]
 80a1c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1c94:	9301      	str	r3, [sp, #4]
 80a1c96:	bd08      	pop	{r3, pc}
 80a1c98:	080601c4 	.word	0x080601c4

080a1c9c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1c9c:	b508      	push	{r3, lr}
 80a1c9e:	4b02      	ldr	r3, [pc, #8]	; (80a1ca8 <HAL_USART_Peek_Data+0xc>)
 80a1ca0:	681b      	ldr	r3, [r3, #0]
 80a1ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1ca4:	9301      	str	r3, [sp, #4]
 80a1ca6:	bd08      	pop	{r3, pc}
 80a1ca8:	080601c4 	.word	0x080601c4

080a1cac <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1cac:	b508      	push	{r3, lr}
 80a1cae:	4b02      	ldr	r3, [pc, #8]	; (80a1cb8 <HAL_USART_Flush_Data+0xc>)
 80a1cb0:	681b      	ldr	r3, [r3, #0]
 80a1cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1cb4:	9301      	str	r3, [sp, #4]
 80a1cb6:	bd08      	pop	{r3, pc}
 80a1cb8:	080601c4 	.word	0x080601c4

080a1cbc <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1cbc:	b508      	push	{r3, lr}
 80a1cbe:	4b02      	ldr	r3, [pc, #8]	; (80a1cc8 <HAL_USART_Is_Enabled+0xc>)
 80a1cc0:	681b      	ldr	r3, [r3, #0]
 80a1cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1cc4:	9301      	str	r3, [sp, #4]
 80a1cc6:	bd08      	pop	{r3, pc}
 80a1cc8:	080601c4 	.word	0x080601c4

080a1ccc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1ccc:	b508      	push	{r3, lr}
 80a1cce:	4b02      	ldr	r3, [pc, #8]	; (80a1cd8 <HAL_USART_Available_Data_For_Write+0xc>)
 80a1cd0:	681b      	ldr	r3, [r3, #0]
 80a1cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1cd4:	9301      	str	r3, [sp, #4]
 80a1cd6:	bd08      	pop	{r3, pc}
 80a1cd8:	080601c4 	.word	0x080601c4

080a1cdc <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1cdc:	b508      	push	{r3, lr}
 80a1cde:	4b02      	ldr	r3, [pc, #8]	; (80a1ce8 <HAL_I2C_Begin+0xc>)
 80a1ce0:	681b      	ldr	r3, [r3, #0]
 80a1ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1ce4:	9301      	str	r3, [sp, #4]
 80a1ce6:	bd08      	pop	{r3, pc}
 80a1ce8:	080601ac 	.word	0x080601ac

080a1cec <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1cec:	b508      	push	{r3, lr}
 80a1cee:	4b02      	ldr	r3, [pc, #8]	; (80a1cf8 <HAL_I2C_Request_Data+0xc>)
 80a1cf0:	681b      	ldr	r3, [r3, #0]
 80a1cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1cf4:	9301      	str	r3, [sp, #4]
 80a1cf6:	bd08      	pop	{r3, pc}
 80a1cf8:	080601ac 	.word	0x080601ac

080a1cfc <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1cfc:	b508      	push	{r3, lr}
 80a1cfe:	4b02      	ldr	r3, [pc, #8]	; (80a1d08 <HAL_I2C_Begin_Transmission+0xc>)
 80a1d00:	681b      	ldr	r3, [r3, #0]
 80a1d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1d04:	9301      	str	r3, [sp, #4]
 80a1d06:	bd08      	pop	{r3, pc}
 80a1d08:	080601ac 	.word	0x080601ac

080a1d0c <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1d0c:	b508      	push	{r3, lr}
 80a1d0e:	4b02      	ldr	r3, [pc, #8]	; (80a1d18 <HAL_I2C_End_Transmission+0xc>)
 80a1d10:	681b      	ldr	r3, [r3, #0]
 80a1d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1d14:	9301      	str	r3, [sp, #4]
 80a1d16:	bd08      	pop	{r3, pc}
 80a1d18:	080601ac 	.word	0x080601ac

080a1d1c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1d1c:	b508      	push	{r3, lr}
 80a1d1e:	4b02      	ldr	r3, [pc, #8]	; (80a1d28 <HAL_I2C_Write_Data+0xc>)
 80a1d20:	681b      	ldr	r3, [r3, #0]
 80a1d22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1d24:	9301      	str	r3, [sp, #4]
 80a1d26:	bd08      	pop	{r3, pc}
 80a1d28:	080601ac 	.word	0x080601ac

080a1d2c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d2c:	b508      	push	{r3, lr}
 80a1d2e:	4b02      	ldr	r3, [pc, #8]	; (80a1d38 <HAL_I2C_Available_Data+0xc>)
 80a1d30:	681b      	ldr	r3, [r3, #0]
 80a1d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1d34:	9301      	str	r3, [sp, #4]
 80a1d36:	bd08      	pop	{r3, pc}
 80a1d38:	080601ac 	.word	0x080601ac

080a1d3c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d3c:	b508      	push	{r3, lr}
 80a1d3e:	4b02      	ldr	r3, [pc, #8]	; (80a1d48 <HAL_I2C_Read_Data+0xc>)
 80a1d40:	681b      	ldr	r3, [r3, #0]
 80a1d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1d44:	9301      	str	r3, [sp, #4]
 80a1d46:	bd08      	pop	{r3, pc}
 80a1d48:	080601ac 	.word	0x080601ac

080a1d4c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d4c:	b508      	push	{r3, lr}
 80a1d4e:	4b02      	ldr	r3, [pc, #8]	; (80a1d58 <HAL_I2C_Peek_Data+0xc>)
 80a1d50:	681b      	ldr	r3, [r3, #0]
 80a1d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1d54:	9301      	str	r3, [sp, #4]
 80a1d56:	bd08      	pop	{r3, pc}
 80a1d58:	080601ac 	.word	0x080601ac

080a1d5c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1d5c:	b508      	push	{r3, lr}
 80a1d5e:	4b02      	ldr	r3, [pc, #8]	; (80a1d68 <HAL_I2C_Flush_Data+0xc>)
 80a1d60:	681b      	ldr	r3, [r3, #0]
 80a1d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1d64:	9301      	str	r3, [sp, #4]
 80a1d66:	bd08      	pop	{r3, pc}
 80a1d68:	080601ac 	.word	0x080601ac

080a1d6c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1d6c:	b508      	push	{r3, lr}
 80a1d6e:	4b02      	ldr	r3, [pc, #8]	; (80a1d78 <HAL_I2C_Is_Enabled+0xc>)
 80a1d70:	681b      	ldr	r3, [r3, #0]
 80a1d72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1d74:	9301      	str	r3, [sp, #4]
 80a1d76:	bd08      	pop	{r3, pc}
 80a1d78:	080601ac 	.word	0x080601ac

080a1d7c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1d7c:	b508      	push	{r3, lr}
 80a1d7e:	4b03      	ldr	r3, [pc, #12]	; (80a1d8c <HAL_I2C_Init+0x10>)
 80a1d80:	681b      	ldr	r3, [r3, #0]
 80a1d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1d86:	9301      	str	r3, [sp, #4]
 80a1d88:	bd08      	pop	{r3, pc}
 80a1d8a:	0000      	.short	0x0000
 80a1d8c:	080601ac 	.word	0x080601ac

080a1d90 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a1d90:	b508      	push	{r3, lr}
 80a1d92:	4b02      	ldr	r3, [pc, #8]	; (80a1d9c <socket_active_status+0xc>)
 80a1d94:	681b      	ldr	r3, [r3, #0]
 80a1d96:	681b      	ldr	r3, [r3, #0]
 80a1d98:	9301      	str	r3, [sp, #4]
 80a1d9a:	bd08      	pop	{r3, pc}
 80a1d9c:	080601bc 	.word	0x080601bc

080a1da0 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a1da0:	b508      	push	{r3, lr}
 80a1da2:	4b02      	ldr	r3, [pc, #8]	; (80a1dac <socket_handle_valid+0xc>)
 80a1da4:	681b      	ldr	r3, [r3, #0]
 80a1da6:	685b      	ldr	r3, [r3, #4]
 80a1da8:	9301      	str	r3, [sp, #4]
 80a1daa:	bd08      	pop	{r3, pc}
 80a1dac:	080601bc 	.word	0x080601bc

080a1db0 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a1db0:	b508      	push	{r3, lr}
 80a1db2:	4b02      	ldr	r3, [pc, #8]	; (80a1dbc <socket_create+0xc>)
 80a1db4:	681b      	ldr	r3, [r3, #0]
 80a1db6:	689b      	ldr	r3, [r3, #8]
 80a1db8:	9301      	str	r3, [sp, #4]
 80a1dba:	bd08      	pop	{r3, pc}
 80a1dbc:	080601bc 	.word	0x080601bc

080a1dc0 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a1dc0:	b508      	push	{r3, lr}
 80a1dc2:	4b02      	ldr	r3, [pc, #8]	; (80a1dcc <socket_connect+0xc>)
 80a1dc4:	681b      	ldr	r3, [r3, #0]
 80a1dc6:	68db      	ldr	r3, [r3, #12]
 80a1dc8:	9301      	str	r3, [sp, #4]
 80a1dca:	bd08      	pop	{r3, pc}
 80a1dcc:	080601bc 	.word	0x080601bc

080a1dd0 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a1dd0:	b508      	push	{r3, lr}
 80a1dd2:	4b02      	ldr	r3, [pc, #8]	; (80a1ddc <socket_receive+0xc>)
 80a1dd4:	681b      	ldr	r3, [r3, #0]
 80a1dd6:	691b      	ldr	r3, [r3, #16]
 80a1dd8:	9301      	str	r3, [sp, #4]
 80a1dda:	bd08      	pop	{r3, pc}
 80a1ddc:	080601bc 	.word	0x080601bc

080a1de0 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a1de0:	b508      	push	{r3, lr}
 80a1de2:	4b02      	ldr	r3, [pc, #8]	; (80a1dec <socket_close+0xc>)
 80a1de4:	681b      	ldr	r3, [r3, #0]
 80a1de6:	6a1b      	ldr	r3, [r3, #32]
 80a1de8:	9301      	str	r3, [sp, #4]
 80a1dea:	bd08      	pop	{r3, pc}
 80a1dec:	080601bc 	.word	0x080601bc

080a1df0 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a1df0:	b508      	push	{r3, lr}
 80a1df2:	4b02      	ldr	r3, [pc, #8]	; (80a1dfc <socket_handle_invalid+0xc>)
 80a1df4:	681b      	ldr	r3, [r3, #0]
 80a1df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1df8:	9301      	str	r3, [sp, #4]
 80a1dfa:	bd08      	pop	{r3, pc}
 80a1dfc:	080601bc 	.word	0x080601bc

080a1e00 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a1e00:	b508      	push	{r3, lr}
 80a1e02:	4b02      	ldr	r3, [pc, #8]	; (80a1e0c <socket_send_ex+0xc>)
 80a1e04:	681b      	ldr	r3, [r3, #0]
 80a1e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1e08:	9301      	str	r3, [sp, #4]
 80a1e0a:	bd08      	pop	{r3, pc}
 80a1e0c:	080601bc 	.word	0x080601bc

080a1e10 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1e10:	b508      	push	{r3, lr}
 80a1e12:	4b02      	ldr	r3, [pc, #8]	; (80a1e1c <HAL_USB_USART_Init+0xc>)
 80a1e14:	681b      	ldr	r3, [r3, #0]
 80a1e16:	681b      	ldr	r3, [r3, #0]
 80a1e18:	9301      	str	r3, [sp, #4]
 80a1e1a:	bd08      	pop	{r3, pc}
 80a1e1c:	080601d8 	.word	0x080601d8

080a1e20 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a1e20:	b508      	push	{r3, lr}
 80a1e22:	4b02      	ldr	r3, [pc, #8]	; (80a1e2c <HAL_USB_USART_Begin+0xc>)
 80a1e24:	681b      	ldr	r3, [r3, #0]
 80a1e26:	685b      	ldr	r3, [r3, #4]
 80a1e28:	9301      	str	r3, [sp, #4]
 80a1e2a:	bd08      	pop	{r3, pc}
 80a1e2c:	080601d8 	.word	0x080601d8

080a1e30 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1e30:	b508      	push	{r3, lr}
 80a1e32:	4b02      	ldr	r3, [pc, #8]	; (80a1e3c <HAL_USB_USART_Available_Data+0xc>)
 80a1e34:	681b      	ldr	r3, [r3, #0]
 80a1e36:	691b      	ldr	r3, [r3, #16]
 80a1e38:	9301      	str	r3, [sp, #4]
 80a1e3a:	bd08      	pop	{r3, pc}
 80a1e3c:	080601d8 	.word	0x080601d8

080a1e40 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1e40:	b508      	push	{r3, lr}
 80a1e42:	4b02      	ldr	r3, [pc, #8]	; (80a1e4c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1e44:	681b      	ldr	r3, [r3, #0]
 80a1e46:	695b      	ldr	r3, [r3, #20]
 80a1e48:	9301      	str	r3, [sp, #4]
 80a1e4a:	bd08      	pop	{r3, pc}
 80a1e4c:	080601d8 	.word	0x080601d8

080a1e50 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1e50:	b508      	push	{r3, lr}
 80a1e52:	4b02      	ldr	r3, [pc, #8]	; (80a1e5c <HAL_USB_USART_Receive_Data+0xc>)
 80a1e54:	681b      	ldr	r3, [r3, #0]
 80a1e56:	699b      	ldr	r3, [r3, #24]
 80a1e58:	9301      	str	r3, [sp, #4]
 80a1e5a:	bd08      	pop	{r3, pc}
 80a1e5c:	080601d8 	.word	0x080601d8

080a1e60 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1e60:	b508      	push	{r3, lr}
 80a1e62:	4b02      	ldr	r3, [pc, #8]	; (80a1e6c <HAL_USB_USART_Send_Data+0xc>)
 80a1e64:	681b      	ldr	r3, [r3, #0]
 80a1e66:	69db      	ldr	r3, [r3, #28]
 80a1e68:	9301      	str	r3, [sp, #4]
 80a1e6a:	bd08      	pop	{r3, pc}
 80a1e6c:	080601d8 	.word	0x080601d8

080a1e70 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1e70:	b508      	push	{r3, lr}
 80a1e72:	4b02      	ldr	r3, [pc, #8]	; (80a1e7c <HAL_USB_USART_Flush_Data+0xc>)
 80a1e74:	681b      	ldr	r3, [r3, #0]
 80a1e76:	6a1b      	ldr	r3, [r3, #32]
 80a1e78:	9301      	str	r3, [sp, #4]
 80a1e7a:	bd08      	pop	{r3, pc}
 80a1e7c:	080601d8 	.word	0x080601d8

080a1e80 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
 80a1e80:	b508      	push	{r3, lr}
 80a1e82:	4b02      	ldr	r3, [pc, #8]	; (80a1e8c <HAL_USB_USART_Is_Enabled+0xc>)
 80a1e84:	681b      	ldr	r3, [r3, #0]
 80a1e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1e88:	9301      	str	r3, [sp, #4]
 80a1e8a:	bd08      	pop	{r3, pc}
 80a1e8c:	080601d8 	.word	0x080601d8

080a1e90 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a1e90:	b508      	push	{r3, lr}
 80a1e92:	4b02      	ldr	r3, [pc, #8]	; (80a1e9c <HAL_NET_SetNetWatchDog+0xc>)
 80a1e94:	681b      	ldr	r3, [r3, #0]
 80a1e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a1e98:	9301      	str	r3, [sp, #4]
 80a1e9a:	bd08      	pop	{r3, pc}
 80a1e9c:	080601c0 	.word	0x080601c0

080a1ea0 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1ea0:	b508      	push	{r3, lr}
 80a1ea2:	4b02      	ldr	r3, [pc, #8]	; (80a1eac <inet_gethostbyname+0xc>)
 80a1ea4:	681b      	ldr	r3, [r3, #0]
 80a1ea6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1ea8:	9301      	str	r3, [sp, #4]
 80a1eaa:	bd08      	pop	{r3, pc}
 80a1eac:	080601c0 	.word	0x080601c0

080a1eb0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 80a1eb0:	b508      	push	{r3, lr}
 80a1eb2:	4b02      	ldr	r3, [pc, #8]	; (80a1ebc <panic_+0xc>)
 80a1eb4:	681b      	ldr	r3, [r3, #0]
 80a1eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1eb8:	9301      	str	r3, [sp, #4]
 80a1eba:	bd08      	pop	{r3, pc}
 80a1ebc:	080201a8 	.word	0x080201a8

080a1ec0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a1ec0:	b508      	push	{r3, lr}
 80a1ec2:	4b02      	ldr	r3, [pc, #8]	; (80a1ecc <log_message+0xc>)
 80a1ec4:	681b      	ldr	r3, [r3, #0]
 80a1ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a1ec8:	9301      	str	r3, [sp, #4]
 80a1eca:	bd08      	pop	{r3, pc}
 80a1ecc:	080201a8 	.word	0x080201a8

080a1ed0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1ed0:	b508      	push	{r3, lr}
 80a1ed2:	4b02      	ldr	r3, [pc, #8]	; (80a1edc <set_system_mode+0xc>)
 80a1ed4:	681b      	ldr	r3, [r3, #0]
 80a1ed6:	685b      	ldr	r3, [r3, #4]
 80a1ed8:	9301      	str	r3, [sp, #4]
 80a1eda:	bd08      	pop	{r3, pc}
 80a1edc:	080601a4 	.word	0x080601a4

080a1ee0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1ee0:	b508      	push	{r3, lr}
 80a1ee2:	4b02      	ldr	r3, [pc, #8]	; (80a1eec <system_delay_ms+0xc>)
 80a1ee4:	681b      	ldr	r3, [r3, #0]
 80a1ee6:	695b      	ldr	r3, [r3, #20]
 80a1ee8:	9301      	str	r3, [sp, #4]
 80a1eea:	bd08      	pop	{r3, pc}
 80a1eec:	080601a4 	.word	0x080601a4

080a1ef0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1ef0:	b508      	push	{r3, lr}
 80a1ef2:	4b03      	ldr	r3, [pc, #12]	; (80a1f00 <system_ctrl_set_app_request_handler+0x10>)
 80a1ef4:	681b      	ldr	r3, [r3, #0]
 80a1ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1efa:	9301      	str	r3, [sp, #4]
 80a1efc:	bd08      	pop	{r3, pc}
 80a1efe:	0000      	.short	0x0000
 80a1f00:	080601a4 	.word	0x080601a4

080a1f04 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1f04:	b508      	push	{r3, lr}
 80a1f06:	4b03      	ldr	r3, [pc, #12]	; (80a1f14 <system_ctrl_set_result+0x10>)
 80a1f08:	681b      	ldr	r3, [r3, #0]
 80a1f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1f0e:	9301      	str	r3, [sp, #4]
 80a1f10:	bd08      	pop	{r3, pc}
 80a1f12:	0000      	.short	0x0000
 80a1f14:	080601a4 	.word	0x080601a4

080a1f18 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f18:	b508      	push	{r3, lr}
 80a1f1a:	4b02      	ldr	r3, [pc, #8]	; (80a1f24 <network_connect+0xc>)
 80a1f1c:	681b      	ldr	r3, [r3, #0]
 80a1f1e:	685b      	ldr	r3, [r3, #4]
 80a1f20:	9301      	str	r3, [sp, #4]
 80a1f22:	bd08      	pop	{r3, pc}
 80a1f24:	080601c8 	.word	0x080601c8

080a1f28 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1f28:	b508      	push	{r3, lr}
 80a1f2a:	4b02      	ldr	r3, [pc, #8]	; (80a1f34 <network_connecting+0xc>)
 80a1f2c:	681b      	ldr	r3, [r3, #0]
 80a1f2e:	689b      	ldr	r3, [r3, #8]
 80a1f30:	9301      	str	r3, [sp, #4]
 80a1f32:	bd08      	pop	{r3, pc}
 80a1f34:	080601c8 	.word	0x080601c8

080a1f38 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1f38:	b508      	push	{r3, lr}
 80a1f3a:	4b02      	ldr	r3, [pc, #8]	; (80a1f44 <network_disconnect+0xc>)
 80a1f3c:	681b      	ldr	r3, [r3, #0]
 80a1f3e:	68db      	ldr	r3, [r3, #12]
 80a1f40:	9301      	str	r3, [sp, #4]
 80a1f42:	bd08      	pop	{r3, pc}
 80a1f44:	080601c8 	.word	0x080601c8

080a1f48 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1f48:	b508      	push	{r3, lr}
 80a1f4a:	4b02      	ldr	r3, [pc, #8]	; (80a1f54 <network_ready+0xc>)
 80a1f4c:	681b      	ldr	r3, [r3, #0]
 80a1f4e:	691b      	ldr	r3, [r3, #16]
 80a1f50:	9301      	str	r3, [sp, #4]
 80a1f52:	bd08      	pop	{r3, pc}
 80a1f54:	080601c8 	.word	0x080601c8

080a1f58 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f58:	b508      	push	{r3, lr}
 80a1f5a:	4b02      	ldr	r3, [pc, #8]	; (80a1f64 <network_on+0xc>)
 80a1f5c:	681b      	ldr	r3, [r3, #0]
 80a1f5e:	695b      	ldr	r3, [r3, #20]
 80a1f60:	9301      	str	r3, [sp, #4]
 80a1f62:	bd08      	pop	{r3, pc}
 80a1f64:	080601c8 	.word	0x080601c8

080a1f68 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1f68:	b508      	push	{r3, lr}
 80a1f6a:	4b02      	ldr	r3, [pc, #8]	; (80a1f74 <network_off+0xc>)
 80a1f6c:	681b      	ldr	r3, [r3, #0]
 80a1f6e:	699b      	ldr	r3, [r3, #24]
 80a1f70:	9301      	str	r3, [sp, #4]
 80a1f72:	bd08      	pop	{r3, pc}
 80a1f74:	080601c8 	.word	0x080601c8

080a1f78 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1f78:	b508      	push	{r3, lr}
 80a1f7a:	4b02      	ldr	r3, [pc, #8]	; (80a1f84 <network_listen+0xc>)
 80a1f7c:	681b      	ldr	r3, [r3, #0]
 80a1f7e:	69db      	ldr	r3, [r3, #28]
 80a1f80:	9301      	str	r3, [sp, #4]
 80a1f82:	bd08      	pop	{r3, pc}
 80a1f84:	080601c8 	.word	0x080601c8

080a1f88 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1f88:	b508      	push	{r3, lr}
 80a1f8a:	4b02      	ldr	r3, [pc, #8]	; (80a1f94 <network_listening+0xc>)
 80a1f8c:	681b      	ldr	r3, [r3, #0]
 80a1f8e:	6a1b      	ldr	r3, [r3, #32]
 80a1f90:	9301      	str	r3, [sp, #4]
 80a1f92:	bd08      	pop	{r3, pc}
 80a1f94:	080601c8 	.word	0x080601c8

080a1f98 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1f98:	b508      	push	{r3, lr}
 80a1f9a:	4b02      	ldr	r3, [pc, #8]	; (80a1fa4 <network_set_listen_timeout+0xc>)
 80a1f9c:	681b      	ldr	r3, [r3, #0]
 80a1f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1fa0:	9301      	str	r3, [sp, #4]
 80a1fa2:	bd08      	pop	{r3, pc}
 80a1fa4:	080601c8 	.word	0x080601c8

080a1fa8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1fa8:	b508      	push	{r3, lr}
 80a1faa:	4b02      	ldr	r3, [pc, #8]	; (80a1fb4 <network_get_listen_timeout+0xc>)
 80a1fac:	681b      	ldr	r3, [r3, #0]
 80a1fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1fb0:	9301      	str	r3, [sp, #4]
 80a1fb2:	bd08      	pop	{r3, pc}
 80a1fb4:	080601c8 	.word	0x080601c8

080a1fb8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1fb8:	b508      	push	{r3, lr}
 80a1fba:	4b02      	ldr	r3, [pc, #8]	; (80a1fc4 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1fbc:	681b      	ldr	r3, [r3, #0]
 80a1fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1fc0:	9301      	str	r3, [sp, #4]
 80a1fc2:	bd08      	pop	{r3, pc}
 80a1fc4:	080601cc 	.word	0x080601cc

080a1fc8 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1fc8:	b508      	push	{r3, lr}
 80a1fca:	4b02      	ldr	r3, [pc, #8]	; (80a1fd4 <malloc+0xc>)
 80a1fcc:	681b      	ldr	r3, [r3, #0]
 80a1fce:	681b      	ldr	r3, [r3, #0]
 80a1fd0:	9301      	str	r3, [sp, #4]
 80a1fd2:	bd08      	pop	{r3, pc}
 80a1fd4:	080601a0 	.word	0x080601a0

080a1fd8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1fd8:	b508      	push	{r3, lr}
 80a1fda:	4b02      	ldr	r3, [pc, #8]	; (80a1fe4 <free+0xc>)
 80a1fdc:	681b      	ldr	r3, [r3, #0]
 80a1fde:	685b      	ldr	r3, [r3, #4]
 80a1fe0:	9301      	str	r3, [sp, #4]
 80a1fe2:	bd08      	pop	{r3, pc}
 80a1fe4:	080601a0 	.word	0x080601a0

080a1fe8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1fe8:	b508      	push	{r3, lr}
 80a1fea:	4b02      	ldr	r3, [pc, #8]	; (80a1ff4 <realloc+0xc>)
 80a1fec:	681b      	ldr	r3, [r3, #0]
 80a1fee:	689b      	ldr	r3, [r3, #8]
 80a1ff0:	9301      	str	r3, [sp, #4]
 80a1ff2:	bd08      	pop	{r3, pc}
 80a1ff4:	080601a0 	.word	0x080601a0

080a1ff8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80a1ff8:	b508      	push	{r3, lr}
 80a1ffa:	4b02      	ldr	r3, [pc, #8]	; (80a2004 <sprintf+0xc>)
 80a1ffc:	681b      	ldr	r3, [r3, #0]
 80a1ffe:	68db      	ldr	r3, [r3, #12]
 80a2000:	9301      	str	r3, [sp, #4]
 80a2002:	bd08      	pop	{r3, pc}
 80a2004:	080601a0 	.word	0x080601a0

080a2008 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a2008:	b508      	push	{r3, lr}
 80a200a:	4b02      	ldr	r3, [pc, #8]	; (80a2014 <vsnprintf+0xc>)
 80a200c:	681b      	ldr	r3, [r3, #0]
 80a200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2010:	9301      	str	r3, [sp, #4]
 80a2012:	bd08      	pop	{r3, pc}
 80a2014:	080601a0 	.word	0x080601a0

080a2018 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2018:	4770      	bx	lr

080a201a <_ZN8SPIClassD0Ev>:
 80a201a:	b510      	push	{r4, lr}
 80a201c:	4604      	mov	r4, r0
 80a201e:	2110      	movs	r1, #16
 80a2020:	f001 f9ab 	bl	80a337a <_ZdlPvj>
 80a2024:	4620      	mov	r0, r4
 80a2026:	bd10      	pop	{r4, pc}

080a2028 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2028:	b570      	push	{r4, r5, r6, lr}
 80a202a:	4604      	mov	r4, r0
 80a202c:	460e      	mov	r6, r1
 80a202e:	4b07      	ldr	r3, [pc, #28]	; (80a204c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2030:	2500      	movs	r5, #0
 80a2032:	6003      	str	r3, [r0, #0]
 80a2034:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2038:	f7ff fdf8 	bl	80a1c2c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a203c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a203e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2040:	f7ff fdbc 	bl	80a1bbc <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a2044:	60a5      	str	r5, [r4, #8]
}
 80a2046:	4620      	mov	r0, r4
 80a2048:	bd70      	pop	{r4, r5, r6, pc}
 80a204a:	bf00      	nop
 80a204c:	080a4ed8 	.word	0x080a4ed8

080a2050 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 80a2050:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80a2054:	7900      	ldrb	r0, [r0, #4]
 80a2056:	f7ff bda1 	b.w	80a1b9c <HAL_SPI_Begin>

080a205a <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
 80a205a:	68c0      	ldr	r0, [r0, #12]
 80a205c:	f7ff bdf6 	b.w	80a1c4c <os_mutex_unlock>

080a2060 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2060:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80a2062:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80a2064:	6018      	str	r0, [r3, #0]
 80a2066:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80a2068:	6818      	ldr	r0, [r3, #0]
 80a206a:	b2e5      	uxtb	r5, r4
 80a206c:	4288      	cmp	r0, r1
 80a206e:	d906      	bls.n	80a207e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80a2070:	3401      	adds	r4, #1
 80a2072:	2c08      	cmp	r4, #8
 80a2074:	d002      	beq.n	80a207c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80a2076:	0840      	lsrs	r0, r0, #1
 80a2078:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80a207a:	e7f5      	b.n	80a2068 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80a207c:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80a207e:	4b02      	ldr	r3, [pc, #8]	; (80a2088 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80a2080:	5d5b      	ldrb	r3, [r3, r5]
 80a2082:	7013      	strb	r3, [r2, #0]
 80a2084:	bd30      	pop	{r4, r5, pc}
 80a2086:	bf00      	nop
 80a2088:	080a4ee0 	.word	0x080a4ee0

080a208c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 80a208c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2090:	4680      	mov	r8, r0
 80a2092:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
 80a2094:	68c0      	ldr	r0, [r0, #12]
 80a2096:	460f      	mov	r7, r1
 80a2098:	f7ff fdd0 	bl	80a1c3c <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
 80a209c:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80a20a0:	2214      	movs	r2, #20
 80a20a2:	2100      	movs	r1, #0
 80a20a4:	a809      	add	r0, sp, #36	; 0x24
 80a20a6:	f002 fba2 	bl	80a47ee <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80a20aa:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80a20ac:	4620      	mov	r0, r4
 80a20ae:	2200      	movs	r2, #0
 80a20b0:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80a20b2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
 80a20b6:	f7ff fd91 	bl	80a1bdc <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
 80a20ba:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 80a20be:	b14c      	cbz	r4, 80a20d4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 80a20c0:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a20c4:	b92d      	cbnz	r5, 80a20d2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 80a20c6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80a20c8:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 80a20cc:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 80a20d0:	e003      	b.n	80a20da <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 80a20d2:	2400      	movs	r4, #0
 80a20d4:	46a1      	mov	r9, r4
 80a20d6:	4626      	mov	r6, r4
 80a20d8:	2501      	movs	r5, #1
 80a20da:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a20dc:	b10d      	cbz	r5, 80a20e2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 80a20de:	2b00      	cmp	r3, #0
 80a20e0:	d140      	bne.n	80a2164 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
 80a20e2:	429d      	cmp	r5, r3
 80a20e4:	d10b      	bne.n	80a20fe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 80a20e6:	68ba      	ldr	r2, [r7, #8]
 80a20e8:	42b2      	cmp	r2, r6
 80a20ea:	d108      	bne.n	80a20fe <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a20ec:	f88d 9020 	strb.w	r9, [sp, #32]
 80a20f0:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a20f4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80a20f8:	89ba      	ldrh	r2, [r7, #12]
 80a20fa:	4291      	cmp	r1, r2
 80a20fc:	d032      	beq.n	80a2164 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
 80a20fe:	bb23      	cbnz	r3, 80a214a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
 80a2100:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
 80a2104:	f10d 020f 	add.w	r2, sp, #15
 80a2108:	ab04      	add	r3, sp, #16
 80a210a:	68b9      	ldr	r1, [r7, #8]
 80a210c:	980a      	ldr	r0, [sp, #40]	; 0x28
 80a210e:	f7ff ffa7 	bl	80a2060 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 80a2112:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 80a2114:	b105      	cbz	r5, 80a2118 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
 80a2116:	bb13      	cbnz	r3, 80a215e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
 80a2118:	42ab      	cmp	r3, r5
 80a211a:	d009      	beq.n	80a2130 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
 80a211c:	2100      	movs	r1, #0
 80a211e:	7b3b      	ldrb	r3, [r7, #12]
 80a2120:	9101      	str	r1, [sp, #4]
 80a2122:	7b7c      	ldrb	r4, [r7, #13]
 80a2124:	f89d 200f 	ldrb.w	r2, [sp, #15]
 80a2128:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a212c:	9400      	str	r4, [sp, #0]
 80a212e:	e013      	b.n	80a2158 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
 80a2130:	68bb      	ldr	r3, [r7, #8]
 80a2132:	42b3      	cmp	r3, r6
 80a2134:	d3f2      	bcc.n	80a211c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 80a2136:	f88d 9020 	strb.w	r9, [sp, #32]
 80a213a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 80a213e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80a2142:	89bb      	ldrh	r3, [r7, #12]
 80a2144:	429a      	cmp	r2, r3
 80a2146:	d1e9      	bne.n	80a211c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
 80a2148:	e009      	b.n	80a215e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
 80a214a:	2300      	movs	r3, #0
 80a214c:	461a      	mov	r2, r3
 80a214e:	f898 0004 	ldrb.w	r0, [r8, #4]
 80a2152:	9301      	str	r3, [sp, #4]
 80a2154:	9300      	str	r3, [sp, #0]
 80a2156:	2101      	movs	r1, #1
 80a2158:	f7ff fd48 	bl	80a1bec <HAL_SPI_Set_Settings>
 80a215c:	e002      	b.n	80a2164 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
 80a215e:	9b04      	ldr	r3, [sp, #16]
 80a2160:	42b3      	cmp	r3, r6
 80a2162:	d1db      	bne.n	80a211c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
 80a2164:	2000      	movs	r0, #0
 80a2166:	b00f      	add	sp, #60	; 0x3c
 80a2168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080a216c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 80a216c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 80a216e:	7900      	ldrb	r0, [r0, #4]
 80a2170:	f7ff fd1c 	bl	80a1bac <HAL_SPI_Send_Receive_Data>
}
 80a2174:	b2c0      	uxtb	r0, r0
 80a2176:	bd08      	pop	{r3, pc}

080a2178 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2178:	7900      	ldrb	r0, [r0, #4]
 80a217a:	f7ff bd27 	b.w	80a1bcc <HAL_SPI_Is_Enabled>
	...

080a2180 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2184:	4b03      	ldr	r3, [pc, #12]	; (80a2194 <_GLOBAL__sub_I_System+0x14>)
 80a2186:	2000      	movs	r0, #0
 80a2188:	7018      	strb	r0, [r3, #0]
 80a218a:	8058      	strh	r0, [r3, #2]
 80a218c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a218e:	f7ff be9f 	b.w	80a1ed0 <set_system_mode>
 80a2192:	bf00      	nop
 80a2194:	20000550 	.word	0x20000550

080a2198 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2198:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a219a:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a219c:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a219e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a21a2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a21a4:	2201      	movs	r2, #1
 80a21a6:	f247 5330 	movw	r3, #30000	; 0x7530
 80a21aa:	4621      	mov	r1, r4
 80a21ac:	47a8      	blx	r5
}
 80a21ae:	b003      	add	sp, #12
 80a21b0:	bd30      	pop	{r4, r5, pc}

080a21b2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a21b2:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a21b4:	6803      	ldr	r3, [r0, #0]
 80a21b6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a21b8:	f247 5330 	movw	r3, #30000	; 0x7530
 80a21bc:	46a4      	mov	ip, r4
}
 80a21be:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a21c0:	4760      	bx	ip

080a21c2 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a21c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a21c4:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a21c6:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a21c8:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a21cc:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a21ce:	4621      	mov	r1, r4
 80a21d0:	4613      	mov	r3, r2
 80a21d2:	2201      	movs	r2, #1
 80a21d4:	47a8      	blx	r5
}
 80a21d6:	b003      	add	sp, #12
 80a21d8:	bd30      	pop	{r4, r5, pc}

080a21da <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a21da:	4770      	bx	lr

080a21dc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a21dc:	4770      	bx	lr

080a21de <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a21de:	2000      	movs	r0, #0
 80a21e0:	4770      	bx	lr

080a21e2 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a21e2:	b510      	push	{r4, lr}
 80a21e4:	4604      	mov	r4, r0
 80a21e6:	2114      	movs	r1, #20
 80a21e8:	f001 f8c7 	bl	80a337a <_ZdlPvj>
 80a21ec:	4620      	mov	r0, r4
 80a21ee:	bd10      	pop	{r4, pc}

080a21f0 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a21f0:	f7fd bf57 	b.w	80a00a2 <_ZdlPv>

080a21f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a21f4:	b510      	push	{r4, lr}
 80a21f6:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a21f8:	6803      	ldr	r3, [r0, #0]
 80a21fa:	689b      	ldr	r3, [r3, #8]
 80a21fc:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a21fe:	68a3      	ldr	r3, [r4, #8]
 80a2200:	3b01      	subs	r3, #1
 80a2202:	60a3      	str	r3, [r4, #8]
 80a2204:	b92b      	cbnz	r3, 80a2212 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80a2206:	6823      	ldr	r3, [r4, #0]
 80a2208:	4620      	mov	r0, r4
        }
    }
 80a220a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a220e:	68db      	ldr	r3, [r3, #12]
 80a2210:	4718      	bx	r3
 80a2212:	bd10      	pop	{r4, pc}

080a2214 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a2214:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a2216:	4604      	mov	r4, r0
 80a2218:	4606      	mov	r6, r0
 80a221a:	694d      	ldr	r5, [r1, #20]
 80a221c:	4b04      	ldr	r3, [pc, #16]	; (80a2230 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a221e:	358c      	adds	r5, #140	; 0x8c
 80a2220:	f844 3b04 	str.w	r3, [r4], #4
 80a2224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2228:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a222a:	4630      	mov	r0, r6
 80a222c:	7023      	strb	r3, [r4, #0]
 80a222e:	bd70      	pop	{r4, r5, r6, pc}
 80a2230:	080a508c 	.word	0x080a508c

080a2234 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a2234:	b510      	push	{r4, lr}
 80a2236:	6943      	ldr	r3, [r0, #20]
 80a2238:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a223a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a223e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2242:	429a      	cmp	r2, r3
 80a2244:	d005      	beq.n	80a2252 <_ZN9TCPClient4peekEv+0x1e>
 80a2246:	6962      	ldr	r2, [r4, #20]
 80a2248:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a224c:	4413      	add	r3, r2
 80a224e:	7918      	ldrb	r0, [r3, #4]
 80a2250:	bd10      	pop	{r4, pc}
 80a2252:	6803      	ldr	r3, [r0, #0]
 80a2254:	691b      	ldr	r3, [r3, #16]
 80a2256:	4798      	blx	r3
 80a2258:	2800      	cmp	r0, #0
 80a225a:	d1f4      	bne.n	80a2246 <_ZN9TCPClient4peekEv+0x12>
 80a225c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a2260:	bd10      	pop	{r4, pc}

080a2262 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a2262:	b510      	push	{r4, lr}
 80a2264:	6943      	ldr	r3, [r0, #20]
 80a2266:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a2268:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a226c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2270:	429a      	cmp	r2, r3
 80a2272:	d008      	beq.n	80a2286 <_ZN9TCPClient4readEv+0x24>
 80a2274:	6962      	ldr	r2, [r4, #20]
 80a2276:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a227a:	1c59      	adds	r1, r3, #1
 80a227c:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a2280:	4413      	add	r3, r2
 80a2282:	7918      	ldrb	r0, [r3, #4]
 80a2284:	bd10      	pop	{r4, pc}
 80a2286:	6803      	ldr	r3, [r0, #0]
 80a2288:	691b      	ldr	r3, [r3, #16]
 80a228a:	4798      	blx	r3
 80a228c:	2800      	cmp	r0, #0
 80a228e:	d1f1      	bne.n	80a2274 <_ZN9TCPClient4readEv+0x12>
 80a2290:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a2294:	bd10      	pop	{r4, pc}

080a2296 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2298:	6943      	ldr	r3, [r0, #20]
 80a229a:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a229c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a22a0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a22a4:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a22a6:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a22a8:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a22aa:	d106      	bne.n	80a22ba <_ZN9TCPClient4readEPhj+0x24>
 80a22ac:	6803      	ldr	r3, [r0, #0]
 80a22ae:	691b      	ldr	r3, [r3, #16]
 80a22b0:	4798      	blx	r3
 80a22b2:	b910      	cbnz	r0, 80a22ba <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a22b4:	f04f 34ff 	mov.w	r4, #4294967295
 80a22b8:	e014      	b.n	80a22e4 <_ZN9TCPClient4readEPhj+0x4e>
 80a22ba:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a22bc:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a22be:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a22c2:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a22c6:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a22c8:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a22ca:	42bc      	cmp	r4, r7
 80a22cc:	bf28      	it	cs
 80a22ce:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a22d0:	3104      	adds	r1, #4
 80a22d2:	4622      	mov	r2, r4
 80a22d4:	f002 fa80 	bl	80a47d8 <memcpy>
 80a22d8:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a22da:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a22de:	4423      	add	r3, r4
 80a22e0:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a22e4:	4620      	mov	r0, r4
 80a22e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a22e8 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a22e8:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a22ea:	2300      	movs	r3, #0
 80a22ec:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a22f0:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a22f2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a22f6:	4770      	bx	lr

080a22f8 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a22f8:	b538      	push	{r3, r4, r5, lr}
 80a22fa:	6942      	ldr	r2, [r0, #20]
 80a22fc:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a22fe:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2302:	b11b      	cbz	r3, 80a230c <_ZN9TCPClient9availableEv+0x14>
 80a2304:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a2308:	429a      	cmp	r2, r3
 80a230a:	d00c      	beq.n	80a2326 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a230c:	6920      	ldr	r0, [r4, #16]
 80a230e:	f000 ff5d 	bl	80a31cc <_ZN5spark12NetworkClass4fromEm>
 80a2312:	6803      	ldr	r3, [r0, #0]
 80a2314:	68db      	ldr	r3, [r3, #12]
 80a2316:	4798      	blx	r3
 80a2318:	b318      	cbz	r0, 80a2362 <_ZN9TCPClient9availableEv+0x6a>
 80a231a:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a231c:	6818      	ldr	r0, [r3, #0]
 80a231e:	f7ff fd3f 	bl	80a1da0 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a2322:	b918      	cbnz	r0, 80a232c <_ZN9TCPClient9availableEv+0x34>
 80a2324:	e01d      	b.n	80a2362 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a2326:	f7ff ffdf 	bl	80a22e8 <_ZN9TCPClient12flush_bufferEv>
 80a232a:	e7ef      	b.n	80a230c <_ZN9TCPClient9availableEv+0x14>
 80a232c:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a232e:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a2332:	297f      	cmp	r1, #127	; 0x7f
 80a2334:	d815      	bhi.n	80a2362 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a2336:	1d05      	adds	r5, r0, #4
 80a2338:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a233c:	2300      	movs	r3, #0
 80a233e:	4429      	add	r1, r5
 80a2340:	6800      	ldr	r0, [r0, #0]
 80a2342:	f7ff fd45 	bl	80a1dd0 <socket_receive>
            if (ret > 0)
 80a2346:	2800      	cmp	r0, #0
 80a2348:	dd0b      	ble.n	80a2362 <_ZN9TCPClient9availableEv+0x6a>
 80a234a:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a234c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2350:	b90a      	cbnz	r2, 80a2356 <_ZN9TCPClient9availableEv+0x5e>
 80a2352:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a2356:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a2358:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a235c:	4418      	add	r0, r3
 80a235e:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a2362:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a2364:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2368:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a236c:	1a18      	subs	r0, r3, r0
}
 80a236e:	bd38      	pop	{r3, r4, r5, pc}

080a2370 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a2370:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a2372:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a2374:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2376:	6818      	ldr	r0, [r3, #0]
 80a2378:	f7ff fd12 	bl	80a1da0 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a237c:	b118      	cbz	r0, 80a2386 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a237e:	6963      	ldr	r3, [r4, #20]
 80a2380:	6818      	ldr	r0, [r3, #0]
 80a2382:	f7ff fd2d 	bl	80a1de0 <socket_close>
 80a2386:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a2388:	f7ff fd32 	bl	80a1df0 <socket_handle_invalid>
 80a238c:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a238e:	6960      	ldr	r0, [r4, #20]
 80a2390:	2211      	movs	r2, #17
 80a2392:	2100      	movs	r1, #0
 80a2394:	308c      	adds	r0, #140	; 0x8c
 80a2396:	f002 fa2a 	bl	80a47ee <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a239a:	4620      	mov	r0, r4
}
 80a239c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a23a0:	f7ff bfa2 	b.w	80a22e8 <_ZN9TCPClient12flush_bufferEv>

080a23a4 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a23a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a23a8:	461f      	mov	r7, r3
    stop();
 80a23aa:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a23ac:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a23ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a23b0:	4606      	mov	r6, r0
 80a23b2:	460c      	mov	r4, r1
 80a23b4:	4615      	mov	r5, r2
    stop();
 80a23b6:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a23b8:	4638      	mov	r0, r7
 80a23ba:	f000 ff07 	bl	80a31cc <_ZN5spark12NetworkClass4fromEm>
 80a23be:	6803      	ldr	r3, [r0, #0]
 80a23c0:	68db      	ldr	r3, [r3, #12]
 80a23c2:	4798      	blx	r3
 80a23c4:	2800      	cmp	r0, #0
 80a23c6:	d056      	beq.n	80a2476 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a23c8:	9700      	str	r7, [sp, #0]
 80a23ca:	462b      	mov	r3, r5
 80a23cc:	2206      	movs	r2, #6
 80a23ce:	2101      	movs	r1, #1
 80a23d0:	2002      	movs	r0, #2
 80a23d2:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a23d6:	f7ff fceb 	bl	80a1db0 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a23da:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a23dc:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a23e0:	2700      	movs	r7, #0
 80a23e2:	9302      	str	r3, [sp, #8]
 80a23e4:	6973      	ldr	r3, [r6, #20]
 80a23e6:	9703      	str	r7, [sp, #12]
 80a23e8:	681b      	ldr	r3, [r3, #0]
 80a23ea:	2001      	movs	r0, #1
 80a23ec:	9301      	str	r3, [sp, #4]
 80a23ee:	4b23      	ldr	r3, [pc, #140]	; (80a247c <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a23f0:	aa02      	add	r2, sp, #8
 80a23f2:	9300      	str	r3, [sp, #0]
 80a23f4:	4922      	ldr	r1, [pc, #136]	; (80a2480 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a23f6:	463b      	mov	r3, r7
 80a23f8:	f7ff fd62 	bl	80a1ec0 <log_message>

          if (socket_handle_valid(d_->sock))
 80a23fc:	6973      	ldr	r3, [r6, #20]
 80a23fe:	6818      	ldr	r0, [r3, #0]
 80a2400:	f7ff fcce 	bl	80a1da0 <socket_handle_valid>
 80a2404:	2800      	cmp	r0, #0
 80a2406:	d036      	beq.n	80a2476 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a2408:	4630      	mov	r0, r6
 80a240a:	f7ff ff6d 	bl	80a22e8 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a240e:	2302      	movs	r3, #2
 80a2410:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a2414:	0a2b      	lsrs	r3, r5, #8
 80a2416:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a241a:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a241c:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a2420:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a2424:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a2426:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a242a:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a242e:	7963      	ldrb	r3, [r4, #5]
 80a2430:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a2434:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a2438:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a243c:	f7ff fd28 	bl	80a1e90 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2440:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2442:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2444:	2210      	movs	r2, #16
 80a2446:	a902      	add	r1, sp, #8
 80a2448:	6818      	ldr	r0, [r3, #0]
 80a244a:	f7ff fcb9 	bl	80a1dc0 <socket_connect>
 80a244e:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a2450:	4628      	mov	r0, r5
 80a2452:	f7ff fd1d 	bl	80a1e90 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a2456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2458:	6975      	ldr	r5, [r6, #20]
 80a245a:	358c      	adds	r5, #140	; 0x8c
 80a245c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a245e:	6823      	ldr	r3, [r4, #0]
 80a2460:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a2462:	f1b8 0f00 	cmp.w	r8, #0
 80a2466:	d005      	beq.n	80a2474 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a2468:	6833      	ldr	r3, [r6, #0]
 80a246a:	4630      	mov	r0, r6
 80a246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a246e:	4798      	blx	r3
 80a2470:	4638      	mov	r0, r7
 80a2472:	e000      	b.n	80a2476 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a2474:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a2476:	b00a      	add	sp, #40	; 0x28
 80a2478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a247c:	080a4f57 	.word	0x080a4f57
 80a2480:	080a4f50 	.word	0x080a4f50

080a2484 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a2484:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a2486:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a2488:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a248a:	6818      	ldr	r0, [r3, #0]
 80a248c:	f7ff fc88 	bl	80a1da0 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a2490:	b908      	cbnz	r0, 80a2496 <_ZN9TCPClient6statusEv+0x12>
 80a2492:	2000      	movs	r0, #0
 80a2494:	bd10      	pop	{r4, pc}
 80a2496:	6920      	ldr	r0, [r4, #16]
 80a2498:	f000 fe98 	bl	80a31cc <_ZN5spark12NetworkClass4fromEm>
 80a249c:	6803      	ldr	r3, [r0, #0]
 80a249e:	68db      	ldr	r3, [r3, #12]
 80a24a0:	4798      	blx	r3
 80a24a2:	2800      	cmp	r0, #0
 80a24a4:	d0f5      	beq.n	80a2492 <_ZN9TCPClient6statusEv+0xe>
 80a24a6:	6963      	ldr	r3, [r4, #20]
 80a24a8:	6818      	ldr	r0, [r3, #0]
 80a24aa:	f7ff fc71 	bl	80a1d90 <socket_active_status>
 80a24ae:	fab0 f080 	clz	r0, r0
 80a24b2:	0940      	lsrs	r0, r0, #5
}
 80a24b4:	bd10      	pop	{r4, pc}

080a24b6 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a24b6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a24ba:	2500      	movs	r5, #0
 80a24bc:	6045      	str	r5, [r0, #4]
 80a24be:	4604      	mov	r4, r0
 80a24c0:	460e      	mov	r6, r1
 80a24c2:	4617      	mov	r7, r2
 80a24c4:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a24c6:	f7ff ffdd 	bl	80a2484 <_ZN9TCPClient6statusEv>
 80a24ca:	b160      	cbz	r0, 80a24e6 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a24cc:	6960      	ldr	r0, [r4, #20]
 80a24ce:	9501      	str	r5, [sp, #4]
 80a24d0:	f8cd 8000 	str.w	r8, [sp]
 80a24d4:	462b      	mov	r3, r5
 80a24d6:	463a      	mov	r2, r7
 80a24d8:	4631      	mov	r1, r6
 80a24da:	6800      	ldr	r0, [r0, #0]
 80a24dc:	f7ff fc90 	bl	80a1e00 <socket_send_ex>
    if (ret < 0) {
 80a24e0:	2800      	cmp	r0, #0
 80a24e2:	da03      	bge.n	80a24ec <_ZN9TCPClient5writeEPKhjm+0x36>
 80a24e4:	e001      	b.n	80a24ea <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a24e6:	f04f 30ff 	mov.w	r0, #4294967295
 80a24ea:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a24ec:	b002      	add	sp, #8
 80a24ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a24f2 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a24f2:	b538      	push	{r3, r4, r5, lr}
 80a24f4:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a24f6:	f7ff ffc5 	bl	80a2484 <_ZN9TCPClient6statusEv>
 80a24fa:	bb00      	cbnz	r0, 80a253e <_ZN9TCPClient9connectedEv+0x4c>
 80a24fc:	6963      	ldr	r3, [r4, #20]
 80a24fe:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a2502:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a2506:	4291      	cmp	r1, r2
 80a2508:	d119      	bne.n	80a253e <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a250a:	6818      	ldr	r0, [r3, #0]
 80a250c:	f7ff fc48 	bl	80a1da0 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a2510:	b128      	cbz	r0, 80a251e <_ZN9TCPClient9connectedEv+0x2c>
 80a2512:	6963      	ldr	r3, [r4, #20]
 80a2514:	6818      	ldr	r0, [r3, #0]
 80a2516:	f7ff fc3b 	bl	80a1d90 <socket_active_status>
 80a251a:	2801      	cmp	r0, #1
 80a251c:	d001      	beq.n	80a2522 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a251e:	2500      	movs	r5, #0
 80a2520:	e00e      	b.n	80a2540 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a2522:	6823      	ldr	r3, [r4, #0]
 80a2524:	4620      	mov	r0, r4
 80a2526:	691b      	ldr	r3, [r3, #16]
 80a2528:	4798      	blx	r3
 80a252a:	2800      	cmp	r0, #0
 80a252c:	bf14      	ite	ne
 80a252e:	2501      	movne	r5, #1
 80a2530:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a2532:	d105      	bne.n	80a2540 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a2534:	6823      	ldr	r3, [r4, #0]
 80a2536:	4620      	mov	r0, r4
 80a2538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a253a:	4798      	blx	r3
 80a253c:	e000      	b.n	80a2540 <_ZN9TCPClient9connectedEv+0x4e>
 80a253e:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a2540:	4628      	mov	r0, r5
 80a2542:	bd38      	pop	{r3, r4, r5, pc}

080a2544 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a2544:	b508      	push	{r3, lr}
   return (status()!=0);
 80a2546:	f7ff ff9d 	bl	80a2484 <_ZN9TCPClient6statusEv>
}
 80a254a:	3000      	adds	r0, #0
 80a254c:	bf18      	it	ne
 80a254e:	2001      	movne	r0, #1
 80a2550:	bd08      	pop	{r3, pc}

080a2552 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a2552:	b510      	push	{r4, lr}
 80a2554:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a2556:	2300      	movs	r3, #0
 80a2558:	6001      	str	r1, [r0, #0]
 80a255a:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a255e:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a2562:	3088      	adds	r0, #136	; 0x88
 80a2564:	f000 fb6a 	bl	80a2c3c <_ZN9IPAddressC1Ev>
}
 80a2568:	4620      	mov	r0, r4
 80a256a:	bd10      	pop	{r4, pc}

080a256c <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a256c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a2570:	b570      	push	{r4, r5, r6, lr}
 80a2572:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a2574:	4a14      	ldr	r2, [pc, #80]	; (80a25c8 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2576:	2300      	movs	r3, #0
 80a2578:	6043      	str	r3, [r0, #4]
 80a257a:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a257c:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a257e:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a2580:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a2582:	20a0      	movs	r0, #160	; 0xa0
 80a2584:	460e      	mov	r6, r1
 80a2586:	f7fd fd88 	bl	80a009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a258a:	4605      	mov	r5, r0
 80a258c:	b110      	cbz	r0, 80a2594 <_ZN9TCPClientC1Em+0x28>
 80a258e:	4631      	mov	r1, r6
 80a2590:	f7ff ffdf 	bl	80a2552 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a2594:	2014      	movs	r0, #20
 80a2596:	f7fd fd80 	bl	80a009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a259a:	4603      	mov	r3, r0
 80a259c:	b128      	cbz	r0, 80a25aa <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a259e:	2201      	movs	r2, #1
 80a25a0:	6042      	str	r2, [r0, #4]
 80a25a2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a25a4:	4a09      	ldr	r2, [pc, #36]	; (80a25cc <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a25a6:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a25a8:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a25aa:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a25ac:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a25ae:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a25b0:	b128      	cbz	r0, 80a25be <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a25b2:	6843      	ldr	r3, [r0, #4]
 80a25b4:	3b01      	subs	r3, #1
 80a25b6:	6043      	str	r3, [r0, #4]
 80a25b8:	b90b      	cbnz	r3, 80a25be <_ZN9TCPClientC1Em+0x52>
 80a25ba:	f7ff fe1b 	bl	80a21f4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a25be:	4620      	mov	r0, r4
 80a25c0:	f7ff fe92 	bl	80a22e8 <_ZN9TCPClient12flush_bufferEv>
}
 80a25c4:	4620      	mov	r0, r4
 80a25c6:	bd70      	pop	{r4, r5, r6, pc}
 80a25c8:	080a4f0c 	.word	0x080a4f0c
 80a25cc:	080a4ef0 	.word	0x080a4ef0

080a25d0 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a25d0:	b510      	push	{r4, lr}
 80a25d2:	4604      	mov	r4, r0
 80a25d4:	f7ff fc0c 	bl	80a1df0 <socket_handle_invalid>
 80a25d8:	4601      	mov	r1, r0
 80a25da:	4620      	mov	r0, r4
 80a25dc:	f7ff ffc6 	bl	80a256c <_ZN9TCPClientC1Em>
{
}
 80a25e0:	4620      	mov	r0, r4
 80a25e2:	bd10      	pop	{r4, pc}

080a25e4 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a25e4:	b510      	push	{r4, lr}
 80a25e6:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a25e8:	6800      	ldr	r0, [r0, #0]
 80a25ea:	f7ff fbd9 	bl	80a1da0 <socket_handle_valid>
 80a25ee:	b110      	cbz	r0, 80a25f6 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a25f0:	6820      	ldr	r0, [r4, #0]
 80a25f2:	f7ff fbf5 	bl	80a1de0 <socket_close>
    }
}
 80a25f6:	4620      	mov	r0, r4
 80a25f8:	bd10      	pop	{r4, pc}

080a25fa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a25fa:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a25fc:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a25fe:	4620      	mov	r0, r4
 80a2600:	f7ff fff0 	bl	80a25e4 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a2604:	b124      	cbz	r4, 80a2610 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a2606:	4620      	mov	r0, r4
 80a2608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a260c:	f7fd bd49 	b.w	80a00a2 <_ZdlPv>
 80a2610:	bd10      	pop	{r4, pc}
	...

080a2614 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a2614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2618:	461f      	mov	r7, r3
    stop();
 80a261a:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a261c:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a261e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a2620:	4606      	mov	r6, r0
 80a2622:	460d      	mov	r5, r1
 80a2624:	4690      	mov	r8, r2
    stop();
 80a2626:	4798      	blx	r3
    if (Network.ready())
 80a2628:	4813      	ldr	r0, [pc, #76]	; (80a2678 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a262a:	f000 fd82 	bl	80a3132 <_ZN5spark12NetworkClass5readyEv>
 80a262e:	b300      	cbz	r0, 80a2672 <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a2630:	a802      	add	r0, sp, #8
 80a2632:	f000 fb03 	bl	80a2c3c <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a2636:	4628      	mov	r0, r5
 80a2638:	f002 f90a 	bl	80a4850 <strlen>
 80a263c:	2400      	movs	r4, #0
 80a263e:	b281      	uxth	r1, r0
 80a2640:	9400      	str	r4, [sp, #0]
 80a2642:	463b      	mov	r3, r7
 80a2644:	aa03      	add	r2, sp, #12
 80a2646:	4628      	mov	r0, r5
 80a2648:	f7ff fc2a 	bl	80a1ea0 <inet_gethostbyname>
 80a264c:	b980      	cbnz	r0, 80a2670 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a264e:	6833      	ldr	r3, [r6, #0]
 80a2650:	ad09      	add	r5, sp, #36	; 0x24
 80a2652:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a2656:	4b09      	ldr	r3, [pc, #36]	; (80a267c <_ZN9TCPClient7connectEPKctm+0x68>)
 80a2658:	ac03      	add	r4, sp, #12
 80a265a:	9308      	str	r3, [sp, #32]
 80a265c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a265e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2660:	6823      	ldr	r3, [r4, #0]
 80a2662:	4642      	mov	r2, r8
 80a2664:	702b      	strb	r3, [r5, #0]
 80a2666:	a908      	add	r1, sp, #32
 80a2668:	463b      	mov	r3, r7
 80a266a:	4630      	mov	r0, r6
 80a266c:	47c8      	blx	r9
 80a266e:	e000      	b.n	80a2672 <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a2670:	4620      	mov	r0, r4
}
 80a2672:	b00f      	add	sp, #60	; 0x3c
 80a2674:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2678:	200009dc 	.word	0x200009dc
 80a267c:	080a508c 	.word	0x080a508c

080a2680 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2680:	b510      	push	{r4, lr}
 80a2682:	4604      	mov	r4, r0
{
	free(buffer);
 80a2684:	6800      	ldr	r0, [r0, #0]
 80a2686:	f7ff fca7 	bl	80a1fd8 <free>
}
 80a268a:	4620      	mov	r0, r4
 80a268c:	bd10      	pop	{r4, pc}

080a268e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a268e:	b510      	push	{r4, lr}
 80a2690:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2692:	6800      	ldr	r0, [r0, #0]
 80a2694:	b108      	cbz	r0, 80a269a <_ZN6String10invalidateEv+0xc>
 80a2696:	f7ff fc9f 	bl	80a1fd8 <free>
	buffer = NULL;
 80a269a:	2300      	movs	r3, #0
 80a269c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a269e:	60a3      	str	r3, [r4, #8]
 80a26a0:	6063      	str	r3, [r4, #4]
 80a26a2:	bd10      	pop	{r4, pc}

080a26a4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a26a4:	b538      	push	{r3, r4, r5, lr}
 80a26a6:	4604      	mov	r4, r0
 80a26a8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a26aa:	6800      	ldr	r0, [r0, #0]
 80a26ac:	3101      	adds	r1, #1
 80a26ae:	f7ff fc9b 	bl	80a1fe8 <realloc>
	if (newbuffer) {
 80a26b2:	b110      	cbz	r0, 80a26ba <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a26b4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a26b8:	2001      	movs	r0, #1
	}
	return 0;
}
 80a26ba:	bd38      	pop	{r3, r4, r5, pc}

080a26bc <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a26bc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a26be:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a26c0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a26c2:	b113      	cbz	r3, 80a26ca <_ZN6String7reserveEj+0xe>
 80a26c4:	6843      	ldr	r3, [r0, #4]
 80a26c6:	428b      	cmp	r3, r1
 80a26c8:	d207      	bcs.n	80a26da <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a26ca:	4620      	mov	r0, r4
 80a26cc:	f7ff ffea 	bl	80a26a4 <_ZN6String12changeBufferEj>
 80a26d0:	b120      	cbz	r0, 80a26dc <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a26d2:	68a3      	ldr	r3, [r4, #8]
 80a26d4:	b90b      	cbnz	r3, 80a26da <_ZN6String7reserveEj+0x1e>
 80a26d6:	6822      	ldr	r2, [r4, #0]
 80a26d8:	7013      	strb	r3, [r2, #0]
 80a26da:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a26dc:	bd10      	pop	{r4, pc}

080a26de <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a26de:	b570      	push	{r4, r5, r6, lr}
 80a26e0:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a26e2:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a26e4:	4604      	mov	r4, r0
 80a26e6:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a26e8:	f7ff ffe8 	bl	80a26bc <_ZN6String7reserveEj>
 80a26ec:	b918      	cbnz	r0, 80a26f6 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a26ee:	4620      	mov	r0, r4
 80a26f0:	f7ff ffcd 	bl	80a268e <_ZN6String10invalidateEv>
		return *this;
 80a26f4:	e009      	b.n	80a270a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a26f6:	462a      	mov	r2, r5
 80a26f8:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a26fa:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a26fc:	6820      	ldr	r0, [r4, #0]
 80a26fe:	f002 f86b 	bl	80a47d8 <memcpy>
	buffer[len] = 0;
 80a2702:	6822      	ldr	r2, [r4, #0]
 80a2704:	68a3      	ldr	r3, [r4, #8]
 80a2706:	2100      	movs	r1, #0
 80a2708:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a270a:	4620      	mov	r0, r4
 80a270c:	bd70      	pop	{r4, r5, r6, pc}

080a270e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a270e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2710:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a2712:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2714:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2716:	6043      	str	r3, [r0, #4]
	len = 0;
 80a2718:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a271a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a271c:	460d      	mov	r5, r1
 80a271e:	b139      	cbz	r1, 80a2730 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a2720:	4608      	mov	r0, r1
 80a2722:	f002 f895 	bl	80a4850 <strlen>
 80a2726:	4629      	mov	r1, r5
 80a2728:	4602      	mov	r2, r0
 80a272a:	4620      	mov	r0, r4
 80a272c:	f7ff ffd7 	bl	80a26de <_ZN6String4copyEPKcj>
}
 80a2730:	4620      	mov	r0, r4
 80a2732:	bd38      	pop	{r3, r4, r5, pc}

080a2734 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2734:	b538      	push	{r3, r4, r5, lr}
 80a2736:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a2738:	460c      	mov	r4, r1
 80a273a:	b141      	cbz	r1, 80a274e <_ZN6StringaSEPKc+0x1a>
 80a273c:	4608      	mov	r0, r1
 80a273e:	f002 f887 	bl	80a4850 <strlen>
 80a2742:	4621      	mov	r1, r4
 80a2744:	4602      	mov	r2, r0
 80a2746:	4628      	mov	r0, r5
 80a2748:	f7ff ffc9 	bl	80a26de <_ZN6String4copyEPKcj>
 80a274c:	e001      	b.n	80a2752 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a274e:	f7ff ff9e 	bl	80a268e <_ZN6String10invalidateEv>

	return *this;
}
 80a2752:	4628      	mov	r0, r5
 80a2754:	bd38      	pop	{r3, r4, r5, pc}

080a2756 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a2756:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2758:	4606      	mov	r6, r0
 80a275a:	460d      	mov	r5, r1
 80a275c:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a275e:	2400      	movs	r4, #0
  while (size--) {
 80a2760:	42bd      	cmp	r5, r7
 80a2762:	d00c      	beq.n	80a277e <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a2764:	6833      	ldr	r3, [r6, #0]
 80a2766:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a276a:	689b      	ldr	r3, [r3, #8]
 80a276c:	4630      	mov	r0, r6
 80a276e:	4798      	blx	r3
     if (chunk>=0)
 80a2770:	2800      	cmp	r0, #0
 80a2772:	db01      	blt.n	80a2778 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a2774:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a2776:	e7f3      	b.n	80a2760 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a2778:	2c00      	cmp	r4, #0
 80a277a:	bf08      	it	eq
 80a277c:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a277e:	4620      	mov	r0, r4
 80a2780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2782 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2782:	b570      	push	{r4, r5, r6, lr}
 80a2784:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a2786:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a2788:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a278a:	b149      	cbz	r1, 80a27a0 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a278c:	f002 f860 	bl	80a4850 <strlen>
 80a2790:	682b      	ldr	r3, [r5, #0]
 80a2792:	4602      	mov	r2, r0
 80a2794:	4621      	mov	r1, r4
 80a2796:	4628      	mov	r0, r5
    }
 80a2798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a279c:	68db      	ldr	r3, [r3, #12]
 80a279e:	4718      	bx	r3
    }
 80a27a0:	bd70      	pop	{r4, r5, r6, pc}

080a27a2 <_ZN5Print5printEPKc>:
 80a27a2:	b508      	push	{r3, lr}
 80a27a4:	f7ff ffed 	bl	80a2782 <_ZN5Print5writeEPKc>
 80a27a8:	bd08      	pop	{r3, pc}

080a27aa <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a27aa:	6803      	ldr	r3, [r0, #0]
 80a27ac:	689b      	ldr	r3, [r3, #8]
 80a27ae:	4718      	bx	r3

080a27b0 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a27b0:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a27b2:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a27b4:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a27b6:	f7ff fff8 	bl	80a27aa <_ZN5Print5printEc>
  n += print('\n');
 80a27ba:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a27bc:	4604      	mov	r4, r0
  n += print('\n');
 80a27be:	4628      	mov	r0, r5
 80a27c0:	f7ff fff3 	bl	80a27aa <_ZN5Print5printEc>
  return n;
}
 80a27c4:	4420      	add	r0, r4
 80a27c6:	bd38      	pop	{r3, r4, r5, pc}

080a27c8 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a27c8:	2a01      	cmp	r2, #1
 80a27ca:	bf98      	it	ls
 80a27cc:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a27ce:	b530      	push	{r4, r5, lr}
 80a27d0:	460b      	mov	r3, r1
 80a27d2:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a27d4:	2100      	movs	r1, #0
 80a27d6:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a27da:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a27de:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a27e2:	fb05 3312 	mls	r3, r5, r2, r3
 80a27e6:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a27e8:	2b09      	cmp	r3, #9
 80a27ea:	bf94      	ite	ls
 80a27ec:	3330      	addls	r3, #48	; 0x30
 80a27ee:	3337      	addhi	r3, #55	; 0x37
 80a27f0:	b2db      	uxtb	r3, r3
 80a27f2:	4621      	mov	r1, r4
 80a27f4:	f804 3901 	strb.w	r3, [r4], #-1
 80a27f8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a27fa:	2d00      	cmp	r5, #0
 80a27fc:	d1ef      	bne.n	80a27de <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a27fe:	f7ff ffc0 	bl	80a2782 <_ZN5Print5writeEPKc>
}
 80a2802:	b00b      	add	sp, #44	; 0x2c
 80a2804:	bd30      	pop	{r4, r5, pc}

080a2806 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a2806:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a2808:	b922      	cbnz	r2, 80a2814 <_ZN5Print5printEmi+0xe>
 80a280a:	6803      	ldr	r3, [r0, #0]
 80a280c:	b2c9      	uxtb	r1, r1
 80a280e:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a2810:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a2812:	4718      	bx	r3
  else return printNumber(n, base);
 80a2814:	b2d2      	uxtb	r2, r2
}
 80a2816:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2818:	f7ff bfd6 	b.w	80a27c8 <_ZN5Print11printNumberEmh>

080a281c <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a281c:	f7ff bff3 	b.w	80a2806 <_ZN5Print5printEmi>

080a2820 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a2820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2824:	4607      	mov	r7, r0
 80a2826:	460e      	mov	r6, r1
  if (base == 0) {
 80a2828:	4615      	mov	r5, r2
 80a282a:	b92a      	cbnz	r2, 80a2838 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a282c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a2830:	6803      	ldr	r3, [r0, #0]
 80a2832:	b2c9      	uxtb	r1, r1
 80a2834:	689b      	ldr	r3, [r3, #8]
 80a2836:	4718      	bx	r3
  } else if (base == 10) {
 80a2838:	2a0a      	cmp	r2, #10
 80a283a:	d102      	bne.n	80a2842 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a283c:	2900      	cmp	r1, #0
 80a283e:	da01      	bge.n	80a2844 <_ZN5Print5printEli+0x24>
 80a2840:	e004      	b.n	80a284c <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2842:	b2d2      	uxtb	r2, r2
  }
}
 80a2844:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2848:	f7ff bfbe 	b.w	80a27c8 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a284c:	212d      	movs	r1, #45	; 0x2d
 80a284e:	f7ff ffac 	bl	80a27aa <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a2852:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a2854:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a2856:	4271      	negs	r1, r6
 80a2858:	4638      	mov	r0, r7
 80a285a:	f7ff ffb5 	bl	80a27c8 <_ZN5Print11printNumberEmh>
 80a285e:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a2860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2864 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2868:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a286a:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a286c:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a286e:	4617      	mov	r7, r2
 80a2870:	461e      	mov	r6, r3
 80a2872:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2876:	f001 fb1d 	bl	80a3eb4 <__aeabi_dcmpun>
 80a287a:	b108      	cbz	r0, 80a2880 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a287c:	4947      	ldr	r1, [pc, #284]	; (80a299c <_ZN5Print10printFloatEdh+0x138>)
 80a287e:	e012      	b.n	80a28a6 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2880:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a2884:	f04f 32ff 	mov.w	r2, #4294967295
 80a2888:	4b45      	ldr	r3, [pc, #276]	; (80a29a0 <_ZN5Print10printFloatEdh+0x13c>)
 80a288a:	4638      	mov	r0, r7
 80a288c:	4621      	mov	r1, r4
 80a288e:	f001 fb11 	bl	80a3eb4 <__aeabi_dcmpun>
 80a2892:	b968      	cbnz	r0, 80a28b0 <_ZN5Print10printFloatEdh+0x4c>
 80a2894:	f04f 32ff 	mov.w	r2, #4294967295
 80a2898:	4b41      	ldr	r3, [pc, #260]	; (80a29a0 <_ZN5Print10printFloatEdh+0x13c>)
 80a289a:	4638      	mov	r0, r7
 80a289c:	4621      	mov	r1, r4
 80a289e:	f001 faeb 	bl	80a3e78 <__aeabi_dcmple>
 80a28a2:	b928      	cbnz	r0, 80a28b0 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a28a4:	493f      	ldr	r1, [pc, #252]	; (80a29a4 <_ZN5Print10printFloatEdh+0x140>)
 80a28a6:	4640      	mov	r0, r8
 80a28a8:	f7ff ff6b 	bl	80a2782 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a28ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a28b0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a28b4:	4b3c      	ldr	r3, [pc, #240]	; (80a29a8 <_ZN5Print10printFloatEdh+0x144>)
 80a28b6:	4638      	mov	r0, r7
 80a28b8:	4631      	mov	r1, r6
 80a28ba:	f001 faf1 	bl	80a3ea0 <__aeabi_dcmpgt>
 80a28be:	b108      	cbz	r0, 80a28c4 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a28c0:	493a      	ldr	r1, [pc, #232]	; (80a29ac <_ZN5Print10printFloatEdh+0x148>)
 80a28c2:	e7f0      	b.n	80a28a6 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a28c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a28c8:	4b39      	ldr	r3, [pc, #228]	; (80a29b0 <_ZN5Print10printFloatEdh+0x14c>)
 80a28ca:	4638      	mov	r0, r7
 80a28cc:	4631      	mov	r1, r6
 80a28ce:	f001 fac9 	bl	80a3e64 <__aeabi_dcmplt>
 80a28d2:	2800      	cmp	r0, #0
 80a28d4:	d1f4      	bne.n	80a28c0 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a28d6:	2200      	movs	r2, #0
 80a28d8:	2300      	movs	r3, #0
 80a28da:	4638      	mov	r0, r7
 80a28dc:	4631      	mov	r1, r6
 80a28de:	f001 fac1 	bl	80a3e64 <__aeabi_dcmplt>
 80a28e2:	b138      	cbz	r0, 80a28f4 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a28e4:	212d      	movs	r1, #45	; 0x2d
 80a28e6:	4640      	mov	r0, r8
 80a28e8:	f7ff ff5f 	bl	80a27aa <_ZN5Print5printEc>
     number = -number;
 80a28ec:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a28f0:	4604      	mov	r4, r0
 80a28f2:	e000      	b.n	80a28f6 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a28f4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a28f6:	492f      	ldr	r1, [pc, #188]	; (80a29b4 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a28f8:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a28fc:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a28fe:	fa5f f389 	uxtb.w	r3, r9
 80a2902:	429d      	cmp	r5, r3
 80a2904:	d906      	bls.n	80a2914 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a2906:	2200      	movs	r2, #0
 80a2908:	4b2b      	ldr	r3, [pc, #172]	; (80a29b8 <_ZN5Print10printFloatEdh+0x154>)
 80a290a:	f001 f963 	bl	80a3bd4 <__aeabi_ddiv>
 80a290e:	f109 0901 	add.w	r9, r9, #1
 80a2912:	e7f4      	b.n	80a28fe <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a2914:	463a      	mov	r2, r7
 80a2916:	4633      	mov	r3, r6
 80a2918:	f000 fe80 	bl	80a361c <__adddf3>
 80a291c:	460f      	mov	r7, r1
 80a291e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2920:	f001 fb06 	bl	80a3f30 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2924:	220a      	movs	r2, #10
 80a2926:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2928:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a292a:	4640      	mov	r0, r8
 80a292c:	f7ff ff4c 	bl	80a27c8 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2930:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a2932:	b37d      	cbz	r5, 80a2994 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a2934:	4648      	mov	r0, r9
 80a2936:	f000 ffad 	bl	80a3894 <__aeabi_ui2d>
 80a293a:	4602      	mov	r2, r0
 80a293c:	460b      	mov	r3, r1
 80a293e:	4630      	mov	r0, r6
 80a2940:	4639      	mov	r1, r7
 80a2942:	f000 fe69 	bl	80a3618 <__aeabi_dsub>
 80a2946:	4606      	mov	r6, r0
 80a2948:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a294a:	4640      	mov	r0, r8
 80a294c:	491b      	ldr	r1, [pc, #108]	; (80a29bc <_ZN5Print10printFloatEdh+0x158>)
 80a294e:	f7ff ff18 	bl	80a2782 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a2952:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a2954:	4b18      	ldr	r3, [pc, #96]	; (80a29b8 <_ZN5Print10printFloatEdh+0x154>)
 80a2956:	2200      	movs	r2, #0
 80a2958:	4630      	mov	r0, r6
 80a295a:	4639      	mov	r1, r7
 80a295c:	f001 f810 	bl	80a3980 <__aeabi_dmul>
 80a2960:	460f      	mov	r7, r1
 80a2962:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a2964:	f001 fabc 	bl	80a3ee0 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2968:	220a      	movs	r2, #10
 80a296a:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a296c:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a296e:	4640      	mov	r0, r8
 80a2970:	f7ff ff56 	bl	80a2820 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a2974:	4404      	add	r4, r0
    remainder -= toPrint;
 80a2976:	4648      	mov	r0, r9
 80a2978:	f000 ff9c 	bl	80a38b4 <__aeabi_i2d>
 80a297c:	4602      	mov	r2, r0
 80a297e:	460b      	mov	r3, r1
 80a2980:	4630      	mov	r0, r6
 80a2982:	4639      	mov	r1, r7
 80a2984:	f000 fe48 	bl	80a3618 <__aeabi_dsub>
 80a2988:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a298a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a298e:	4606      	mov	r6, r0
 80a2990:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a2992:	d1df      	bne.n	80a2954 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2994:	4620      	mov	r0, r4
 80a2996:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a299a:	bf00      	nop
 80a299c:	080a4f6b 	.word	0x080a4f6b
 80a29a0:	7fefffff 	.word	0x7fefffff
 80a29a4:	080a4f75 	.word	0x080a4f75
 80a29a8:	41efffff 	.word	0x41efffff
 80a29ac:	080a4f6f 	.word	0x080a4f6f
 80a29b0:	c1efffff 	.word	0xc1efffff
 80a29b4:	3fe00000 	.word	0x3fe00000
 80a29b8:	40240000 	.word	0x40240000
 80a29bc:	080a4f73 	.word	0x080a4f73

080a29c0 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a29c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a29c2:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a29c6:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a29c8:	9100      	str	r1, [sp, #0]
 80a29ca:	f7ff ff4b 	bl	80a2864 <_ZN5Print10printFloatEdh>
 80a29ce:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a29d0:	4628      	mov	r0, r5
 80a29d2:	f7ff feed 	bl	80a27b0 <_ZN5Print7printlnEv>
  return n;
}
 80a29d6:	4420      	add	r0, r4
 80a29d8:	b003      	add	sp, #12
 80a29da:	bd30      	pop	{r4, r5, pc}

080a29dc <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80a29dc:	b40c      	push	{r2, r3}
 80a29de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a29e2:	b087      	sub	sp, #28
 80a29e4:	af00      	add	r7, sp, #0
 80a29e6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80a29ea:	f854 9b04 	ldr.w	r9, [r4], #4
 80a29ee:	4605      	mov	r5, r0
 80a29f0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a29f2:	4623      	mov	r3, r4
 80a29f4:	464a      	mov	r2, r9
 80a29f6:	2114      	movs	r1, #20
 80a29f8:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80a29fa:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80a29fc:	f7ff fb04 	bl	80a2008 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80a2a00:	2813      	cmp	r0, #19
 80a2a02:	d805      	bhi.n	80a2a10 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2a04:	1d39      	adds	r1, r7, #4
 80a2a06:	4628      	mov	r0, r5
 80a2a08:	f7ff febb 	bl	80a2782 <_ZN5Print5writeEPKc>
 80a2a0c:	4604      	mov	r4, r0
 80a2a0e:	e013      	b.n	80a2a38 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2a10:	f100 0308 	add.w	r3, r0, #8
 80a2a14:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80a2a18:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80a2a1a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80a2a1e:	1c41      	adds	r1, r0, #1
 80a2a20:	4623      	mov	r3, r4
 80a2a22:	464a      	mov	r2, r9
 80a2a24:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80a2a26:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 80a2a28:	f7ff faee 	bl	80a2008 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2a2c:	4669      	mov	r1, sp
 80a2a2e:	4628      	mov	r0, r5
 80a2a30:	f7ff fea7 	bl	80a2782 <_ZN5Print5writeEPKc>
 80a2a34:	4604      	mov	r4, r0
 80a2a36:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 80a2a38:	b11e      	cbz	r6, 80a2a42 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 80a2a3a:	4628      	mov	r0, r5
 80a2a3c:	f7ff feb8 	bl	80a27b0 <_ZN5Print7printlnEv>
 80a2a40:	4404      	add	r4, r0
    return n;
}
 80a2a42:	4620      	mov	r0, r4
 80a2a44:	371c      	adds	r7, #28
 80a2a46:	46bd      	mov	sp, r7
 80a2a48:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2a4c:	b002      	add	sp, #8
 80a2a4e:	4770      	bx	lr

080a2a50 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a2a50:	2300      	movs	r3, #0
 80a2a52:	461a      	mov	r2, r3
 80a2a54:	4619      	mov	r1, r3
 80a2a56:	6840      	ldr	r0, [r0, #4]
 80a2a58:	f7ff ba7e 	b.w	80a1f58 <network_on>

080a2a5c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2a5c:	4a01      	ldr	r2, [pc, #4]	; (80a2a64 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2a5e:	4b02      	ldr	r3, [pc, #8]	; (80a2a68 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2a60:	601a      	str	r2, [r3, #0]
 80a2a62:	4770      	bx	lr
 80a2a64:	080a4fef 	.word	0x080a4fef
 80a2a68:	20000558 	.word	0x20000558

080a2a6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2a6c:	4b02      	ldr	r3, [pc, #8]	; (80a2a78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2a6e:	681a      	ldr	r2, [r3, #0]
 80a2a70:	4b02      	ldr	r3, [pc, #8]	; (80a2a7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2a72:	601a      	str	r2, [r3, #0]
 80a2a74:	4770      	bx	lr
 80a2a76:	bf00      	nop
 80a2a78:	20000424 	.word	0x20000424
 80a2a7c:	2000055c 	.word	0x2000055c

080a2a80 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2a80:	2100      	movs	r1, #0
 80a2a82:	f7ff ba2d 	b.w	80a1ee0 <system_delay_ms>

080a2a86 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2a86:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a2a88:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a2a8a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a2a8c:	b113      	cbz	r3, 80a2a94 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2a8e:	2203      	movs	r2, #3
 80a2a90:	4601      	mov	r1, r0
 80a2a92:	4798      	blx	r3
    }
 80a2a94:	4620      	mov	r0, r4
 80a2a96:	bd10      	pop	{r4, pc}

080a2a98 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2a98:	b510      	push	{r4, lr}
 80a2a9a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2a9c:	f7ff fff3 	bl	80a2a86 <_ZNSt14_Function_baseD1Ev>
 80a2aa0:	4620      	mov	r0, r4
 80a2aa2:	bd10      	pop	{r4, pc}

080a2aa4 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2aa4:	4803      	ldr	r0, [pc, #12]	; (80a2ab4 <_GLOBAL__sub_I_RGB+0x10>)
 80a2aa6:	2300      	movs	r3, #0
 80a2aa8:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a2aaa:	4a03      	ldr	r2, [pc, #12]	; (80a2ab8 <_GLOBAL__sub_I_RGB+0x14>)
 80a2aac:	4903      	ldr	r1, [pc, #12]	; (80a2abc <_GLOBAL__sub_I_RGB+0x18>)
 80a2aae:	f000 bc5f 	b.w	80a3370 <__aeabi_atexit>
 80a2ab2:	bf00      	nop
 80a2ab4:	20000560 	.word	0x20000560
 80a2ab8:	2000048c 	.word	0x2000048c
 80a2abc:	080a2a99 	.word	0x080a2a99

080a2ac0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2ac0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2ac2:	4b14      	ldr	r3, [pc, #80]	; (80a2b14 <serialEventRun+0x54>)
 80a2ac4:	b133      	cbz	r3, 80a2ad4 <serialEventRun+0x14>
 80a2ac6:	f000 f987 	bl	80a2dd8 <_Z16_fetch_usbserialv>
 80a2aca:	6803      	ldr	r3, [r0, #0]
 80a2acc:	691b      	ldr	r3, [r3, #16]
 80a2ace:	4798      	blx	r3
 80a2ad0:	2800      	cmp	r0, #0
 80a2ad2:	dc16      	bgt.n	80a2b02 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2ad4:	4b10      	ldr	r3, [pc, #64]	; (80a2b18 <serialEventRun+0x58>)
 80a2ad6:	b133      	cbz	r3, 80a2ae6 <serialEventRun+0x26>
 80a2ad8:	f000 fa3c 	bl	80a2f54 <_Z22__fetch_global_Serial1v>
 80a2adc:	6803      	ldr	r3, [r0, #0]
 80a2ade:	691b      	ldr	r3, [r3, #16]
 80a2ae0:	4798      	blx	r3
 80a2ae2:	2800      	cmp	r0, #0
 80a2ae4:	dc10      	bgt.n	80a2b08 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a2ae6:	4b0d      	ldr	r3, [pc, #52]	; (80a2b1c <serialEventRun+0x5c>)
 80a2ae8:	b10b      	cbz	r3, 80a2aee <serialEventRun+0x2e>
 80a2aea:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2aee:	4b0c      	ldr	r3, [pc, #48]	; (80a2b20 <serialEventRun+0x60>)
 80a2af0:	b17b      	cbz	r3, 80a2b12 <serialEventRun+0x52>
 80a2af2:	f000 f9ad 	bl	80a2e50 <_Z17_fetch_usbserial1v>
 80a2af6:	6803      	ldr	r3, [r0, #0]
 80a2af8:	691b      	ldr	r3, [r3, #16]
 80a2afa:	4798      	blx	r3
 80a2afc:	2800      	cmp	r0, #0
 80a2afe:	dc06      	bgt.n	80a2b0e <serialEventRun+0x4e>
 80a2b00:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a2b02:	f3af 8000 	nop.w
 80a2b06:	e7e5      	b.n	80a2ad4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2b08:	f3af 8000 	nop.w
 80a2b0c:	e7eb      	b.n	80a2ae6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2b0e:	f3af 8000 	nop.w
 80a2b12:	bd08      	pop	{r3, pc}
	...

080a2b24 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a2b24:	b508      	push	{r3, lr}
	serialEventRun();
 80a2b26:	f7ff ffcb 	bl	80a2ac0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2b2a:	f7ff f877 	bl	80a1c1c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2b2e:	4b01      	ldr	r3, [pc, #4]	; (80a2b34 <_post_loop+0x10>)
 80a2b30:	6018      	str	r0, [r3, #0]
 80a2b32:	bd08      	pop	{r3, pc}
 80a2b34:	20000a04 	.word	0x20000a04

080a2b38 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2b38:	4802      	ldr	r0, [pc, #8]	; (80a2b44 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2b3a:	4a03      	ldr	r2, [pc, #12]	; (80a2b48 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2b3c:	4903      	ldr	r1, [pc, #12]	; (80a2b4c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2b3e:	1a12      	subs	r2, r2, r0
 80a2b40:	f001 be4a 	b.w	80a47d8 <memcpy>
 80a2b44:	40024000 	.word	0x40024000
 80a2b48:	40024004 	.word	0x40024004
 80a2b4c:	080a5248 	.word	0x080a5248

080a2b50 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2b50:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2b52:	2300      	movs	r3, #0
 80a2b54:	9300      	str	r3, [sp, #0]
 80a2b56:	461a      	mov	r2, r3
 80a2b58:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2b5c:	f7ff f9d2 	bl	80a1f04 <system_ctrl_set_result>
}
 80a2b60:	b003      	add	sp, #12
 80a2b62:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2b68 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2b68:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a2b6a:	8843      	ldrh	r3, [r0, #2]
 80a2b6c:	2b0a      	cmp	r3, #10
 80a2b6e:	d008      	beq.n	80a2b82 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2b70:	2b50      	cmp	r3, #80	; 0x50
 80a2b72:	d109      	bne.n	80a2b88 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2b74:	4b09      	ldr	r3, [pc, #36]	; (80a2b9c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2b76:	681b      	ldr	r3, [r3, #0]
 80a2b78:	b13b      	cbz	r3, 80a2b8a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a2b7a:	b003      	add	sp, #12
 80a2b7c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2b80:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2b82:	f7ff ffe5 	bl	80a2b50 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2b86:	e006      	b.n	80a2b96 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2b88:	2300      	movs	r3, #0
 80a2b8a:	9300      	str	r3, [sp, #0]
 80a2b8c:	461a      	mov	r2, r3
 80a2b8e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2b92:	f7ff f9b7 	bl	80a1f04 <system_ctrl_set_result>
        break;
    }
}
 80a2b96:	b003      	add	sp, #12
 80a2b98:	f85d fb04 	ldr.w	pc, [sp], #4
 80a2b9c:	20000570 	.word	0x20000570

080a2ba0 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2ba0:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2ba2:	4c10      	ldr	r4, [pc, #64]	; (80a2be4 <module_user_init_hook+0x44>)
 80a2ba4:	4d10      	ldr	r5, [pc, #64]	; (80a2be8 <module_user_init_hook+0x48>)
 80a2ba6:	6823      	ldr	r3, [r4, #0]
 80a2ba8:	42ab      	cmp	r3, r5
 80a2baa:	4b10      	ldr	r3, [pc, #64]	; (80a2bec <module_user_init_hook+0x4c>)
 80a2bac:	bf0c      	ite	eq
 80a2bae:	2201      	moveq	r2, #1
 80a2bb0:	2200      	movne	r2, #0
 80a2bb2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2bb4:	d002      	beq.n	80a2bbc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2bb6:	f7ff ffbf 	bl	80a2b38 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a2bba:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2bbc:	f7ff f81e 	bl	80a1bfc <HAL_RNG_GetRandomNumber>
 80a2bc0:	4604      	mov	r4, r0
    srand(seed);
 80a2bc2:	f001 fe1d 	bl	80a4800 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2bc6:	4b0a      	ldr	r3, [pc, #40]	; (80a2bf0 <module_user_init_hook+0x50>)
 80a2bc8:	b113      	cbz	r3, 80a2bd0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a2bca:	4620      	mov	r0, r4
 80a2bcc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2bd0:	2100      	movs	r1, #0
 80a2bd2:	4807      	ldr	r0, [pc, #28]	; (80a2bf0 <module_user_init_hook+0x50>)
 80a2bd4:	f7ff f9f0 	bl	80a1fb8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2bdc:	2100      	movs	r1, #0
 80a2bde:	4805      	ldr	r0, [pc, #20]	; (80a2bf4 <module_user_init_hook+0x54>)
 80a2be0:	f7ff b986 	b.w	80a1ef0 <system_ctrl_set_app_request_handler>
 80a2be4:	40024000 	.word	0x40024000
 80a2be8:	9a271c1e 	.word	0x9a271c1e
 80a2bec:	20000574 	.word	0x20000574
 80a2bf0:	00000000 	.word	0x00000000
 80a2bf4:	080a2b69 	.word	0x080a2b69

080a2bf8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2bf8:	4770      	bx	lr

080a2bfa <_ZN9IPAddressD0Ev>:
 80a2bfa:	b510      	push	{r4, lr}
 80a2bfc:	4604      	mov	r4, r0
 80a2bfe:	2118      	movs	r1, #24
 80a2c00:	f000 fbbb 	bl	80a337a <_ZdlPvj>
 80a2c04:	4620      	mov	r0, r4
 80a2c06:	bd10      	pop	{r4, pc}

080a2c08 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2c0a:	460f      	mov	r7, r1
 80a2c0c:	f100 0608 	add.w	r6, r0, #8
 80a2c10:	1d05      	adds	r5, r0, #4
 80a2c12:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2c14:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2c18:	220a      	movs	r2, #10
 80a2c1a:	4638      	mov	r0, r7
 80a2c1c:	f7ff fdfe 	bl	80a281c <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2c20:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2c22:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2c24:	d007      	beq.n	80a2c36 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2c26:	2c00      	cmp	r4, #0
 80a2c28:	d0f4      	beq.n	80a2c14 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2c2a:	212e      	movs	r1, #46	; 0x2e
 80a2c2c:	4638      	mov	r0, r7
 80a2c2e:	f7ff fdbc 	bl	80a27aa <_ZN5Print5printEc>
 80a2c32:	4404      	add	r4, r0
 80a2c34:	e7ee      	b.n	80a2c14 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2c36:	4620      	mov	r0, r4
 80a2c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2c3c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2c3c:	b510      	push	{r4, lr}
 80a2c3e:	4604      	mov	r4, r0
 80a2c40:	4b04      	ldr	r3, [pc, #16]	; (80a2c54 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2c42:	2211      	movs	r2, #17
 80a2c44:	f840 3b04 	str.w	r3, [r0], #4
 80a2c48:	2100      	movs	r1, #0
 80a2c4a:	f001 fdd0 	bl	80a47ee <memset>
{
    clear();
}
 80a2c4e:	4620      	mov	r0, r4
 80a2c50:	bd10      	pop	{r4, pc}
 80a2c52:	bf00      	nop
 80a2c54:	080a508c 	.word	0x080a508c

080a2c58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2c58:	4603      	mov	r3, r0
 80a2c5a:	4a07      	ldr	r2, [pc, #28]	; (80a2c78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2c5c:	b510      	push	{r4, lr}
 80a2c5e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2c62:	f101 0210 	add.w	r2, r1, #16
 80a2c66:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2c6a:	4291      	cmp	r1, r2
 80a2c6c:	f843 4b04 	str.w	r4, [r3], #4
 80a2c70:	d1f9      	bne.n	80a2c66 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2c72:	780a      	ldrb	r2, [r1, #0]
 80a2c74:	701a      	strb	r2, [r3, #0]
}
 80a2c76:	bd10      	pop	{r4, pc}
 80a2c78:	080a508c 	.word	0x080a508c

080a2c7c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2c7c:	4a02      	ldr	r2, [pc, #8]	; (80a2c88 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2c7e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2c80:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2c82:	2204      	movs	r2, #4
 80a2c84:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2c86:	4770      	bx	lr
 80a2c88:	080a508c 	.word	0x080a508c

080a2c8c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2c8c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2c8e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2c92:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2c96:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2c9a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2c9e:	2304      	movs	r3, #4
 80a2ca0:	6041      	str	r1, [r0, #4]
 80a2ca2:	7503      	strb	r3, [r0, #20]
 80a2ca4:	bd10      	pop	{r4, pc}
	...

080a2ca8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2caa:	4d04      	ldr	r5, [pc, #16]	; (80a2cbc <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2cac:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2cae:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2cb2:	9500      	str	r5, [sp, #0]
 80a2cb4:	f7ff ffea 	bl	80a2c8c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2cb8:	b003      	add	sp, #12
 80a2cba:	bd30      	pop	{r4, r5, pc}
 80a2cbc:	080a508c 	.word	0x080a508c

080a2cc0 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a2cc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a2cc2:	780d      	ldrb	r5, [r1, #0]
 80a2cc4:	788b      	ldrb	r3, [r1, #2]
 80a2cc6:	784a      	ldrb	r2, [r1, #1]
 80a2cc8:	78c9      	ldrb	r1, [r1, #3]
 80a2cca:	9100      	str	r1, [sp, #0]
 80a2ccc:	4629      	mov	r1, r5
 80a2cce:	f7ff ffdd 	bl	80a2c8c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a2cd2:	b003      	add	sp, #12
 80a2cd4:	bd30      	pop	{r4, r5, pc}
	...

080a2cd8 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a2cd8:	b510      	push	{r4, lr}
 80a2cda:	4604      	mov	r4, r0
 80a2cdc:	4b02      	ldr	r3, [pc, #8]	; (80a2ce8 <_ZN9IPAddressC1EPKh+0x10>)
 80a2cde:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a2ce0:	f7ff ffee 	bl	80a2cc0 <_ZN9IPAddressaSEPKh>
}
 80a2ce4:	4620      	mov	r0, r4
 80a2ce6:	bd10      	pop	{r4, pc}
 80a2ce8:	080a508c 	.word	0x080a508c

080a2cec <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2cec:	7441      	strb	r1, [r0, #17]
 80a2cee:	4770      	bx	lr

080a2cf0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2cf0:	4770      	bx	lr

080a2cf2 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2cf2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2cf4:	2100      	movs	r1, #0
 80a2cf6:	7c00      	ldrb	r0, [r0, #16]
 80a2cf8:	f7ff f8aa 	bl	80a1e50 <HAL_USB_USART_Receive_Data>
}
 80a2cfc:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2d00:	bf28      	it	cs
 80a2d02:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2d06:	bd08      	pop	{r3, pc}

080a2d08 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2d08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2d0a:	2101      	movs	r1, #1
 80a2d0c:	7c00      	ldrb	r0, [r0, #16]
 80a2d0e:	f7ff f89f 	bl	80a1e50 <HAL_USB_USART_Receive_Data>
}
 80a2d12:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2d16:	bf28      	it	cs
 80a2d18:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2d1c:	bd08      	pop	{r3, pc}

080a2d1e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2d1e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2d20:	7c00      	ldrb	r0, [r0, #16]
 80a2d22:	f7ff f88d 	bl	80a1e40 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2d26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2d2a:	bd08      	pop	{r3, pc}

080a2d2c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2d2c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2d2e:	7c00      	ldrb	r0, [r0, #16]
 80a2d30:	f7ff f87e 	bl	80a1e30 <HAL_USB_USART_Available_Data>
}
 80a2d34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2d38:	bd08      	pop	{r3, pc}

080a2d3a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2d3a:	7c00      	ldrb	r0, [r0, #16]
 80a2d3c:	f7ff b898 	b.w	80a1e70 <HAL_USB_USART_Flush_Data>

080a2d40 <_ZN9USBSerialD0Ev>:
 80a2d40:	b510      	push	{r4, lr}
 80a2d42:	4604      	mov	r4, r0
 80a2d44:	2114      	movs	r1, #20
 80a2d46:	f000 fb18 	bl	80a337a <_ZdlPvj>
 80a2d4a:	4620      	mov	r0, r4
 80a2d4c:	bd10      	pop	{r4, pc}

080a2d4e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2d4e:	b538      	push	{r3, r4, r5, lr}
 80a2d50:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2d52:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2d54:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2d56:	f7ff f873 	bl	80a1e40 <HAL_USB_USART_Available_Data_For_Write>
 80a2d5a:	2800      	cmp	r0, #0
 80a2d5c:	dc01      	bgt.n	80a2d62 <_ZN9USBSerial5writeEh+0x14>
 80a2d5e:	7c60      	ldrb	r0, [r4, #17]
 80a2d60:	b128      	cbz	r0, 80a2d6e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2d62:	4629      	mov	r1, r5
 80a2d64:	7c20      	ldrb	r0, [r4, #16]
 80a2d66:	f7ff f87b 	bl	80a1e60 <HAL_USB_USART_Send_Data>
 80a2d6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2d6e:	bd38      	pop	{r3, r4, r5, pc}

080a2d70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2d70:	b510      	push	{r4, lr}
 80a2d72:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2d74:	2300      	movs	r3, #0
 80a2d76:	6063      	str	r3, [r4, #4]
 80a2d78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2d7c:	60a3      	str	r3, [r4, #8]
 80a2d7e:	4b05      	ldr	r3, [pc, #20]	; (80a2d94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2d80:	4608      	mov	r0, r1
 80a2d82:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2d84:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2d86:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2d88:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2d8a:	4611      	mov	r1, r2
 80a2d8c:	f7ff f840 	bl	80a1e10 <HAL_USB_USART_Init>
}
 80a2d90:	4620      	mov	r0, r4
 80a2d92:	bd10      	pop	{r4, pc}
 80a2d94:	080a50a0 	.word	0x080a50a0

080a2d98 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a2d98:	2200      	movs	r2, #0
 80a2d9a:	7c00      	ldrb	r0, [r0, #16]
 80a2d9c:	f7ff b840 	b.w	80a1e20 <HAL_USB_USART_Begin>

080a2da0 <_ZN9USBSerial9isEnabledEv>:
USBSerial::operator bool() {
  return isEnabled();
}

bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
 80a2da0:	7c00      	ldrb	r0, [r0, #16]
 80a2da2:	f7ff b86d 	b.w	80a1e80 <HAL_USB_USART_Is_Enabled>

080a2da6 <_ZN9USBSerialcvbEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
}

USBSerial::operator bool() {
  return isEnabled();
 80a2da6:	f7ff bffb 	b.w	80a2da0 <_ZN9USBSerial9isEnabledEv>
	...

080a2dac <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2dac:	b510      	push	{r4, lr}
 80a2dae:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2db0:	2214      	movs	r2, #20
 80a2db2:	2100      	movs	r1, #0
 80a2db4:	f001 fd1b 	bl	80a47ee <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2db8:	4b05      	ldr	r3, [pc, #20]	; (80a2dd0 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2dba:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2dbc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2dbe:	4b05      	ldr	r3, [pc, #20]	; (80a2dd4 <_Z19acquireSerialBufferv+0x28>)
 80a2dc0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2dc2:	f240 1301 	movw	r3, #257	; 0x101
 80a2dc6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2dc8:	2381      	movs	r3, #129	; 0x81
 80a2dca:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2dcc:	bd10      	pop	{r4, pc}
 80a2dce:	bf00      	nop
 80a2dd0:	200005fd 	.word	0x200005fd
 80a2dd4:	2000057c 	.word	0x2000057c

080a2dd8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2dd8:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2dda:	4d0e      	ldr	r5, [pc, #56]	; (80a2e14 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2ddc:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2dde:	a801      	add	r0, sp, #4
 80a2de0:	f7ff ffe4 	bl	80a2dac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2de4:	6829      	ldr	r1, [r5, #0]
 80a2de6:	f011 0401 	ands.w	r4, r1, #1
 80a2dea:	d110      	bne.n	80a2e0e <_Z16_fetch_usbserialv+0x36>
 80a2dec:	4628      	mov	r0, r5
 80a2dee:	f7fd f967 	bl	80a00c0 <__cxa_guard_acquire>
 80a2df2:	b160      	cbz	r0, 80a2e0e <_Z16_fetch_usbserialv+0x36>
 80a2df4:	aa01      	add	r2, sp, #4
 80a2df6:	4621      	mov	r1, r4
 80a2df8:	4807      	ldr	r0, [pc, #28]	; (80a2e18 <_Z16_fetch_usbserialv+0x40>)
 80a2dfa:	f7ff ffb9 	bl	80a2d70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2dfe:	4628      	mov	r0, r5
 80a2e00:	f7fd f963 	bl	80a00ca <__cxa_guard_release>
 80a2e04:	4a05      	ldr	r2, [pc, #20]	; (80a2e1c <_Z16_fetch_usbserialv+0x44>)
 80a2e06:	4906      	ldr	r1, [pc, #24]	; (80a2e20 <_Z16_fetch_usbserialv+0x48>)
 80a2e08:	4803      	ldr	r0, [pc, #12]	; (80a2e18 <_Z16_fetch_usbserialv+0x40>)
 80a2e0a:	f000 fab1 	bl	80a3370 <__aeabi_atexit>
	return _usbserial;
}
 80a2e0e:	4802      	ldr	r0, [pc, #8]	; (80a2e18 <_Z16_fetch_usbserialv+0x40>)
 80a2e10:	b007      	add	sp, #28
 80a2e12:	bd30      	pop	{r4, r5, pc}
 80a2e14:	20000578 	.word	0x20000578
 80a2e18:	20000700 	.word	0x20000700
 80a2e1c:	2000048c 	.word	0x2000048c
 80a2e20:	080a2cf1 	.word	0x080a2cf1

080a2e24 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2e24:	b510      	push	{r4, lr}
 80a2e26:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2e28:	2214      	movs	r2, #20
 80a2e2a:	2100      	movs	r1, #0
 80a2e2c:	f001 fcdf 	bl	80a47ee <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2e30:	4b05      	ldr	r3, [pc, #20]	; (80a2e48 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2e32:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2e34:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2e36:	4b05      	ldr	r3, [pc, #20]	; (80a2e4c <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2e38:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2e3a:	f240 1301 	movw	r3, #257	; 0x101
 80a2e3e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2e40:	2381      	movs	r3, #129	; 0x81
 80a2e42:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2e44:	bd10      	pop	{r4, pc}
 80a2e46:	bf00      	nop
 80a2e48:	200007b0 	.word	0x200007b0
 80a2e4c:	20000718 	.word	0x20000718

080a2e50 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2e50:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2e52:	4c0e      	ldr	r4, [pc, #56]	; (80a2e8c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2e54:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2e56:	a801      	add	r0, sp, #4
 80a2e58:	f7ff ffe4 	bl	80a2e24 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2e5c:	6823      	ldr	r3, [r4, #0]
 80a2e5e:	07db      	lsls	r3, r3, #31
 80a2e60:	d410      	bmi.n	80a2e84 <_Z17_fetch_usbserial1v+0x34>
 80a2e62:	4620      	mov	r0, r4
 80a2e64:	f7fd f92c 	bl	80a00c0 <__cxa_guard_acquire>
 80a2e68:	b160      	cbz	r0, 80a2e84 <_Z17_fetch_usbserial1v+0x34>
 80a2e6a:	aa01      	add	r2, sp, #4
 80a2e6c:	2101      	movs	r1, #1
 80a2e6e:	4808      	ldr	r0, [pc, #32]	; (80a2e90 <_Z17_fetch_usbserial1v+0x40>)
 80a2e70:	f7ff ff7e 	bl	80a2d70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2e74:	4620      	mov	r0, r4
 80a2e76:	f7fd f928 	bl	80a00ca <__cxa_guard_release>
 80a2e7a:	4a06      	ldr	r2, [pc, #24]	; (80a2e94 <_Z17_fetch_usbserial1v+0x44>)
 80a2e7c:	4906      	ldr	r1, [pc, #24]	; (80a2e98 <_Z17_fetch_usbserial1v+0x48>)
 80a2e7e:	4804      	ldr	r0, [pc, #16]	; (80a2e90 <_Z17_fetch_usbserial1v+0x40>)
 80a2e80:	f000 fa76 	bl	80a3370 <__aeabi_atexit>
  return _usbserial1;
}
 80a2e84:	4802      	ldr	r0, [pc, #8]	; (80a2e90 <_Z17_fetch_usbserial1v+0x40>)
 80a2e86:	b006      	add	sp, #24
 80a2e88:	bd10      	pop	{r4, pc}
 80a2e8a:	bf00      	nop
 80a2e8c:	20000714 	.word	0x20000714
 80a2e90:	2000079c 	.word	0x2000079c
 80a2e94:	2000048c 	.word	0x2000048c
 80a2e98:	080a2cf1 	.word	0x080a2cf1

080a2e9c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2e9c:	4770      	bx	lr

080a2e9e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2e9e:	7441      	strb	r1, [r0, #17]
 80a2ea0:	4770      	bx	lr

080a2ea2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2ea2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2ea4:	7c00      	ldrb	r0, [r0, #16]
 80a2ea6:	f7fe ff11 	bl	80a1ccc <HAL_USART_Available_Data_For_Write>
}
 80a2eaa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2eae:	bd08      	pop	{r3, pc}

080a2eb0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2eb0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2eb2:	7c00      	ldrb	r0, [r0, #16]
 80a2eb4:	f7fe fee2 	bl	80a1c7c <HAL_USART_Available_Data>
}
 80a2eb8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2ebc:	bd08      	pop	{r3, pc}

080a2ebe <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2ebe:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2ec0:	7c00      	ldrb	r0, [r0, #16]
 80a2ec2:	f7fe feeb 	bl	80a1c9c <HAL_USART_Peek_Data>
}
 80a2ec6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2eca:	bf28      	it	cs
 80a2ecc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2ed0:	bd08      	pop	{r3, pc}

080a2ed2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2ed2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2ed4:	7c00      	ldrb	r0, [r0, #16]
 80a2ed6:	f7fe fed9 	bl	80a1c8c <HAL_USART_Read_Data>
}
 80a2eda:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2ede:	bf28      	it	cs
 80a2ee0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2ee4:	bd08      	pop	{r3, pc}

080a2ee6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2ee6:	7c00      	ldrb	r0, [r0, #16]
 80a2ee8:	f7fe bee0 	b.w	80a1cac <HAL_USART_Flush_Data>

080a2eec <_ZN11USARTSerialD0Ev>:
 80a2eec:	b510      	push	{r4, lr}
 80a2eee:	4604      	mov	r4, r0
 80a2ef0:	2114      	movs	r1, #20
 80a2ef2:	f000 fa42 	bl	80a337a <_ZdlPvj>
 80a2ef6:	4620      	mov	r0, r4
 80a2ef8:	bd10      	pop	{r4, pc}

080a2efa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2efa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2efc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2efe:	4604      	mov	r4, r0
 80a2f00:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2f02:	b925      	cbnz	r5, 80a2f0e <_ZN11USARTSerial5writeEh+0x14>
 80a2f04:	7c00      	ldrb	r0, [r0, #16]
 80a2f06:	f7fe fee1 	bl	80a1ccc <HAL_USART_Available_Data_For_Write>
 80a2f0a:	2800      	cmp	r0, #0
 80a2f0c:	dd05      	ble.n	80a2f1a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2f0e:	4631      	mov	r1, r6
 80a2f10:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2f12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2f16:	f7fe bea9 	b.w	80a1c6c <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2f1a:	4628      	mov	r0, r5
 80a2f1c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2f20 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2f20:	b510      	push	{r4, lr}
 80a2f22:	4604      	mov	r4, r0
 80a2f24:	4608      	mov	r0, r1
 80a2f26:	4611      	mov	r1, r2
 80a2f28:	2200      	movs	r2, #0
 80a2f2a:	6062      	str	r2, [r4, #4]
 80a2f2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2f30:	60a2      	str	r2, [r4, #8]
 80a2f32:	4a05      	ldr	r2, [pc, #20]	; (80a2f48 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2f34:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2f36:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2f38:	2201      	movs	r2, #1
 80a2f3a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2f3c:	461a      	mov	r2, r3
 80a2f3e:	f7fe fe8d 	bl	80a1c5c <HAL_USART_Init>
}
 80a2f42:	4620      	mov	r0, r4
 80a2f44:	bd10      	pop	{r4, pc}
 80a2f46:	bf00      	nop
 80a2f48:	080a50d0 	.word	0x080a50d0

080a2f4c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2f4c:	7c00      	ldrb	r0, [r0, #16]
 80a2f4e:	f7fe beb5 	b.w	80a1cbc <HAL_USART_Is_Enabled>
	...

080a2f54 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2f54:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2f56:	4d0c      	ldr	r5, [pc, #48]	; (80a2f88 <_Z22__fetch_global_Serial1v+0x34>)
 80a2f58:	6829      	ldr	r1, [r5, #0]
 80a2f5a:	f011 0401 	ands.w	r4, r1, #1
 80a2f5e:	d111      	bne.n	80a2f84 <_Z22__fetch_global_Serial1v+0x30>
 80a2f60:	4628      	mov	r0, r5
 80a2f62:	f7fd f8ad 	bl	80a00c0 <__cxa_guard_acquire>
 80a2f66:	b168      	cbz	r0, 80a2f84 <_Z22__fetch_global_Serial1v+0x30>
 80a2f68:	4a08      	ldr	r2, [pc, #32]	; (80a2f8c <_Z22__fetch_global_Serial1v+0x38>)
 80a2f6a:	4621      	mov	r1, r4
 80a2f6c:	4b08      	ldr	r3, [pc, #32]	; (80a2f90 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2f6e:	4809      	ldr	r0, [pc, #36]	; (80a2f94 <_Z22__fetch_global_Serial1v+0x40>)
 80a2f70:	f7ff ffd6 	bl	80a2f20 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2f74:	4628      	mov	r0, r5
 80a2f76:	f7fd f8a8 	bl	80a00ca <__cxa_guard_release>
 80a2f7a:	4a07      	ldr	r2, [pc, #28]	; (80a2f98 <_Z22__fetch_global_Serial1v+0x44>)
 80a2f7c:	4907      	ldr	r1, [pc, #28]	; (80a2f9c <_Z22__fetch_global_Serial1v+0x48>)
 80a2f7e:	4805      	ldr	r0, [pc, #20]	; (80a2f94 <_Z22__fetch_global_Serial1v+0x40>)
 80a2f80:	f000 f9f6 	bl	80a3370 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2f84:	4803      	ldr	r0, [pc, #12]	; (80a2f94 <_Z22__fetch_global_Serial1v+0x40>)
 80a2f86:	bd38      	pop	{r3, r4, r5, pc}
 80a2f88:	2000094c 	.word	0x2000094c
 80a2f8c:	20000950 	.word	0x20000950
 80a2f90:	200008c8 	.word	0x200008c8
 80a2f94:	200008b4 	.word	0x200008b4
 80a2f98:	2000048c 	.word	0x2000048c
 80a2f9c:	080a2e9d 	.word	0x080a2e9d

080a2fa0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2fa0:	4770      	bx	lr

080a2fa2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2fa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2fa4:	4606      	mov	r6, r0
 80a2fa6:	4615      	mov	r5, r2
 80a2fa8:	460c      	mov	r4, r1
 80a2faa:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2fac:	42bc      	cmp	r4, r7
 80a2fae:	d006      	beq.n	80a2fbe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2fb0:	6833      	ldr	r3, [r6, #0]
 80a2fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2fb6:	689b      	ldr	r3, [r3, #8]
 80a2fb8:	4630      	mov	r0, r6
 80a2fba:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2fbc:	e7f6      	b.n	80a2fac <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2fbe:	4628      	mov	r0, r5
 80a2fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2fc2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2fc2:	2200      	movs	r2, #0
 80a2fc4:	7c00      	ldrb	r0, [r0, #16]
 80a2fc6:	f7fe bea9 	b.w	80a1d1c <HAL_I2C_Write_Data>

080a2fca <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2fca:	2100      	movs	r1, #0
 80a2fcc:	7c00      	ldrb	r0, [r0, #16]
 80a2fce:	f7fe bead 	b.w	80a1d2c <HAL_I2C_Available_Data>

080a2fd2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2fd2:	2100      	movs	r1, #0
 80a2fd4:	7c00      	ldrb	r0, [r0, #16]
 80a2fd6:	f7fe beb1 	b.w	80a1d3c <HAL_I2C_Read_Data>

080a2fda <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2fda:	2100      	movs	r1, #0
 80a2fdc:	7c00      	ldrb	r0, [r0, #16]
 80a2fde:	f7fe beb5 	b.w	80a1d4c <HAL_I2C_Peek_Data>

080a2fe2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2fe2:	2100      	movs	r1, #0
 80a2fe4:	7c00      	ldrb	r0, [r0, #16]
 80a2fe6:	f7fe beb9 	b.w	80a1d5c <HAL_I2C_Flush_Data>

080a2fea <_ZN7TwoWireD0Ev>:
 80a2fea:	b510      	push	{r4, lr}
 80a2fec:	4604      	mov	r4, r0
 80a2fee:	2114      	movs	r1, #20
 80a2ff0:	f000 f9c3 	bl	80a337a <_ZdlPvj>
 80a2ff4:	4620      	mov	r0, r4
 80a2ff6:	bd10      	pop	{r4, pc}

080a2ff8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2ff8:	b510      	push	{r4, lr}
 80a2ffa:	4604      	mov	r4, r0
 80a2ffc:	4608      	mov	r0, r1
 80a2ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3002:	60a3      	str	r3, [r4, #8]
 80a3004:	4b04      	ldr	r3, [pc, #16]	; (80a3018 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a3006:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a3008:	7420      	strb	r0, [r4, #16]
 80a300a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a300c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a300e:	f7fe feb5 	bl	80a1d7c <HAL_I2C_Init>

}
 80a3012:	4620      	mov	r0, r4
 80a3014:	bd10      	pop	{r4, pc}
 80a3016:	bf00      	nop
 80a3018:	080a5100 	.word	0x080a5100

080a301c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a301c:	2300      	movs	r3, #0
 80a301e:	461a      	mov	r2, r3
 80a3020:	4619      	mov	r1, r3
 80a3022:	7c00      	ldrb	r0, [r0, #16]
 80a3024:	f7fe be5a 	b.w	80a1cdc <HAL_I2C_Begin>

080a3028 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a3028:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a302a:	2400      	movs	r4, #0
 80a302c:	7c00      	ldrb	r0, [r0, #16]
 80a302e:	9400      	str	r4, [sp, #0]
 80a3030:	f7fe fe5c 	bl	80a1cec <HAL_I2C_Request_Data>
  return result;
}
 80a3034:	b2c0      	uxtb	r0, r0
 80a3036:	b002      	add	sp, #8
 80a3038:	bd10      	pop	{r4, pc}

080a303a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a303a:	2301      	movs	r3, #1
 80a303c:	f7ff bff4 	b.w	80a3028 <_ZN7TwoWire11requestFromEhhh>

080a3040 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a3040:	2200      	movs	r2, #0
 80a3042:	7c00      	ldrb	r0, [r0, #16]
 80a3044:	f7fe be5a 	b.w	80a1cfc <HAL_I2C_Begin_Transmission>

080a3048 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a3048:	2200      	movs	r2, #0
 80a304a:	7c00      	ldrb	r0, [r0, #16]
 80a304c:	f7fe be5e 	b.w	80a1d0c <HAL_I2C_End_Transmission>

080a3050 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a3050:	2101      	movs	r1, #1
 80a3052:	f7ff bff9 	b.w	80a3048 <_ZN7TwoWire15endTransmissionEh>

080a3056 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a3056:	2100      	movs	r1, #0
 80a3058:	7c00      	ldrb	r0, [r0, #16]
 80a305a:	f7fe be87 	b.w	80a1d6c <HAL_I2C_Is_Enabled>

080a305e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a305e:	2200      	movs	r2, #0
 80a3060:	4611      	mov	r1, r2
 80a3062:	6840      	ldr	r0, [r0, #4]
 80a3064:	f7fe bf70 	b.w	80a1f48 <network_ready>

080a3068 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3068:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a306a:	4616      	mov	r6, r2
 80a306c:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a306e:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3070:	460f      	mov	r7, r1
 80a3072:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a3074:	2100      	movs	r1, #0
 80a3076:	a803      	add	r0, sp, #12
 80a3078:	f001 fbb9 	bl	80a47ee <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a307c:	4630      	mov	r0, r6
 80a307e:	f001 fbe7 	bl	80a4850 <strlen>
 80a3082:	2500      	movs	r5, #0
 80a3084:	9500      	str	r5, [sp, #0]
 80a3086:	b281      	uxth	r1, r0
 80a3088:	687b      	ldr	r3, [r7, #4]
 80a308a:	aa03      	add	r2, sp, #12
 80a308c:	4630      	mov	r0, r6
 80a308e:	f7fe ff07 	bl	80a1ea0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3092:	b120      	cbz	r0, 80a309e <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a3094:	4629      	mov	r1, r5
 80a3096:	4620      	mov	r0, r4
 80a3098:	f7ff fdf0 	bl	80a2c7c <_ZN9IPAddressC1Em>
 80a309c:	e003      	b.n	80a30a6 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a309e:	a903      	add	r1, sp, #12
 80a30a0:	4620      	mov	r0, r4
 80a30a2:	f7ff fdd9 	bl	80a2c58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a30a6:	4620      	mov	r0, r4
 80a30a8:	b009      	add	sp, #36	; 0x24
 80a30aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a30ac <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a30ac:	2200      	movs	r2, #0
 80a30ae:	4611      	mov	r1, r2
 80a30b0:	6840      	ldr	r0, [r0, #4]
 80a30b2:	f7fe bf69 	b.w	80a1f88 <network_listening>

080a30b6 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a30b6:	2200      	movs	r2, #0
 80a30b8:	4611      	mov	r1, r2
 80a30ba:	6840      	ldr	r0, [r0, #4]
 80a30bc:	f7fe bf74 	b.w	80a1fa8 <network_get_listen_timeout>

080a30c0 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a30c0:	2200      	movs	r2, #0
 80a30c2:	6840      	ldr	r0, [r0, #4]
 80a30c4:	f7fe bf68 	b.w	80a1f98 <network_set_listen_timeout>

080a30c8 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a30c8:	2200      	movs	r2, #0
 80a30ca:	f081 0101 	eor.w	r1, r1, #1
 80a30ce:	6840      	ldr	r0, [r0, #4]
 80a30d0:	f7fe bf52 	b.w	80a1f78 <network_listen>

080a30d4 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a30d4:	2300      	movs	r3, #0
 80a30d6:	461a      	mov	r2, r3
 80a30d8:	4619      	mov	r1, r3
 80a30da:	6840      	ldr	r0, [r0, #4]
 80a30dc:	f7fe bf44 	b.w	80a1f68 <network_off>

080a30e0 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a30e0:	2200      	movs	r2, #0
 80a30e2:	4611      	mov	r1, r2
 80a30e4:	6840      	ldr	r0, [r0, #4]
 80a30e6:	f7fe bf1f 	b.w	80a1f28 <network_connecting>

080a30ea <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a30ea:	2200      	movs	r2, #0
 80a30ec:	2102      	movs	r1, #2
 80a30ee:	6840      	ldr	r0, [r0, #4]
 80a30f0:	f7fe bf22 	b.w	80a1f38 <network_disconnect>

080a30f4 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a30f4:	2300      	movs	r3, #0
 80a30f6:	461a      	mov	r2, r3
 80a30f8:	6840      	ldr	r0, [r0, #4]
 80a30fa:	f7fe bf0d 	b.w	80a1f18 <network_connect>
	...

080a3100 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a3100:	4b02      	ldr	r3, [pc, #8]	; (80a310c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a3102:	2204      	movs	r2, #4
 80a3104:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a3106:	4a02      	ldr	r2, [pc, #8]	; (80a3110 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a3108:	601a      	str	r2, [r3, #0]
 80a310a:	4770      	bx	lr
 80a310c:	200009d4 	.word	0x200009d4
 80a3110:	080a5128 	.word	0x080a5128

080a3114 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a3114:	2300      	movs	r3, #0
 80a3116:	461a      	mov	r2, r3
 80a3118:	6840      	ldr	r0, [r0, #4]
 80a311a:	f7fe befd 	b.w	80a1f18 <network_connect>

080a311e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a311e:	2200      	movs	r2, #0
 80a3120:	2102      	movs	r1, #2
 80a3122:	6840      	ldr	r0, [r0, #4]
 80a3124:	f7fe bf08 	b.w	80a1f38 <network_disconnect>

080a3128 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a3128:	2200      	movs	r2, #0
 80a312a:	4611      	mov	r1, r2
 80a312c:	6840      	ldr	r0, [r0, #4]
 80a312e:	f7fe befb 	b.w	80a1f28 <network_connecting>

080a3132 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a3132:	2200      	movs	r2, #0
 80a3134:	4611      	mov	r1, r2
 80a3136:	6840      	ldr	r0, [r0, #4]
 80a3138:	f7fe bf06 	b.w	80a1f48 <network_ready>

080a313c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a313c:	2300      	movs	r3, #0
 80a313e:	461a      	mov	r2, r3
 80a3140:	4619      	mov	r1, r3
 80a3142:	6840      	ldr	r0, [r0, #4]
 80a3144:	f7fe bf08 	b.w	80a1f58 <network_on>

080a3148 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a3148:	2300      	movs	r3, #0
 80a314a:	461a      	mov	r2, r3
 80a314c:	4619      	mov	r1, r3
 80a314e:	6840      	ldr	r0, [r0, #4]
 80a3150:	f7fe bf0a 	b.w	80a1f68 <network_off>

080a3154 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a3154:	2200      	movs	r2, #0
 80a3156:	f081 0101 	eor.w	r1, r1, #1
 80a315a:	6840      	ldr	r0, [r0, #4]
 80a315c:	f7fe bf0c 	b.w	80a1f78 <network_listen>

080a3160 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a3160:	2200      	movs	r2, #0
 80a3162:	6840      	ldr	r0, [r0, #4]
 80a3164:	f7fe bf18 	b.w	80a1f98 <network_set_listen_timeout>

080a3168 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a3168:	2200      	movs	r2, #0
 80a316a:	4611      	mov	r1, r2
 80a316c:	6840      	ldr	r0, [r0, #4]
 80a316e:	f7fe bf1b 	b.w	80a1fa8 <network_get_listen_timeout>

080a3172 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a3172:	2200      	movs	r2, #0
 80a3174:	4611      	mov	r1, r2
 80a3176:	6840      	ldr	r0, [r0, #4]
 80a3178:	f7fe bf06 	b.w	80a1f88 <network_listening>

080a317c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a317c:	b570      	push	{r4, r5, r6, lr}
 80a317e:	4616      	mov	r6, r2
 80a3180:	b08e      	sub	sp, #56	; 0x38
 80a3182:	4604      	mov	r4, r0
    IPAddress addr;
 80a3184:	a808      	add	r0, sp, #32
 80a3186:	f7ff fd59 	bl	80a2c3c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a318a:	2211      	movs	r2, #17
 80a318c:	2100      	movs	r1, #0
 80a318e:	a803      	add	r0, sp, #12
 80a3190:	f001 fb2d 	bl	80a47ee <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3194:	4630      	mov	r0, r6
 80a3196:	f001 fb5b 	bl	80a4850 <strlen>
 80a319a:	2500      	movs	r5, #0
 80a319c:	4b0a      	ldr	r3, [pc, #40]	; (80a31c8 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a319e:	9500      	str	r5, [sp, #0]
 80a31a0:	b281      	uxth	r1, r0
 80a31a2:	685b      	ldr	r3, [r3, #4]
 80a31a4:	aa03      	add	r2, sp, #12
 80a31a6:	4630      	mov	r0, r6
 80a31a8:	f7fe fe7a 	bl	80a1ea0 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a31ac:	b120      	cbz	r0, 80a31b8 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a31ae:	4629      	mov	r1, r5
 80a31b0:	4620      	mov	r0, r4
 80a31b2:	f7ff fd63 	bl	80a2c7c <_ZN9IPAddressC1Em>
 80a31b6:	e003      	b.n	80a31c0 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a31b8:	a903      	add	r1, sp, #12
 80a31ba:	4620      	mov	r0, r4
 80a31bc:	f7ff fd4c 	bl	80a2c58 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a31c0:	4620      	mov	r0, r4
 80a31c2:	b00e      	add	sp, #56	; 0x38
 80a31c4:	bd70      	pop	{r4, r5, r6, pc}
 80a31c6:	bf00      	nop
 80a31c8:	200009d4 	.word	0x200009d4

080a31cc <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a31cc:	4b03      	ldr	r3, [pc, #12]	; (80a31dc <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a31ce:	4a04      	ldr	r2, [pc, #16]	; (80a31e0 <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a31d0:	2804      	cmp	r0, #4
 80a31d2:	bf0c      	ite	eq
 80a31d4:	4610      	moveq	r0, r2
 80a31d6:	4618      	movne	r0, r3
 80a31d8:	4770      	bx	lr
 80a31da:	bf00      	nop
 80a31dc:	200009dc 	.word	0x200009dc
 80a31e0:	200009d4 	.word	0x200009d4

080a31e4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a31e4:	4b02      	ldr	r3, [pc, #8]	; (80a31f0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a31e6:	4a03      	ldr	r2, [pc, #12]	; (80a31f4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a31e8:	601a      	str	r2, [r3, #0]
 80a31ea:	2200      	movs	r2, #0
 80a31ec:	605a      	str	r2, [r3, #4]
 80a31ee:	4770      	bx	lr
 80a31f0:	200009dc 	.word	0x200009dc
 80a31f4:	080a515c 	.word	0x080a515c

080a31f8 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a31f8:	b510      	push	{r4, lr}
 80a31fa:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a31fc:	480f      	ldr	r0, [pc, #60]	; (80a323c <pinAvailable+0x44>)
 80a31fe:	f7fe ffbb 	bl	80a2178 <_ZN8SPIClass9isEnabledEv>
 80a3202:	b128      	cbz	r0, 80a3210 <pinAvailable+0x18>
 80a3204:	f1a4 030d 	sub.w	r3, r4, #13
 80a3208:	2b02      	cmp	r3, #2
 80a320a:	d801      	bhi.n	80a3210 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a320c:	2000      	movs	r0, #0
 80a320e:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3210:	f000 f88e 	bl	80a3330 <_Z19__fetch_global_Wirev>
 80a3214:	f7ff ff1f 	bl	80a3056 <_ZN7TwoWire9isEnabledEv>
 80a3218:	b108      	cbz	r0, 80a321e <pinAvailable+0x26>
 80a321a:	2c01      	cmp	r4, #1
 80a321c:	d9f6      	bls.n	80a320c <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a321e:	f7ff fe99 	bl	80a2f54 <_Z22__fetch_global_Serial1v>
 80a3222:	f7ff fe93 	bl	80a2f4c <_ZN11USARTSerial9isEnabledEv>
 80a3226:	b118      	cbz	r0, 80a3230 <pinAvailable+0x38>
 80a3228:	f1a4 0312 	sub.w	r3, r4, #18
 80a322c:	2b01      	cmp	r3, #1
 80a322e:	d9ed      	bls.n	80a320c <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a3230:	2c17      	cmp	r4, #23
 80a3232:	bf8c      	ite	hi
 80a3234:	2000      	movhi	r0, #0
 80a3236:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a3238:	bd10      	pop	{r4, pc}
 80a323a:	bf00      	nop
 80a323c:	200009e4 	.word	0x200009e4

080a3240 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3240:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a3242:	b538      	push	{r3, r4, r5, lr}
 80a3244:	4604      	mov	r4, r0
 80a3246:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a3248:	d80a      	bhi.n	80a3260 <pinMode+0x20>
 80a324a:	29ff      	cmp	r1, #255	; 0xff
 80a324c:	d008      	beq.n	80a3260 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a324e:	f7ff ffd3 	bl	80a31f8 <pinAvailable>
 80a3252:	b128      	cbz	r0, 80a3260 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a3254:	4629      	mov	r1, r5
 80a3256:	4620      	mov	r0, r4
}
 80a3258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a325c:	f7fe bc7e 	b.w	80a1b5c <HAL_Pin_Mode>
 80a3260:	bd38      	pop	{r3, r4, r5, pc}

080a3262 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a3262:	b538      	push	{r3, r4, r5, lr}
 80a3264:	4604      	mov	r4, r0
 80a3266:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3268:	f7fe fc80 	bl	80a1b6c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a326c:	28ff      	cmp	r0, #255	; 0xff
 80a326e:	d010      	beq.n	80a3292 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a3270:	2806      	cmp	r0, #6
 80a3272:	d804      	bhi.n	80a327e <digitalWrite+0x1c>
 80a3274:	234d      	movs	r3, #77	; 0x4d
 80a3276:	fa23 f000 	lsr.w	r0, r3, r0
 80a327a:	07c3      	lsls	r3, r0, #31
 80a327c:	d409      	bmi.n	80a3292 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a327e:	4620      	mov	r0, r4
 80a3280:	f7ff ffba 	bl	80a31f8 <pinAvailable>
 80a3284:	b128      	cbz	r0, 80a3292 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a3286:	4629      	mov	r1, r5
 80a3288:	4620      	mov	r0, r4
}
 80a328a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a328e:	f7fe bc75 	b.w	80a1b7c <HAL_GPIO_Write>
 80a3292:	bd38      	pop	{r3, r4, r5, pc}

080a3294 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a3294:	b510      	push	{r4, lr}
 80a3296:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a3298:	f7fe fc68 	bl	80a1b6c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a329c:	3804      	subs	r0, #4
 80a329e:	b2c0      	uxtb	r0, r0
 80a32a0:	2801      	cmp	r0, #1
 80a32a2:	d908      	bls.n	80a32b6 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a32a4:	4620      	mov	r0, r4
 80a32a6:	f7ff ffa7 	bl	80a31f8 <pinAvailable>
 80a32aa:	b120      	cbz	r0, 80a32b6 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a32ac:	4620      	mov	r0, r4
}
 80a32ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a32b2:	f7fe bc6b 	b.w	80a1b8c <HAL_GPIO_Read>
}
 80a32b6:	2000      	movs	r0, #0
 80a32b8:	bd10      	pop	{r4, pc}
	...

080a32bc <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a32bc:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a32be:	4c0c      	ldr	r4, [pc, #48]	; (80a32f0 <_GLOBAL__sub_I_SPI+0x34>)
 80a32c0:	4e0c      	ldr	r6, [pc, #48]	; (80a32f4 <_GLOBAL__sub_I_SPI+0x38>)
 80a32c2:	4d0d      	ldr	r5, [pc, #52]	; (80a32f8 <_GLOBAL__sub_I_SPI+0x3c>)
 80a32c4:	2100      	movs	r1, #0
 80a32c6:	4620      	mov	r0, r4
 80a32c8:	f7fe feae 	bl	80a2028 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a32cc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a32ce:	4c0b      	ldr	r4, [pc, #44]	; (80a32fc <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a32d0:	4632      	mov	r2, r6
 80a32d2:	4629      	mov	r1, r5
 80a32d4:	f000 f84c 	bl	80a3370 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a32d8:	2101      	movs	r1, #1
 80a32da:	4620      	mov	r0, r4
 80a32dc:	f7fe fea4 	bl	80a2028 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a32e0:	4632      	mov	r2, r6
 80a32e2:	4629      	mov	r1, r5
 80a32e4:	4620      	mov	r0, r4
 80a32e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a32ea:	f000 b841 	b.w	80a3370 <__aeabi_atexit>
 80a32ee:	bf00      	nop
 80a32f0:	200009e4 	.word	0x200009e4
 80a32f4:	2000048c 	.word	0x2000048c
 80a32f8:	080a2019 	.word	0x080a2019
 80a32fc:	200009f4 	.word	0x200009f4

080a3300 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a3300:	b513      	push	{r0, r1, r4, lr}
 80a3302:	4c08      	ldr	r4, [pc, #32]	; (80a3324 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a3304:	2300      	movs	r3, #0
 80a3306:	461a      	mov	r2, r3
 80a3308:	4619      	mov	r1, r3
 80a330a:	9300      	str	r3, [sp, #0]
 80a330c:	4620      	mov	r0, r4
 80a330e:	f7ff fccb 	bl	80a2ca8 <_ZN9IPAddressC1Ehhhh>
 80a3312:	4620      	mov	r0, r4
 80a3314:	4a04      	ldr	r2, [pc, #16]	; (80a3328 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a3316:	4905      	ldr	r1, [pc, #20]	; (80a332c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a3318:	b002      	add	sp, #8
 80a331a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a331e:	f000 b827 	b.w	80a3370 <__aeabi_atexit>
 80a3322:	bf00      	nop
 80a3324:	20000a08 	.word	0x20000a08
 80a3328:	2000048c 	.word	0x2000048c
 80a332c:	080a2bf9 	.word	0x080a2bf9

080a3330 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a3330:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a3332:	4d0b      	ldr	r5, [pc, #44]	; (80a3360 <_Z19__fetch_global_Wirev+0x30>)
 80a3334:	6829      	ldr	r1, [r5, #0]
 80a3336:	f011 0401 	ands.w	r4, r1, #1
 80a333a:	d10f      	bne.n	80a335c <_Z19__fetch_global_Wirev+0x2c>
 80a333c:	4628      	mov	r0, r5
 80a333e:	f7fc febf 	bl	80a00c0 <__cxa_guard_acquire>
 80a3342:	b158      	cbz	r0, 80a335c <_Z19__fetch_global_Wirev+0x2c>
 80a3344:	4621      	mov	r1, r4
 80a3346:	4807      	ldr	r0, [pc, #28]	; (80a3364 <_Z19__fetch_global_Wirev+0x34>)
 80a3348:	f7ff fe56 	bl	80a2ff8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a334c:	4628      	mov	r0, r5
 80a334e:	f7fc febc 	bl	80a00ca <__cxa_guard_release>
 80a3352:	4a05      	ldr	r2, [pc, #20]	; (80a3368 <_Z19__fetch_global_Wirev+0x38>)
 80a3354:	4905      	ldr	r1, [pc, #20]	; (80a336c <_Z19__fetch_global_Wirev+0x3c>)
 80a3356:	4803      	ldr	r0, [pc, #12]	; (80a3364 <_Z19__fetch_global_Wirev+0x34>)
 80a3358:	f000 f80a 	bl	80a3370 <__aeabi_atexit>
	return wire;
}
 80a335c:	4801      	ldr	r0, [pc, #4]	; (80a3364 <_Z19__fetch_global_Wirev+0x34>)
 80a335e:	bd38      	pop	{r3, r4, r5, pc}
 80a3360:	20000a20 	.word	0x20000a20
 80a3364:	20000a24 	.word	0x20000a24
 80a3368:	2000048c 	.word	0x2000048c
 80a336c:	080a2fa1 	.word	0x080a2fa1

080a3370 <__aeabi_atexit>:
 80a3370:	460b      	mov	r3, r1
 80a3372:	4601      	mov	r1, r0
 80a3374:	4618      	mov	r0, r3
 80a3376:	f001 ba21 	b.w	80a47bc <__cxa_atexit>

080a337a <_ZdlPvj>:
 80a337a:	f7fc be92 	b.w	80a00a2 <_ZdlPv>
	...

080a3380 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3380:	4b18      	ldr	r3, [pc, #96]	; (80a33e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3382:	681a      	ldr	r2, [r3, #0]
 80a3384:	07d1      	lsls	r1, r2, #31
 80a3386:	bf5c      	itt	pl
 80a3388:	2201      	movpl	r2, #1
 80a338a:	601a      	strpl	r2, [r3, #0]
 80a338c:	4b16      	ldr	r3, [pc, #88]	; (80a33e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a338e:	681a      	ldr	r2, [r3, #0]
 80a3390:	07d2      	lsls	r2, r2, #31
 80a3392:	bf5c      	itt	pl
 80a3394:	2201      	movpl	r2, #1
 80a3396:	601a      	strpl	r2, [r3, #0]
 80a3398:	4b14      	ldr	r3, [pc, #80]	; (80a33ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a339a:	681a      	ldr	r2, [r3, #0]
 80a339c:	07d0      	lsls	r0, r2, #31
 80a339e:	bf5c      	itt	pl
 80a33a0:	2201      	movpl	r2, #1
 80a33a2:	601a      	strpl	r2, [r3, #0]
 80a33a4:	4b12      	ldr	r3, [pc, #72]	; (80a33f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a33a6:	681a      	ldr	r2, [r3, #0]
 80a33a8:	07d1      	lsls	r1, r2, #31
 80a33aa:	bf5c      	itt	pl
 80a33ac:	2201      	movpl	r2, #1
 80a33ae:	601a      	strpl	r2, [r3, #0]
 80a33b0:	4b10      	ldr	r3, [pc, #64]	; (80a33f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a33b2:	681a      	ldr	r2, [r3, #0]
 80a33b4:	07d2      	lsls	r2, r2, #31
 80a33b6:	bf5c      	itt	pl
 80a33b8:	2201      	movpl	r2, #1
 80a33ba:	601a      	strpl	r2, [r3, #0]
 80a33bc:	4b0e      	ldr	r3, [pc, #56]	; (80a33f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a33be:	681a      	ldr	r2, [r3, #0]
 80a33c0:	07d0      	lsls	r0, r2, #31
 80a33c2:	bf5c      	itt	pl
 80a33c4:	2201      	movpl	r2, #1
 80a33c6:	601a      	strpl	r2, [r3, #0]
 80a33c8:	4b0c      	ldr	r3, [pc, #48]	; (80a33fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a33ca:	681a      	ldr	r2, [r3, #0]
 80a33cc:	07d1      	lsls	r1, r2, #31
 80a33ce:	bf5c      	itt	pl
 80a33d0:	2201      	movpl	r2, #1
 80a33d2:	601a      	strpl	r2, [r3, #0]
 80a33d4:	4b0a      	ldr	r3, [pc, #40]	; (80a3400 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a33d6:	681a      	ldr	r2, [r3, #0]
 80a33d8:	07d2      	lsls	r2, r2, #31
 80a33da:	bf5c      	itt	pl
 80a33dc:	2201      	movpl	r2, #1
 80a33de:	601a      	strpl	r2, [r3, #0]
 80a33e0:	4770      	bx	lr
 80a33e2:	bf00      	nop
 80a33e4:	20000a54 	.word	0x20000a54
 80a33e8:	20000a50 	.word	0x20000a50
 80a33ec:	20000a4c 	.word	0x20000a4c
 80a33f0:	20000a48 	.word	0x20000a48
 80a33f4:	20000a44 	.word	0x20000a44
 80a33f8:	20000a40 	.word	0x20000a40
 80a33fc:	20000a3c 	.word	0x20000a3c
 80a3400:	20000a38 	.word	0x20000a38

080a3404 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a3404:	4b24      	ldr	r3, [pc, #144]	; (80a3498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a3406:	681a      	ldr	r2, [r3, #0]
 80a3408:	07d0      	lsls	r0, r2, #31
 80a340a:	bf5c      	itt	pl
 80a340c:	2201      	movpl	r2, #1
 80a340e:	601a      	strpl	r2, [r3, #0]
 80a3410:	4b22      	ldr	r3, [pc, #136]	; (80a349c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a3412:	681a      	ldr	r2, [r3, #0]
 80a3414:	07d1      	lsls	r1, r2, #31
 80a3416:	bf5c      	itt	pl
 80a3418:	2201      	movpl	r2, #1
 80a341a:	601a      	strpl	r2, [r3, #0]
 80a341c:	4b20      	ldr	r3, [pc, #128]	; (80a34a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a341e:	681a      	ldr	r2, [r3, #0]
 80a3420:	07d2      	lsls	r2, r2, #31
 80a3422:	bf5c      	itt	pl
 80a3424:	2201      	movpl	r2, #1
 80a3426:	601a      	strpl	r2, [r3, #0]
 80a3428:	4b1e      	ldr	r3, [pc, #120]	; (80a34a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a342a:	681a      	ldr	r2, [r3, #0]
 80a342c:	07d0      	lsls	r0, r2, #31
 80a342e:	bf5c      	itt	pl
 80a3430:	2201      	movpl	r2, #1
 80a3432:	601a      	strpl	r2, [r3, #0]
 80a3434:	4b1c      	ldr	r3, [pc, #112]	; (80a34a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a3436:	681a      	ldr	r2, [r3, #0]
 80a3438:	07d1      	lsls	r1, r2, #31
 80a343a:	bf5c      	itt	pl
 80a343c:	2201      	movpl	r2, #1
 80a343e:	601a      	strpl	r2, [r3, #0]
 80a3440:	4b1a      	ldr	r3, [pc, #104]	; (80a34ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a3442:	681a      	ldr	r2, [r3, #0]
 80a3444:	07d2      	lsls	r2, r2, #31
 80a3446:	bf5c      	itt	pl
 80a3448:	2201      	movpl	r2, #1
 80a344a:	601a      	strpl	r2, [r3, #0]
 80a344c:	4b18      	ldr	r3, [pc, #96]	; (80a34b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a344e:	681a      	ldr	r2, [r3, #0]
 80a3450:	07d0      	lsls	r0, r2, #31
 80a3452:	bf5c      	itt	pl
 80a3454:	2201      	movpl	r2, #1
 80a3456:	601a      	strpl	r2, [r3, #0]
 80a3458:	4b16      	ldr	r3, [pc, #88]	; (80a34b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a345a:	681a      	ldr	r2, [r3, #0]
 80a345c:	07d1      	lsls	r1, r2, #31
 80a345e:	bf5c      	itt	pl
 80a3460:	2201      	movpl	r2, #1
 80a3462:	601a      	strpl	r2, [r3, #0]
 80a3464:	4b14      	ldr	r3, [pc, #80]	; (80a34b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3466:	681a      	ldr	r2, [r3, #0]
 80a3468:	07d2      	lsls	r2, r2, #31
 80a346a:	bf5c      	itt	pl
 80a346c:	2201      	movpl	r2, #1
 80a346e:	601a      	strpl	r2, [r3, #0]
 80a3470:	4b12      	ldr	r3, [pc, #72]	; (80a34bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a3472:	681a      	ldr	r2, [r3, #0]
 80a3474:	07d0      	lsls	r0, r2, #31
 80a3476:	bf5c      	itt	pl
 80a3478:	2201      	movpl	r2, #1
 80a347a:	601a      	strpl	r2, [r3, #0]
 80a347c:	4b10      	ldr	r3, [pc, #64]	; (80a34c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a347e:	681a      	ldr	r2, [r3, #0]
 80a3480:	07d1      	lsls	r1, r2, #31
 80a3482:	bf5c      	itt	pl
 80a3484:	2201      	movpl	r2, #1
 80a3486:	601a      	strpl	r2, [r3, #0]
 80a3488:	4b0e      	ldr	r3, [pc, #56]	; (80a34c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a348a:	681a      	ldr	r2, [r3, #0]
 80a348c:	07d2      	lsls	r2, r2, #31
 80a348e:	bf5c      	itt	pl
 80a3490:	2201      	movpl	r2, #1
 80a3492:	601a      	strpl	r2, [r3, #0]
 80a3494:	4770      	bx	lr
 80a3496:	bf00      	nop
 80a3498:	20000a84 	.word	0x20000a84
 80a349c:	20000a80 	.word	0x20000a80
 80a34a0:	20000a7c 	.word	0x20000a7c
 80a34a4:	20000a78 	.word	0x20000a78
 80a34a8:	20000a74 	.word	0x20000a74
 80a34ac:	20000a70 	.word	0x20000a70
 80a34b0:	20000a6c 	.word	0x20000a6c
 80a34b4:	20000a68 	.word	0x20000a68
 80a34b8:	20000a64 	.word	0x20000a64
 80a34bc:	20000a60 	.word	0x20000a60
 80a34c0:	20000a5c 	.word	0x20000a5c
 80a34c4:	20000a58 	.word	0x20000a58

080a34c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a34c8:	4b24      	ldr	r3, [pc, #144]	; (80a355c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a34ca:	681a      	ldr	r2, [r3, #0]
 80a34cc:	07d0      	lsls	r0, r2, #31
 80a34ce:	bf5c      	itt	pl
 80a34d0:	2201      	movpl	r2, #1
 80a34d2:	601a      	strpl	r2, [r3, #0]
 80a34d4:	4b22      	ldr	r3, [pc, #136]	; (80a3560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a34d6:	681a      	ldr	r2, [r3, #0]
 80a34d8:	07d1      	lsls	r1, r2, #31
 80a34da:	bf5c      	itt	pl
 80a34dc:	2201      	movpl	r2, #1
 80a34de:	601a      	strpl	r2, [r3, #0]
 80a34e0:	4b20      	ldr	r3, [pc, #128]	; (80a3564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a34e2:	681a      	ldr	r2, [r3, #0]
 80a34e4:	07d2      	lsls	r2, r2, #31
 80a34e6:	bf5c      	itt	pl
 80a34e8:	2201      	movpl	r2, #1
 80a34ea:	601a      	strpl	r2, [r3, #0]
 80a34ec:	4b1e      	ldr	r3, [pc, #120]	; (80a3568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a34ee:	681a      	ldr	r2, [r3, #0]
 80a34f0:	07d0      	lsls	r0, r2, #31
 80a34f2:	bf5c      	itt	pl
 80a34f4:	2201      	movpl	r2, #1
 80a34f6:	601a      	strpl	r2, [r3, #0]
 80a34f8:	4b1c      	ldr	r3, [pc, #112]	; (80a356c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a34fa:	681a      	ldr	r2, [r3, #0]
 80a34fc:	07d1      	lsls	r1, r2, #31
 80a34fe:	bf5c      	itt	pl
 80a3500:	2201      	movpl	r2, #1
 80a3502:	601a      	strpl	r2, [r3, #0]
 80a3504:	4b1a      	ldr	r3, [pc, #104]	; (80a3570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a3506:	681a      	ldr	r2, [r3, #0]
 80a3508:	07d2      	lsls	r2, r2, #31
 80a350a:	bf5c      	itt	pl
 80a350c:	2201      	movpl	r2, #1
 80a350e:	601a      	strpl	r2, [r3, #0]
 80a3510:	4b18      	ldr	r3, [pc, #96]	; (80a3574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a3512:	681a      	ldr	r2, [r3, #0]
 80a3514:	07d0      	lsls	r0, r2, #31
 80a3516:	bf5c      	itt	pl
 80a3518:	2201      	movpl	r2, #1
 80a351a:	601a      	strpl	r2, [r3, #0]
 80a351c:	4b16      	ldr	r3, [pc, #88]	; (80a3578 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a351e:	681a      	ldr	r2, [r3, #0]
 80a3520:	07d1      	lsls	r1, r2, #31
 80a3522:	bf5c      	itt	pl
 80a3524:	2201      	movpl	r2, #1
 80a3526:	601a      	strpl	r2, [r3, #0]
 80a3528:	4b14      	ldr	r3, [pc, #80]	; (80a357c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a352a:	681a      	ldr	r2, [r3, #0]
 80a352c:	07d2      	lsls	r2, r2, #31
 80a352e:	bf5c      	itt	pl
 80a3530:	2201      	movpl	r2, #1
 80a3532:	601a      	strpl	r2, [r3, #0]
 80a3534:	4b12      	ldr	r3, [pc, #72]	; (80a3580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a3536:	681a      	ldr	r2, [r3, #0]
 80a3538:	07d0      	lsls	r0, r2, #31
 80a353a:	bf5c      	itt	pl
 80a353c:	2201      	movpl	r2, #1
 80a353e:	601a      	strpl	r2, [r3, #0]
 80a3540:	4b10      	ldr	r3, [pc, #64]	; (80a3584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a3542:	681a      	ldr	r2, [r3, #0]
 80a3544:	07d1      	lsls	r1, r2, #31
 80a3546:	bf5c      	itt	pl
 80a3548:	2201      	movpl	r2, #1
 80a354a:	601a      	strpl	r2, [r3, #0]
 80a354c:	4b0e      	ldr	r3, [pc, #56]	; (80a3588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a354e:	681a      	ldr	r2, [r3, #0]
 80a3550:	07d2      	lsls	r2, r2, #31
 80a3552:	bf5c      	itt	pl
 80a3554:	2201      	movpl	r2, #1
 80a3556:	601a      	strpl	r2, [r3, #0]
 80a3558:	4770      	bx	lr
 80a355a:	bf00      	nop
 80a355c:	20000ab4 	.word	0x20000ab4
 80a3560:	20000ab0 	.word	0x20000ab0
 80a3564:	20000aac 	.word	0x20000aac
 80a3568:	20000aa8 	.word	0x20000aa8
 80a356c:	20000aa4 	.word	0x20000aa4
 80a3570:	20000aa0 	.word	0x20000aa0
 80a3574:	20000a9c 	.word	0x20000a9c
 80a3578:	20000a98 	.word	0x20000a98
 80a357c:	20000a94 	.word	0x20000a94
 80a3580:	20000a90 	.word	0x20000a90
 80a3584:	20000a8c 	.word	0x20000a8c
 80a3588:	20000a88 	.word	0x20000a88

080a358c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a358c:	4b18      	ldr	r3, [pc, #96]	; (80a35f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a358e:	681a      	ldr	r2, [r3, #0]
 80a3590:	07d1      	lsls	r1, r2, #31
 80a3592:	bf5c      	itt	pl
 80a3594:	2201      	movpl	r2, #1
 80a3596:	601a      	strpl	r2, [r3, #0]
 80a3598:	4b16      	ldr	r3, [pc, #88]	; (80a35f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a359a:	681a      	ldr	r2, [r3, #0]
 80a359c:	07d2      	lsls	r2, r2, #31
 80a359e:	bf5c      	itt	pl
 80a35a0:	2201      	movpl	r2, #1
 80a35a2:	601a      	strpl	r2, [r3, #0]
 80a35a4:	4b14      	ldr	r3, [pc, #80]	; (80a35f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a35a6:	681a      	ldr	r2, [r3, #0]
 80a35a8:	07d0      	lsls	r0, r2, #31
 80a35aa:	bf5c      	itt	pl
 80a35ac:	2201      	movpl	r2, #1
 80a35ae:	601a      	strpl	r2, [r3, #0]
 80a35b0:	4b12      	ldr	r3, [pc, #72]	; (80a35fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a35b2:	681a      	ldr	r2, [r3, #0]
 80a35b4:	07d1      	lsls	r1, r2, #31
 80a35b6:	bf5c      	itt	pl
 80a35b8:	2201      	movpl	r2, #1
 80a35ba:	601a      	strpl	r2, [r3, #0]
 80a35bc:	4b10      	ldr	r3, [pc, #64]	; (80a3600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a35be:	681a      	ldr	r2, [r3, #0]
 80a35c0:	07d2      	lsls	r2, r2, #31
 80a35c2:	bf5c      	itt	pl
 80a35c4:	2201      	movpl	r2, #1
 80a35c6:	601a      	strpl	r2, [r3, #0]
 80a35c8:	4b0e      	ldr	r3, [pc, #56]	; (80a3604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a35ca:	681a      	ldr	r2, [r3, #0]
 80a35cc:	07d0      	lsls	r0, r2, #31
 80a35ce:	bf5c      	itt	pl
 80a35d0:	2201      	movpl	r2, #1
 80a35d2:	601a      	strpl	r2, [r3, #0]
 80a35d4:	4b0c      	ldr	r3, [pc, #48]	; (80a3608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a35d6:	681a      	ldr	r2, [r3, #0]
 80a35d8:	07d1      	lsls	r1, r2, #31
 80a35da:	bf5c      	itt	pl
 80a35dc:	2201      	movpl	r2, #1
 80a35de:	601a      	strpl	r2, [r3, #0]
 80a35e0:	4b0a      	ldr	r3, [pc, #40]	; (80a360c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a35e2:	681a      	ldr	r2, [r3, #0]
 80a35e4:	07d2      	lsls	r2, r2, #31
 80a35e6:	bf5c      	itt	pl
 80a35e8:	2201      	movpl	r2, #1
 80a35ea:	601a      	strpl	r2, [r3, #0]
 80a35ec:	4770      	bx	lr
 80a35ee:	bf00      	nop
 80a35f0:	20000ad4 	.word	0x20000ad4
 80a35f4:	20000ad0 	.word	0x20000ad0
 80a35f8:	20000acc 	.word	0x20000acc
 80a35fc:	20000ac8 	.word	0x20000ac8
 80a3600:	20000ac4 	.word	0x20000ac4
 80a3604:	20000ac0 	.word	0x20000ac0
 80a3608:	20000abc 	.word	0x20000abc
 80a360c:	20000ab8 	.word	0x20000ab8

080a3610 <__aeabi_drsub>:
 80a3610:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3614:	e002      	b.n	80a361c <__adddf3>
 80a3616:	bf00      	nop

080a3618 <__aeabi_dsub>:
 80a3618:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a361c <__adddf3>:
 80a361c:	b530      	push	{r4, r5, lr}
 80a361e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3622:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3626:	ea94 0f05 	teq	r4, r5
 80a362a:	bf08      	it	eq
 80a362c:	ea90 0f02 	teqeq	r0, r2
 80a3630:	bf1f      	itttt	ne
 80a3632:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3636:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a363a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a363e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3642:	f000 80e2 	beq.w	80a380a <__adddf3+0x1ee>
 80a3646:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a364a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a364e:	bfb8      	it	lt
 80a3650:	426d      	neglt	r5, r5
 80a3652:	dd0c      	ble.n	80a366e <__adddf3+0x52>
 80a3654:	442c      	add	r4, r5
 80a3656:	ea80 0202 	eor.w	r2, r0, r2
 80a365a:	ea81 0303 	eor.w	r3, r1, r3
 80a365e:	ea82 0000 	eor.w	r0, r2, r0
 80a3662:	ea83 0101 	eor.w	r1, r3, r1
 80a3666:	ea80 0202 	eor.w	r2, r0, r2
 80a366a:	ea81 0303 	eor.w	r3, r1, r3
 80a366e:	2d36      	cmp	r5, #54	; 0x36
 80a3670:	bf88      	it	hi
 80a3672:	bd30      	pophi	{r4, r5, pc}
 80a3674:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3678:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a367c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3680:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3684:	d002      	beq.n	80a368c <__adddf3+0x70>
 80a3686:	4240      	negs	r0, r0
 80a3688:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a368c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3690:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3694:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3698:	d002      	beq.n	80a36a0 <__adddf3+0x84>
 80a369a:	4252      	negs	r2, r2
 80a369c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a36a0:	ea94 0f05 	teq	r4, r5
 80a36a4:	f000 80a7 	beq.w	80a37f6 <__adddf3+0x1da>
 80a36a8:	f1a4 0401 	sub.w	r4, r4, #1
 80a36ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80a36b0:	db0d      	blt.n	80a36ce <__adddf3+0xb2>
 80a36b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a36b6:	fa22 f205 	lsr.w	r2, r2, r5
 80a36ba:	1880      	adds	r0, r0, r2
 80a36bc:	f141 0100 	adc.w	r1, r1, #0
 80a36c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a36c4:	1880      	adds	r0, r0, r2
 80a36c6:	fa43 f305 	asr.w	r3, r3, r5
 80a36ca:	4159      	adcs	r1, r3
 80a36cc:	e00e      	b.n	80a36ec <__adddf3+0xd0>
 80a36ce:	f1a5 0520 	sub.w	r5, r5, #32
 80a36d2:	f10e 0e20 	add.w	lr, lr, #32
 80a36d6:	2a01      	cmp	r2, #1
 80a36d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a36dc:	bf28      	it	cs
 80a36de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a36e2:	fa43 f305 	asr.w	r3, r3, r5
 80a36e6:	18c0      	adds	r0, r0, r3
 80a36e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a36ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a36f0:	d507      	bpl.n	80a3702 <__adddf3+0xe6>
 80a36f2:	f04f 0e00 	mov.w	lr, #0
 80a36f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a36fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a36fe:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3702:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3706:	d31b      	bcc.n	80a3740 <__adddf3+0x124>
 80a3708:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a370c:	d30c      	bcc.n	80a3728 <__adddf3+0x10c>
 80a370e:	0849      	lsrs	r1, r1, #1
 80a3710:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3714:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3718:	f104 0401 	add.w	r4, r4, #1
 80a371c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3720:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3724:	f080 809a 	bcs.w	80a385c <__adddf3+0x240>
 80a3728:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a372c:	bf08      	it	eq
 80a372e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3732:	f150 0000 	adcs.w	r0, r0, #0
 80a3736:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a373a:	ea41 0105 	orr.w	r1, r1, r5
 80a373e:	bd30      	pop	{r4, r5, pc}
 80a3740:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3744:	4140      	adcs	r0, r0
 80a3746:	eb41 0101 	adc.w	r1, r1, r1
 80a374a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a374e:	f1a4 0401 	sub.w	r4, r4, #1
 80a3752:	d1e9      	bne.n	80a3728 <__adddf3+0x10c>
 80a3754:	f091 0f00 	teq	r1, #0
 80a3758:	bf04      	itt	eq
 80a375a:	4601      	moveq	r1, r0
 80a375c:	2000      	moveq	r0, #0
 80a375e:	fab1 f381 	clz	r3, r1
 80a3762:	bf08      	it	eq
 80a3764:	3320      	addeq	r3, #32
 80a3766:	f1a3 030b 	sub.w	r3, r3, #11
 80a376a:	f1b3 0220 	subs.w	r2, r3, #32
 80a376e:	da0c      	bge.n	80a378a <__adddf3+0x16e>
 80a3770:	320c      	adds	r2, #12
 80a3772:	dd08      	ble.n	80a3786 <__adddf3+0x16a>
 80a3774:	f102 0c14 	add.w	ip, r2, #20
 80a3778:	f1c2 020c 	rsb	r2, r2, #12
 80a377c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3780:	fa21 f102 	lsr.w	r1, r1, r2
 80a3784:	e00c      	b.n	80a37a0 <__adddf3+0x184>
 80a3786:	f102 0214 	add.w	r2, r2, #20
 80a378a:	bfd8      	it	le
 80a378c:	f1c2 0c20 	rsble	ip, r2, #32
 80a3790:	fa01 f102 	lsl.w	r1, r1, r2
 80a3794:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3798:	bfdc      	itt	le
 80a379a:	ea41 010c 	orrle.w	r1, r1, ip
 80a379e:	4090      	lslle	r0, r2
 80a37a0:	1ae4      	subs	r4, r4, r3
 80a37a2:	bfa2      	ittt	ge
 80a37a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a37a8:	4329      	orrge	r1, r5
 80a37aa:	bd30      	popge	{r4, r5, pc}
 80a37ac:	ea6f 0404 	mvn.w	r4, r4
 80a37b0:	3c1f      	subs	r4, #31
 80a37b2:	da1c      	bge.n	80a37ee <__adddf3+0x1d2>
 80a37b4:	340c      	adds	r4, #12
 80a37b6:	dc0e      	bgt.n	80a37d6 <__adddf3+0x1ba>
 80a37b8:	f104 0414 	add.w	r4, r4, #20
 80a37bc:	f1c4 0220 	rsb	r2, r4, #32
 80a37c0:	fa20 f004 	lsr.w	r0, r0, r4
 80a37c4:	fa01 f302 	lsl.w	r3, r1, r2
 80a37c8:	ea40 0003 	orr.w	r0, r0, r3
 80a37cc:	fa21 f304 	lsr.w	r3, r1, r4
 80a37d0:	ea45 0103 	orr.w	r1, r5, r3
 80a37d4:	bd30      	pop	{r4, r5, pc}
 80a37d6:	f1c4 040c 	rsb	r4, r4, #12
 80a37da:	f1c4 0220 	rsb	r2, r4, #32
 80a37de:	fa20 f002 	lsr.w	r0, r0, r2
 80a37e2:	fa01 f304 	lsl.w	r3, r1, r4
 80a37e6:	ea40 0003 	orr.w	r0, r0, r3
 80a37ea:	4629      	mov	r1, r5
 80a37ec:	bd30      	pop	{r4, r5, pc}
 80a37ee:	fa21 f004 	lsr.w	r0, r1, r4
 80a37f2:	4629      	mov	r1, r5
 80a37f4:	bd30      	pop	{r4, r5, pc}
 80a37f6:	f094 0f00 	teq	r4, #0
 80a37fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a37fe:	bf06      	itte	eq
 80a3800:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3804:	3401      	addeq	r4, #1
 80a3806:	3d01      	subne	r5, #1
 80a3808:	e74e      	b.n	80a36a8 <__adddf3+0x8c>
 80a380a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a380e:	bf18      	it	ne
 80a3810:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3814:	d029      	beq.n	80a386a <__adddf3+0x24e>
 80a3816:	ea94 0f05 	teq	r4, r5
 80a381a:	bf08      	it	eq
 80a381c:	ea90 0f02 	teqeq	r0, r2
 80a3820:	d005      	beq.n	80a382e <__adddf3+0x212>
 80a3822:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3826:	bf04      	itt	eq
 80a3828:	4619      	moveq	r1, r3
 80a382a:	4610      	moveq	r0, r2
 80a382c:	bd30      	pop	{r4, r5, pc}
 80a382e:	ea91 0f03 	teq	r1, r3
 80a3832:	bf1e      	ittt	ne
 80a3834:	2100      	movne	r1, #0
 80a3836:	2000      	movne	r0, #0
 80a3838:	bd30      	popne	{r4, r5, pc}
 80a383a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a383e:	d105      	bne.n	80a384c <__adddf3+0x230>
 80a3840:	0040      	lsls	r0, r0, #1
 80a3842:	4149      	adcs	r1, r1
 80a3844:	bf28      	it	cs
 80a3846:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a384a:	bd30      	pop	{r4, r5, pc}
 80a384c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3850:	bf3c      	itt	cc
 80a3852:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3856:	bd30      	popcc	{r4, r5, pc}
 80a3858:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a385c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3860:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3864:	f04f 0000 	mov.w	r0, #0
 80a3868:	bd30      	pop	{r4, r5, pc}
 80a386a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a386e:	bf1a      	itte	ne
 80a3870:	4619      	movne	r1, r3
 80a3872:	4610      	movne	r0, r2
 80a3874:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3878:	bf1c      	itt	ne
 80a387a:	460b      	movne	r3, r1
 80a387c:	4602      	movne	r2, r0
 80a387e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3882:	bf06      	itte	eq
 80a3884:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3888:	ea91 0f03 	teqeq	r1, r3
 80a388c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3890:	bd30      	pop	{r4, r5, pc}
 80a3892:	bf00      	nop

080a3894 <__aeabi_ui2d>:
 80a3894:	f090 0f00 	teq	r0, #0
 80a3898:	bf04      	itt	eq
 80a389a:	2100      	moveq	r1, #0
 80a389c:	4770      	bxeq	lr
 80a389e:	b530      	push	{r4, r5, lr}
 80a38a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a38a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a38a8:	f04f 0500 	mov.w	r5, #0
 80a38ac:	f04f 0100 	mov.w	r1, #0
 80a38b0:	e750      	b.n	80a3754 <__adddf3+0x138>
 80a38b2:	bf00      	nop

080a38b4 <__aeabi_i2d>:
 80a38b4:	f090 0f00 	teq	r0, #0
 80a38b8:	bf04      	itt	eq
 80a38ba:	2100      	moveq	r1, #0
 80a38bc:	4770      	bxeq	lr
 80a38be:	b530      	push	{r4, r5, lr}
 80a38c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a38c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a38c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a38cc:	bf48      	it	mi
 80a38ce:	4240      	negmi	r0, r0
 80a38d0:	f04f 0100 	mov.w	r1, #0
 80a38d4:	e73e      	b.n	80a3754 <__adddf3+0x138>
 80a38d6:	bf00      	nop

080a38d8 <__aeabi_f2d>:
 80a38d8:	0042      	lsls	r2, r0, #1
 80a38da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a38de:	ea4f 0131 	mov.w	r1, r1, rrx
 80a38e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a38e6:	bf1f      	itttt	ne
 80a38e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a38ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a38f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a38f4:	4770      	bxne	lr
 80a38f6:	f092 0f00 	teq	r2, #0
 80a38fa:	bf14      	ite	ne
 80a38fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3900:	4770      	bxeq	lr
 80a3902:	b530      	push	{r4, r5, lr}
 80a3904:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3908:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a390c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3910:	e720      	b.n	80a3754 <__adddf3+0x138>
 80a3912:	bf00      	nop

080a3914 <__aeabi_ul2d>:
 80a3914:	ea50 0201 	orrs.w	r2, r0, r1
 80a3918:	bf08      	it	eq
 80a391a:	4770      	bxeq	lr
 80a391c:	b530      	push	{r4, r5, lr}
 80a391e:	f04f 0500 	mov.w	r5, #0
 80a3922:	e00a      	b.n	80a393a <__aeabi_l2d+0x16>

080a3924 <__aeabi_l2d>:
 80a3924:	ea50 0201 	orrs.w	r2, r0, r1
 80a3928:	bf08      	it	eq
 80a392a:	4770      	bxeq	lr
 80a392c:	b530      	push	{r4, r5, lr}
 80a392e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3932:	d502      	bpl.n	80a393a <__aeabi_l2d+0x16>
 80a3934:	4240      	negs	r0, r0
 80a3936:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a393a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a393e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3942:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3946:	f43f aedc 	beq.w	80a3702 <__adddf3+0xe6>
 80a394a:	f04f 0203 	mov.w	r2, #3
 80a394e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3952:	bf18      	it	ne
 80a3954:	3203      	addne	r2, #3
 80a3956:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a395a:	bf18      	it	ne
 80a395c:	3203      	addne	r2, #3
 80a395e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3962:	f1c2 0320 	rsb	r3, r2, #32
 80a3966:	fa00 fc03 	lsl.w	ip, r0, r3
 80a396a:	fa20 f002 	lsr.w	r0, r0, r2
 80a396e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3972:	ea40 000e 	orr.w	r0, r0, lr
 80a3976:	fa21 f102 	lsr.w	r1, r1, r2
 80a397a:	4414      	add	r4, r2
 80a397c:	e6c1      	b.n	80a3702 <__adddf3+0xe6>
 80a397e:	bf00      	nop

080a3980 <__aeabi_dmul>:
 80a3980:	b570      	push	{r4, r5, r6, lr}
 80a3982:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3986:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a398a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a398e:	bf1d      	ittte	ne
 80a3990:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3994:	ea94 0f0c 	teqne	r4, ip
 80a3998:	ea95 0f0c 	teqne	r5, ip
 80a399c:	f000 f8de 	bleq	80a3b5c <__aeabi_dmul+0x1dc>
 80a39a0:	442c      	add	r4, r5
 80a39a2:	ea81 0603 	eor.w	r6, r1, r3
 80a39a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a39aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a39ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a39b2:	bf18      	it	ne
 80a39b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a39b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a39bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a39c0:	d038      	beq.n	80a3a34 <__aeabi_dmul+0xb4>
 80a39c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80a39c6:	f04f 0500 	mov.w	r5, #0
 80a39ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a39ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a39d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a39d6:	f04f 0600 	mov.w	r6, #0
 80a39da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a39de:	f09c 0f00 	teq	ip, #0
 80a39e2:	bf18      	it	ne
 80a39e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80a39e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a39ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a39f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a39f4:	d204      	bcs.n	80a3a00 <__aeabi_dmul+0x80>
 80a39f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a39fa:	416d      	adcs	r5, r5
 80a39fc:	eb46 0606 	adc.w	r6, r6, r6
 80a3a00:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3a04:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3a08:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3a0c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3a10:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3a14:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3a18:	bf88      	it	hi
 80a3a1a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3a1e:	d81e      	bhi.n	80a3a5e <__aeabi_dmul+0xde>
 80a3a20:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3a24:	bf08      	it	eq
 80a3a26:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3a2a:	f150 0000 	adcs.w	r0, r0, #0
 80a3a2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3a32:	bd70      	pop	{r4, r5, r6, pc}
 80a3a34:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3a38:	ea46 0101 	orr.w	r1, r6, r1
 80a3a3c:	ea40 0002 	orr.w	r0, r0, r2
 80a3a40:	ea81 0103 	eor.w	r1, r1, r3
 80a3a44:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3a48:	bfc2      	ittt	gt
 80a3a4a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3a4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3a52:	bd70      	popgt	{r4, r5, r6, pc}
 80a3a54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3a58:	f04f 0e00 	mov.w	lr, #0
 80a3a5c:	3c01      	subs	r4, #1
 80a3a5e:	f300 80ab 	bgt.w	80a3bb8 <__aeabi_dmul+0x238>
 80a3a62:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3a66:	bfde      	ittt	le
 80a3a68:	2000      	movle	r0, #0
 80a3a6a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3a6e:	bd70      	pople	{r4, r5, r6, pc}
 80a3a70:	f1c4 0400 	rsb	r4, r4, #0
 80a3a74:	3c20      	subs	r4, #32
 80a3a76:	da35      	bge.n	80a3ae4 <__aeabi_dmul+0x164>
 80a3a78:	340c      	adds	r4, #12
 80a3a7a:	dc1b      	bgt.n	80a3ab4 <__aeabi_dmul+0x134>
 80a3a7c:	f104 0414 	add.w	r4, r4, #20
 80a3a80:	f1c4 0520 	rsb	r5, r4, #32
 80a3a84:	fa00 f305 	lsl.w	r3, r0, r5
 80a3a88:	fa20 f004 	lsr.w	r0, r0, r4
 80a3a8c:	fa01 f205 	lsl.w	r2, r1, r5
 80a3a90:	ea40 0002 	orr.w	r0, r0, r2
 80a3a94:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3a98:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3a9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3aa0:	fa21 f604 	lsr.w	r6, r1, r4
 80a3aa4:	eb42 0106 	adc.w	r1, r2, r6
 80a3aa8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3aac:	bf08      	it	eq
 80a3aae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3ab2:	bd70      	pop	{r4, r5, r6, pc}
 80a3ab4:	f1c4 040c 	rsb	r4, r4, #12
 80a3ab8:	f1c4 0520 	rsb	r5, r4, #32
 80a3abc:	fa00 f304 	lsl.w	r3, r0, r4
 80a3ac0:	fa20 f005 	lsr.w	r0, r0, r5
 80a3ac4:	fa01 f204 	lsl.w	r2, r1, r4
 80a3ac8:	ea40 0002 	orr.w	r0, r0, r2
 80a3acc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3ad0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3ad4:	f141 0100 	adc.w	r1, r1, #0
 80a3ad8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3adc:	bf08      	it	eq
 80a3ade:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3ae2:	bd70      	pop	{r4, r5, r6, pc}
 80a3ae4:	f1c4 0520 	rsb	r5, r4, #32
 80a3ae8:	fa00 f205 	lsl.w	r2, r0, r5
 80a3aec:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3af0:	fa20 f304 	lsr.w	r3, r0, r4
 80a3af4:	fa01 f205 	lsl.w	r2, r1, r5
 80a3af8:	ea43 0302 	orr.w	r3, r3, r2
 80a3afc:	fa21 f004 	lsr.w	r0, r1, r4
 80a3b00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3b04:	fa21 f204 	lsr.w	r2, r1, r4
 80a3b08:	ea20 0002 	bic.w	r0, r0, r2
 80a3b0c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3b10:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3b14:	bf08      	it	eq
 80a3b16:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3b1a:	bd70      	pop	{r4, r5, r6, pc}
 80a3b1c:	f094 0f00 	teq	r4, #0
 80a3b20:	d10f      	bne.n	80a3b42 <__aeabi_dmul+0x1c2>
 80a3b22:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3b26:	0040      	lsls	r0, r0, #1
 80a3b28:	eb41 0101 	adc.w	r1, r1, r1
 80a3b2c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3b30:	bf08      	it	eq
 80a3b32:	3c01      	subeq	r4, #1
 80a3b34:	d0f7      	beq.n	80a3b26 <__aeabi_dmul+0x1a6>
 80a3b36:	ea41 0106 	orr.w	r1, r1, r6
 80a3b3a:	f095 0f00 	teq	r5, #0
 80a3b3e:	bf18      	it	ne
 80a3b40:	4770      	bxne	lr
 80a3b42:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3b46:	0052      	lsls	r2, r2, #1
 80a3b48:	eb43 0303 	adc.w	r3, r3, r3
 80a3b4c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3b50:	bf08      	it	eq
 80a3b52:	3d01      	subeq	r5, #1
 80a3b54:	d0f7      	beq.n	80a3b46 <__aeabi_dmul+0x1c6>
 80a3b56:	ea43 0306 	orr.w	r3, r3, r6
 80a3b5a:	4770      	bx	lr
 80a3b5c:	ea94 0f0c 	teq	r4, ip
 80a3b60:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3b64:	bf18      	it	ne
 80a3b66:	ea95 0f0c 	teqne	r5, ip
 80a3b6a:	d00c      	beq.n	80a3b86 <__aeabi_dmul+0x206>
 80a3b6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3b70:	bf18      	it	ne
 80a3b72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3b76:	d1d1      	bne.n	80a3b1c <__aeabi_dmul+0x19c>
 80a3b78:	ea81 0103 	eor.w	r1, r1, r3
 80a3b7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3b80:	f04f 0000 	mov.w	r0, #0
 80a3b84:	bd70      	pop	{r4, r5, r6, pc}
 80a3b86:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3b8a:	bf06      	itte	eq
 80a3b8c:	4610      	moveq	r0, r2
 80a3b8e:	4619      	moveq	r1, r3
 80a3b90:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3b94:	d019      	beq.n	80a3bca <__aeabi_dmul+0x24a>
 80a3b96:	ea94 0f0c 	teq	r4, ip
 80a3b9a:	d102      	bne.n	80a3ba2 <__aeabi_dmul+0x222>
 80a3b9c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3ba0:	d113      	bne.n	80a3bca <__aeabi_dmul+0x24a>
 80a3ba2:	ea95 0f0c 	teq	r5, ip
 80a3ba6:	d105      	bne.n	80a3bb4 <__aeabi_dmul+0x234>
 80a3ba8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3bac:	bf1c      	itt	ne
 80a3bae:	4610      	movne	r0, r2
 80a3bb0:	4619      	movne	r1, r3
 80a3bb2:	d10a      	bne.n	80a3bca <__aeabi_dmul+0x24a>
 80a3bb4:	ea81 0103 	eor.w	r1, r1, r3
 80a3bb8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3bbc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3bc0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3bc4:	f04f 0000 	mov.w	r0, #0
 80a3bc8:	bd70      	pop	{r4, r5, r6, pc}
 80a3bca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3bce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3bd2:	bd70      	pop	{r4, r5, r6, pc}

080a3bd4 <__aeabi_ddiv>:
 80a3bd4:	b570      	push	{r4, r5, r6, lr}
 80a3bd6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3bda:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3bde:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3be2:	bf1d      	ittte	ne
 80a3be4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3be8:	ea94 0f0c 	teqne	r4, ip
 80a3bec:	ea95 0f0c 	teqne	r5, ip
 80a3bf0:	f000 f8a7 	bleq	80a3d42 <__aeabi_ddiv+0x16e>
 80a3bf4:	eba4 0405 	sub.w	r4, r4, r5
 80a3bf8:	ea81 0e03 	eor.w	lr, r1, r3
 80a3bfc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3c00:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3c04:	f000 8088 	beq.w	80a3d18 <__aeabi_ddiv+0x144>
 80a3c08:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3c0c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3c10:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3c14:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3c18:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3c1c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3c20:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3c24:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3c28:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3c2c:	429d      	cmp	r5, r3
 80a3c2e:	bf08      	it	eq
 80a3c30:	4296      	cmpeq	r6, r2
 80a3c32:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3c36:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3c3a:	d202      	bcs.n	80a3c42 <__aeabi_ddiv+0x6e>
 80a3c3c:	085b      	lsrs	r3, r3, #1
 80a3c3e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3c42:	1ab6      	subs	r6, r6, r2
 80a3c44:	eb65 0503 	sbc.w	r5, r5, r3
 80a3c48:	085b      	lsrs	r3, r3, #1
 80a3c4a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3c4e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3c52:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3c56:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3c5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3c5e:	bf22      	ittt	cs
 80a3c60:	1ab6      	subcs	r6, r6, r2
 80a3c62:	4675      	movcs	r5, lr
 80a3c64:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3c68:	085b      	lsrs	r3, r3, #1
 80a3c6a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3c6e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3c72:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3c76:	bf22      	ittt	cs
 80a3c78:	1ab6      	subcs	r6, r6, r2
 80a3c7a:	4675      	movcs	r5, lr
 80a3c7c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3c80:	085b      	lsrs	r3, r3, #1
 80a3c82:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3c86:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3c8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3c8e:	bf22      	ittt	cs
 80a3c90:	1ab6      	subcs	r6, r6, r2
 80a3c92:	4675      	movcs	r5, lr
 80a3c94:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3c98:	085b      	lsrs	r3, r3, #1
 80a3c9a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3c9e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3ca2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3ca6:	bf22      	ittt	cs
 80a3ca8:	1ab6      	subcs	r6, r6, r2
 80a3caa:	4675      	movcs	r5, lr
 80a3cac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3cb0:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3cb4:	d018      	beq.n	80a3ce8 <__aeabi_ddiv+0x114>
 80a3cb6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3cba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a3cbe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3cc2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3cc6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3cca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a3cce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3cd2:	d1c0      	bne.n	80a3c56 <__aeabi_ddiv+0x82>
 80a3cd4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3cd8:	d10b      	bne.n	80a3cf2 <__aeabi_ddiv+0x11e>
 80a3cda:	ea41 0100 	orr.w	r1, r1, r0
 80a3cde:	f04f 0000 	mov.w	r0, #0
 80a3ce2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3ce6:	e7b6      	b.n	80a3c56 <__aeabi_ddiv+0x82>
 80a3ce8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3cec:	bf04      	itt	eq
 80a3cee:	4301      	orreq	r1, r0
 80a3cf0:	2000      	moveq	r0, #0
 80a3cf2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3cf6:	bf88      	it	hi
 80a3cf8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3cfc:	f63f aeaf 	bhi.w	80a3a5e <__aeabi_dmul+0xde>
 80a3d00:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3d04:	bf04      	itt	eq
 80a3d06:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3d0a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3d0e:	f150 0000 	adcs.w	r0, r0, #0
 80a3d12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3d16:	bd70      	pop	{r4, r5, r6, pc}
 80a3d18:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3d1c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3d20:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3d24:	bfc2      	ittt	gt
 80a3d26:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3d2a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3d2e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3d30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3d34:	f04f 0e00 	mov.w	lr, #0
 80a3d38:	3c01      	subs	r4, #1
 80a3d3a:	e690      	b.n	80a3a5e <__aeabi_dmul+0xde>
 80a3d3c:	ea45 0e06 	orr.w	lr, r5, r6
 80a3d40:	e68d      	b.n	80a3a5e <__aeabi_dmul+0xde>
 80a3d42:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3d46:	ea94 0f0c 	teq	r4, ip
 80a3d4a:	bf08      	it	eq
 80a3d4c:	ea95 0f0c 	teqeq	r5, ip
 80a3d50:	f43f af3b 	beq.w	80a3bca <__aeabi_dmul+0x24a>
 80a3d54:	ea94 0f0c 	teq	r4, ip
 80a3d58:	d10a      	bne.n	80a3d70 <__aeabi_ddiv+0x19c>
 80a3d5a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3d5e:	f47f af34 	bne.w	80a3bca <__aeabi_dmul+0x24a>
 80a3d62:	ea95 0f0c 	teq	r5, ip
 80a3d66:	f47f af25 	bne.w	80a3bb4 <__aeabi_dmul+0x234>
 80a3d6a:	4610      	mov	r0, r2
 80a3d6c:	4619      	mov	r1, r3
 80a3d6e:	e72c      	b.n	80a3bca <__aeabi_dmul+0x24a>
 80a3d70:	ea95 0f0c 	teq	r5, ip
 80a3d74:	d106      	bne.n	80a3d84 <__aeabi_ddiv+0x1b0>
 80a3d76:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3d7a:	f43f aefd 	beq.w	80a3b78 <__aeabi_dmul+0x1f8>
 80a3d7e:	4610      	mov	r0, r2
 80a3d80:	4619      	mov	r1, r3
 80a3d82:	e722      	b.n	80a3bca <__aeabi_dmul+0x24a>
 80a3d84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3d88:	bf18      	it	ne
 80a3d8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3d8e:	f47f aec5 	bne.w	80a3b1c <__aeabi_dmul+0x19c>
 80a3d92:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3d96:	f47f af0d 	bne.w	80a3bb4 <__aeabi_dmul+0x234>
 80a3d9a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3d9e:	f47f aeeb 	bne.w	80a3b78 <__aeabi_dmul+0x1f8>
 80a3da2:	e712      	b.n	80a3bca <__aeabi_dmul+0x24a>

080a3da4 <__gedf2>:
 80a3da4:	f04f 3cff 	mov.w	ip, #4294967295
 80a3da8:	e006      	b.n	80a3db8 <__cmpdf2+0x4>
 80a3daa:	bf00      	nop

080a3dac <__ledf2>:
 80a3dac:	f04f 0c01 	mov.w	ip, #1
 80a3db0:	e002      	b.n	80a3db8 <__cmpdf2+0x4>
 80a3db2:	bf00      	nop

080a3db4 <__cmpdf2>:
 80a3db4:	f04f 0c01 	mov.w	ip, #1
 80a3db8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3dbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3dc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3dc4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3dc8:	bf18      	it	ne
 80a3dca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a3dce:	d01b      	beq.n	80a3e08 <__cmpdf2+0x54>
 80a3dd0:	b001      	add	sp, #4
 80a3dd2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3dd6:	bf0c      	ite	eq
 80a3dd8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3ddc:	ea91 0f03 	teqne	r1, r3
 80a3de0:	bf02      	ittt	eq
 80a3de2:	ea90 0f02 	teqeq	r0, r2
 80a3de6:	2000      	moveq	r0, #0
 80a3de8:	4770      	bxeq	lr
 80a3dea:	f110 0f00 	cmn.w	r0, #0
 80a3dee:	ea91 0f03 	teq	r1, r3
 80a3df2:	bf58      	it	pl
 80a3df4:	4299      	cmppl	r1, r3
 80a3df6:	bf08      	it	eq
 80a3df8:	4290      	cmpeq	r0, r2
 80a3dfa:	bf2c      	ite	cs
 80a3dfc:	17d8      	asrcs	r0, r3, #31
 80a3dfe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3e02:	f040 0001 	orr.w	r0, r0, #1
 80a3e06:	4770      	bx	lr
 80a3e08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3e0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3e10:	d102      	bne.n	80a3e18 <__cmpdf2+0x64>
 80a3e12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3e16:	d107      	bne.n	80a3e28 <__cmpdf2+0x74>
 80a3e18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3e1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3e20:	d1d6      	bne.n	80a3dd0 <__cmpdf2+0x1c>
 80a3e22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3e26:	d0d3      	beq.n	80a3dd0 <__cmpdf2+0x1c>
 80a3e28:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3e2c:	4770      	bx	lr
 80a3e2e:	bf00      	nop

080a3e30 <__aeabi_cdrcmple>:
 80a3e30:	4684      	mov	ip, r0
 80a3e32:	4610      	mov	r0, r2
 80a3e34:	4662      	mov	r2, ip
 80a3e36:	468c      	mov	ip, r1
 80a3e38:	4619      	mov	r1, r3
 80a3e3a:	4663      	mov	r3, ip
 80a3e3c:	e000      	b.n	80a3e40 <__aeabi_cdcmpeq>
 80a3e3e:	bf00      	nop

080a3e40 <__aeabi_cdcmpeq>:
 80a3e40:	b501      	push	{r0, lr}
 80a3e42:	f7ff ffb7 	bl	80a3db4 <__cmpdf2>
 80a3e46:	2800      	cmp	r0, #0
 80a3e48:	bf48      	it	mi
 80a3e4a:	f110 0f00 	cmnmi.w	r0, #0
 80a3e4e:	bd01      	pop	{r0, pc}

080a3e50 <__aeabi_dcmpeq>:
 80a3e50:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3e54:	f7ff fff4 	bl	80a3e40 <__aeabi_cdcmpeq>
 80a3e58:	bf0c      	ite	eq
 80a3e5a:	2001      	moveq	r0, #1
 80a3e5c:	2000      	movne	r0, #0
 80a3e5e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3e62:	bf00      	nop

080a3e64 <__aeabi_dcmplt>:
 80a3e64:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3e68:	f7ff ffea 	bl	80a3e40 <__aeabi_cdcmpeq>
 80a3e6c:	bf34      	ite	cc
 80a3e6e:	2001      	movcc	r0, #1
 80a3e70:	2000      	movcs	r0, #0
 80a3e72:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3e76:	bf00      	nop

080a3e78 <__aeabi_dcmple>:
 80a3e78:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3e7c:	f7ff ffe0 	bl	80a3e40 <__aeabi_cdcmpeq>
 80a3e80:	bf94      	ite	ls
 80a3e82:	2001      	movls	r0, #1
 80a3e84:	2000      	movhi	r0, #0
 80a3e86:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3e8a:	bf00      	nop

080a3e8c <__aeabi_dcmpge>:
 80a3e8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3e90:	f7ff ffce 	bl	80a3e30 <__aeabi_cdrcmple>
 80a3e94:	bf94      	ite	ls
 80a3e96:	2001      	movls	r0, #1
 80a3e98:	2000      	movhi	r0, #0
 80a3e9a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3e9e:	bf00      	nop

080a3ea0 <__aeabi_dcmpgt>:
 80a3ea0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3ea4:	f7ff ffc4 	bl	80a3e30 <__aeabi_cdrcmple>
 80a3ea8:	bf34      	ite	cc
 80a3eaa:	2001      	movcc	r0, #1
 80a3eac:	2000      	movcs	r0, #0
 80a3eae:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3eb2:	bf00      	nop

080a3eb4 <__aeabi_dcmpun>:
 80a3eb4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3eb8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3ebc:	d102      	bne.n	80a3ec4 <__aeabi_dcmpun+0x10>
 80a3ebe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3ec2:	d10a      	bne.n	80a3eda <__aeabi_dcmpun+0x26>
 80a3ec4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3ec8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3ecc:	d102      	bne.n	80a3ed4 <__aeabi_dcmpun+0x20>
 80a3ece:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3ed2:	d102      	bne.n	80a3eda <__aeabi_dcmpun+0x26>
 80a3ed4:	f04f 0000 	mov.w	r0, #0
 80a3ed8:	4770      	bx	lr
 80a3eda:	f04f 0001 	mov.w	r0, #1
 80a3ede:	4770      	bx	lr

080a3ee0 <__aeabi_d2iz>:
 80a3ee0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3ee4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3ee8:	d215      	bcs.n	80a3f16 <__aeabi_d2iz+0x36>
 80a3eea:	d511      	bpl.n	80a3f10 <__aeabi_d2iz+0x30>
 80a3eec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3ef0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3ef4:	d912      	bls.n	80a3f1c <__aeabi_d2iz+0x3c>
 80a3ef6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3efa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3efe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3f02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3f06:	fa23 f002 	lsr.w	r0, r3, r2
 80a3f0a:	bf18      	it	ne
 80a3f0c:	4240      	negne	r0, r0
 80a3f0e:	4770      	bx	lr
 80a3f10:	f04f 0000 	mov.w	r0, #0
 80a3f14:	4770      	bx	lr
 80a3f16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3f1a:	d105      	bne.n	80a3f28 <__aeabi_d2iz+0x48>
 80a3f1c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3f20:	bf08      	it	eq
 80a3f22:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3f26:	4770      	bx	lr
 80a3f28:	f04f 0000 	mov.w	r0, #0
 80a3f2c:	4770      	bx	lr
 80a3f2e:	bf00      	nop

080a3f30 <__aeabi_d2uiz>:
 80a3f30:	004a      	lsls	r2, r1, #1
 80a3f32:	d211      	bcs.n	80a3f58 <__aeabi_d2uiz+0x28>
 80a3f34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3f38:	d211      	bcs.n	80a3f5e <__aeabi_d2uiz+0x2e>
 80a3f3a:	d50d      	bpl.n	80a3f58 <__aeabi_d2uiz+0x28>
 80a3f3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3f40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3f44:	d40e      	bmi.n	80a3f64 <__aeabi_d2uiz+0x34>
 80a3f46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3f4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3f4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3f52:	fa23 f002 	lsr.w	r0, r3, r2
 80a3f56:	4770      	bx	lr
 80a3f58:	f04f 0000 	mov.w	r0, #0
 80a3f5c:	4770      	bx	lr
 80a3f5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3f62:	d102      	bne.n	80a3f6a <__aeabi_d2uiz+0x3a>
 80a3f64:	f04f 30ff 	mov.w	r0, #4294967295
 80a3f68:	4770      	bx	lr
 80a3f6a:	f04f 0000 	mov.w	r0, #0
 80a3f6e:	4770      	bx	lr

080a3f70 <__aeabi_frsub>:
 80a3f70:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3f74:	e002      	b.n	80a3f7c <__addsf3>
 80a3f76:	bf00      	nop

080a3f78 <__aeabi_fsub>:
 80a3f78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3f7c <__addsf3>:
 80a3f7c:	0042      	lsls	r2, r0, #1
 80a3f7e:	bf1f      	itttt	ne
 80a3f80:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3f84:	ea92 0f03 	teqne	r2, r3
 80a3f88:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3f8c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3f90:	d06a      	beq.n	80a4068 <__addsf3+0xec>
 80a3f92:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3f96:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3f9a:	bfc1      	itttt	gt
 80a3f9c:	18d2      	addgt	r2, r2, r3
 80a3f9e:	4041      	eorgt	r1, r0
 80a3fa0:	4048      	eorgt	r0, r1
 80a3fa2:	4041      	eorgt	r1, r0
 80a3fa4:	bfb8      	it	lt
 80a3fa6:	425b      	neglt	r3, r3
 80a3fa8:	2b19      	cmp	r3, #25
 80a3faa:	bf88      	it	hi
 80a3fac:	4770      	bxhi	lr
 80a3fae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3fb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3fb6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3fba:	bf18      	it	ne
 80a3fbc:	4240      	negne	r0, r0
 80a3fbe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3fc2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3fc6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3fca:	bf18      	it	ne
 80a3fcc:	4249      	negne	r1, r1
 80a3fce:	ea92 0f03 	teq	r2, r3
 80a3fd2:	d03f      	beq.n	80a4054 <__addsf3+0xd8>
 80a3fd4:	f1a2 0201 	sub.w	r2, r2, #1
 80a3fd8:	fa41 fc03 	asr.w	ip, r1, r3
 80a3fdc:	eb10 000c 	adds.w	r0, r0, ip
 80a3fe0:	f1c3 0320 	rsb	r3, r3, #32
 80a3fe4:	fa01 f103 	lsl.w	r1, r1, r3
 80a3fe8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3fec:	d502      	bpl.n	80a3ff4 <__addsf3+0x78>
 80a3fee:	4249      	negs	r1, r1
 80a3ff0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3ff4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3ff8:	d313      	bcc.n	80a4022 <__addsf3+0xa6>
 80a3ffa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3ffe:	d306      	bcc.n	80a400e <__addsf3+0x92>
 80a4000:	0840      	lsrs	r0, r0, #1
 80a4002:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4006:	f102 0201 	add.w	r2, r2, #1
 80a400a:	2afe      	cmp	r2, #254	; 0xfe
 80a400c:	d251      	bcs.n	80a40b2 <__addsf3+0x136>
 80a400e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4012:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4016:	bf08      	it	eq
 80a4018:	f020 0001 	biceq.w	r0, r0, #1
 80a401c:	ea40 0003 	orr.w	r0, r0, r3
 80a4020:	4770      	bx	lr
 80a4022:	0049      	lsls	r1, r1, #1
 80a4024:	eb40 0000 	adc.w	r0, r0, r0
 80a4028:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a402c:	f1a2 0201 	sub.w	r2, r2, #1
 80a4030:	d1ed      	bne.n	80a400e <__addsf3+0x92>
 80a4032:	fab0 fc80 	clz	ip, r0
 80a4036:	f1ac 0c08 	sub.w	ip, ip, #8
 80a403a:	ebb2 020c 	subs.w	r2, r2, ip
 80a403e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a4042:	bfaa      	itet	ge
 80a4044:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4048:	4252      	neglt	r2, r2
 80a404a:	4318      	orrge	r0, r3
 80a404c:	bfbc      	itt	lt
 80a404e:	40d0      	lsrlt	r0, r2
 80a4050:	4318      	orrlt	r0, r3
 80a4052:	4770      	bx	lr
 80a4054:	f092 0f00 	teq	r2, #0
 80a4058:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a405c:	bf06      	itte	eq
 80a405e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a4062:	3201      	addeq	r2, #1
 80a4064:	3b01      	subne	r3, #1
 80a4066:	e7b5      	b.n	80a3fd4 <__addsf3+0x58>
 80a4068:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a406c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4070:	bf18      	it	ne
 80a4072:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4076:	d021      	beq.n	80a40bc <__addsf3+0x140>
 80a4078:	ea92 0f03 	teq	r2, r3
 80a407c:	d004      	beq.n	80a4088 <__addsf3+0x10c>
 80a407e:	f092 0f00 	teq	r2, #0
 80a4082:	bf08      	it	eq
 80a4084:	4608      	moveq	r0, r1
 80a4086:	4770      	bx	lr
 80a4088:	ea90 0f01 	teq	r0, r1
 80a408c:	bf1c      	itt	ne
 80a408e:	2000      	movne	r0, #0
 80a4090:	4770      	bxne	lr
 80a4092:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4096:	d104      	bne.n	80a40a2 <__addsf3+0x126>
 80a4098:	0040      	lsls	r0, r0, #1
 80a409a:	bf28      	it	cs
 80a409c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a40a0:	4770      	bx	lr
 80a40a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a40a6:	bf3c      	itt	cc
 80a40a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a40ac:	4770      	bxcc	lr
 80a40ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a40b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a40b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a40ba:	4770      	bx	lr
 80a40bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a40c0:	bf16      	itet	ne
 80a40c2:	4608      	movne	r0, r1
 80a40c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a40c8:	4601      	movne	r1, r0
 80a40ca:	0242      	lsls	r2, r0, #9
 80a40cc:	bf06      	itte	eq
 80a40ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a40d2:	ea90 0f01 	teqeq	r0, r1
 80a40d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a40da:	4770      	bx	lr

080a40dc <__aeabi_ui2f>:
 80a40dc:	f04f 0300 	mov.w	r3, #0
 80a40e0:	e004      	b.n	80a40ec <__aeabi_i2f+0x8>
 80a40e2:	bf00      	nop

080a40e4 <__aeabi_i2f>:
 80a40e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a40e8:	bf48      	it	mi
 80a40ea:	4240      	negmi	r0, r0
 80a40ec:	ea5f 0c00 	movs.w	ip, r0
 80a40f0:	bf08      	it	eq
 80a40f2:	4770      	bxeq	lr
 80a40f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a40f8:	4601      	mov	r1, r0
 80a40fa:	f04f 0000 	mov.w	r0, #0
 80a40fe:	e01c      	b.n	80a413a <__aeabi_l2f+0x2a>

080a4100 <__aeabi_ul2f>:
 80a4100:	ea50 0201 	orrs.w	r2, r0, r1
 80a4104:	bf08      	it	eq
 80a4106:	4770      	bxeq	lr
 80a4108:	f04f 0300 	mov.w	r3, #0
 80a410c:	e00a      	b.n	80a4124 <__aeabi_l2f+0x14>
 80a410e:	bf00      	nop

080a4110 <__aeabi_l2f>:
 80a4110:	ea50 0201 	orrs.w	r2, r0, r1
 80a4114:	bf08      	it	eq
 80a4116:	4770      	bxeq	lr
 80a4118:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a411c:	d502      	bpl.n	80a4124 <__aeabi_l2f+0x14>
 80a411e:	4240      	negs	r0, r0
 80a4120:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4124:	ea5f 0c01 	movs.w	ip, r1
 80a4128:	bf02      	ittt	eq
 80a412a:	4684      	moveq	ip, r0
 80a412c:	4601      	moveq	r1, r0
 80a412e:	2000      	moveq	r0, #0
 80a4130:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a4134:	bf08      	it	eq
 80a4136:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a413a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a413e:	fabc f28c 	clz	r2, ip
 80a4142:	3a08      	subs	r2, #8
 80a4144:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4148:	db10      	blt.n	80a416c <__aeabi_l2f+0x5c>
 80a414a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a414e:	4463      	add	r3, ip
 80a4150:	fa00 fc02 	lsl.w	ip, r0, r2
 80a4154:	f1c2 0220 	rsb	r2, r2, #32
 80a4158:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a415c:	fa20 f202 	lsr.w	r2, r0, r2
 80a4160:	eb43 0002 	adc.w	r0, r3, r2
 80a4164:	bf08      	it	eq
 80a4166:	f020 0001 	biceq.w	r0, r0, #1
 80a416a:	4770      	bx	lr
 80a416c:	f102 0220 	add.w	r2, r2, #32
 80a4170:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4174:	f1c2 0220 	rsb	r2, r2, #32
 80a4178:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a417c:	fa21 f202 	lsr.w	r2, r1, r2
 80a4180:	eb43 0002 	adc.w	r0, r3, r2
 80a4184:	bf08      	it	eq
 80a4186:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a418a:	4770      	bx	lr

080a418c <__aeabi_fmul>:
 80a418c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4190:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4194:	bf1e      	ittt	ne
 80a4196:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a419a:	ea92 0f0c 	teqne	r2, ip
 80a419e:	ea93 0f0c 	teqne	r3, ip
 80a41a2:	d06f      	beq.n	80a4284 <__aeabi_fmul+0xf8>
 80a41a4:	441a      	add	r2, r3
 80a41a6:	ea80 0c01 	eor.w	ip, r0, r1
 80a41aa:	0240      	lsls	r0, r0, #9
 80a41ac:	bf18      	it	ne
 80a41ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a41b2:	d01e      	beq.n	80a41f2 <__aeabi_fmul+0x66>
 80a41b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a41b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a41bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a41c0:	fba0 3101 	umull	r3, r1, r0, r1
 80a41c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a41c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a41cc:	bf3e      	ittt	cc
 80a41ce:	0049      	lslcc	r1, r1, #1
 80a41d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a41d4:	005b      	lslcc	r3, r3, #1
 80a41d6:	ea40 0001 	orr.w	r0, r0, r1
 80a41da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a41de:	2afd      	cmp	r2, #253	; 0xfd
 80a41e0:	d81d      	bhi.n	80a421e <__aeabi_fmul+0x92>
 80a41e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a41e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a41ea:	bf08      	it	eq
 80a41ec:	f020 0001 	biceq.w	r0, r0, #1
 80a41f0:	4770      	bx	lr
 80a41f2:	f090 0f00 	teq	r0, #0
 80a41f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a41fa:	bf08      	it	eq
 80a41fc:	0249      	lsleq	r1, r1, #9
 80a41fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4202:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4206:	3a7f      	subs	r2, #127	; 0x7f
 80a4208:	bfc2      	ittt	gt
 80a420a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a420e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4212:	4770      	bxgt	lr
 80a4214:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4218:	f04f 0300 	mov.w	r3, #0
 80a421c:	3a01      	subs	r2, #1
 80a421e:	dc5d      	bgt.n	80a42dc <__aeabi_fmul+0x150>
 80a4220:	f112 0f19 	cmn.w	r2, #25
 80a4224:	bfdc      	itt	le
 80a4226:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a422a:	4770      	bxle	lr
 80a422c:	f1c2 0200 	rsb	r2, r2, #0
 80a4230:	0041      	lsls	r1, r0, #1
 80a4232:	fa21 f102 	lsr.w	r1, r1, r2
 80a4236:	f1c2 0220 	rsb	r2, r2, #32
 80a423a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a423e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a4242:	f140 0000 	adc.w	r0, r0, #0
 80a4246:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a424a:	bf08      	it	eq
 80a424c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4250:	4770      	bx	lr
 80a4252:	f092 0f00 	teq	r2, #0
 80a4256:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a425a:	bf02      	ittt	eq
 80a425c:	0040      	lsleq	r0, r0, #1
 80a425e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4262:	3a01      	subeq	r2, #1
 80a4264:	d0f9      	beq.n	80a425a <__aeabi_fmul+0xce>
 80a4266:	ea40 000c 	orr.w	r0, r0, ip
 80a426a:	f093 0f00 	teq	r3, #0
 80a426e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4272:	bf02      	ittt	eq
 80a4274:	0049      	lsleq	r1, r1, #1
 80a4276:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a427a:	3b01      	subeq	r3, #1
 80a427c:	d0f9      	beq.n	80a4272 <__aeabi_fmul+0xe6>
 80a427e:	ea41 010c 	orr.w	r1, r1, ip
 80a4282:	e78f      	b.n	80a41a4 <__aeabi_fmul+0x18>
 80a4284:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4288:	ea92 0f0c 	teq	r2, ip
 80a428c:	bf18      	it	ne
 80a428e:	ea93 0f0c 	teqne	r3, ip
 80a4292:	d00a      	beq.n	80a42aa <__aeabi_fmul+0x11e>
 80a4294:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4298:	bf18      	it	ne
 80a429a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a429e:	d1d8      	bne.n	80a4252 <__aeabi_fmul+0xc6>
 80a42a0:	ea80 0001 	eor.w	r0, r0, r1
 80a42a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a42a8:	4770      	bx	lr
 80a42aa:	f090 0f00 	teq	r0, #0
 80a42ae:	bf17      	itett	ne
 80a42b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a42b4:	4608      	moveq	r0, r1
 80a42b6:	f091 0f00 	teqne	r1, #0
 80a42ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a42be:	d014      	beq.n	80a42ea <__aeabi_fmul+0x15e>
 80a42c0:	ea92 0f0c 	teq	r2, ip
 80a42c4:	d101      	bne.n	80a42ca <__aeabi_fmul+0x13e>
 80a42c6:	0242      	lsls	r2, r0, #9
 80a42c8:	d10f      	bne.n	80a42ea <__aeabi_fmul+0x15e>
 80a42ca:	ea93 0f0c 	teq	r3, ip
 80a42ce:	d103      	bne.n	80a42d8 <__aeabi_fmul+0x14c>
 80a42d0:	024b      	lsls	r3, r1, #9
 80a42d2:	bf18      	it	ne
 80a42d4:	4608      	movne	r0, r1
 80a42d6:	d108      	bne.n	80a42ea <__aeabi_fmul+0x15e>
 80a42d8:	ea80 0001 	eor.w	r0, r0, r1
 80a42dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a42e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a42e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a42e8:	4770      	bx	lr
 80a42ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a42ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a42f2:	4770      	bx	lr

080a42f4 <__aeabi_fdiv>:
 80a42f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a42f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a42fc:	bf1e      	ittt	ne
 80a42fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4302:	ea92 0f0c 	teqne	r2, ip
 80a4306:	ea93 0f0c 	teqne	r3, ip
 80a430a:	d069      	beq.n	80a43e0 <__aeabi_fdiv+0xec>
 80a430c:	eba2 0203 	sub.w	r2, r2, r3
 80a4310:	ea80 0c01 	eor.w	ip, r0, r1
 80a4314:	0249      	lsls	r1, r1, #9
 80a4316:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a431a:	d037      	beq.n	80a438c <__aeabi_fdiv+0x98>
 80a431c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4320:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4324:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4328:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a432c:	428b      	cmp	r3, r1
 80a432e:	bf38      	it	cc
 80a4330:	005b      	lslcc	r3, r3, #1
 80a4332:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4336:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a433a:	428b      	cmp	r3, r1
 80a433c:	bf24      	itt	cs
 80a433e:	1a5b      	subcs	r3, r3, r1
 80a4340:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4344:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4348:	bf24      	itt	cs
 80a434a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a434e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4352:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4356:	bf24      	itt	cs
 80a4358:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a435c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4360:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4364:	bf24      	itt	cs
 80a4366:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a436a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a436e:	011b      	lsls	r3, r3, #4
 80a4370:	bf18      	it	ne
 80a4372:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4376:	d1e0      	bne.n	80a433a <__aeabi_fdiv+0x46>
 80a4378:	2afd      	cmp	r2, #253	; 0xfd
 80a437a:	f63f af50 	bhi.w	80a421e <__aeabi_fmul+0x92>
 80a437e:	428b      	cmp	r3, r1
 80a4380:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4384:	bf08      	it	eq
 80a4386:	f020 0001 	biceq.w	r0, r0, #1
 80a438a:	4770      	bx	lr
 80a438c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4390:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4394:	327f      	adds	r2, #127	; 0x7f
 80a4396:	bfc2      	ittt	gt
 80a4398:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a439c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a43a0:	4770      	bxgt	lr
 80a43a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a43a6:	f04f 0300 	mov.w	r3, #0
 80a43aa:	3a01      	subs	r2, #1
 80a43ac:	e737      	b.n	80a421e <__aeabi_fmul+0x92>
 80a43ae:	f092 0f00 	teq	r2, #0
 80a43b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a43b6:	bf02      	ittt	eq
 80a43b8:	0040      	lsleq	r0, r0, #1
 80a43ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a43be:	3a01      	subeq	r2, #1
 80a43c0:	d0f9      	beq.n	80a43b6 <__aeabi_fdiv+0xc2>
 80a43c2:	ea40 000c 	orr.w	r0, r0, ip
 80a43c6:	f093 0f00 	teq	r3, #0
 80a43ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a43ce:	bf02      	ittt	eq
 80a43d0:	0049      	lsleq	r1, r1, #1
 80a43d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a43d6:	3b01      	subeq	r3, #1
 80a43d8:	d0f9      	beq.n	80a43ce <__aeabi_fdiv+0xda>
 80a43da:	ea41 010c 	orr.w	r1, r1, ip
 80a43de:	e795      	b.n	80a430c <__aeabi_fdiv+0x18>
 80a43e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a43e4:	ea92 0f0c 	teq	r2, ip
 80a43e8:	d108      	bne.n	80a43fc <__aeabi_fdiv+0x108>
 80a43ea:	0242      	lsls	r2, r0, #9
 80a43ec:	f47f af7d 	bne.w	80a42ea <__aeabi_fmul+0x15e>
 80a43f0:	ea93 0f0c 	teq	r3, ip
 80a43f4:	f47f af70 	bne.w	80a42d8 <__aeabi_fmul+0x14c>
 80a43f8:	4608      	mov	r0, r1
 80a43fa:	e776      	b.n	80a42ea <__aeabi_fmul+0x15e>
 80a43fc:	ea93 0f0c 	teq	r3, ip
 80a4400:	d104      	bne.n	80a440c <__aeabi_fdiv+0x118>
 80a4402:	024b      	lsls	r3, r1, #9
 80a4404:	f43f af4c 	beq.w	80a42a0 <__aeabi_fmul+0x114>
 80a4408:	4608      	mov	r0, r1
 80a440a:	e76e      	b.n	80a42ea <__aeabi_fmul+0x15e>
 80a440c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4410:	bf18      	it	ne
 80a4412:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4416:	d1ca      	bne.n	80a43ae <__aeabi_fdiv+0xba>
 80a4418:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a441c:	f47f af5c 	bne.w	80a42d8 <__aeabi_fmul+0x14c>
 80a4420:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4424:	f47f af3c 	bne.w	80a42a0 <__aeabi_fmul+0x114>
 80a4428:	e75f      	b.n	80a42ea <__aeabi_fmul+0x15e>
 80a442a:	bf00      	nop

080a442c <__aeabi_ldivmod>:
 80a442c:	b97b      	cbnz	r3, 80a444e <__aeabi_ldivmod+0x22>
 80a442e:	b972      	cbnz	r2, 80a444e <__aeabi_ldivmod+0x22>
 80a4430:	2900      	cmp	r1, #0
 80a4432:	bfbe      	ittt	lt
 80a4434:	2000      	movlt	r0, #0
 80a4436:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80a443a:	e006      	blt.n	80a444a <__aeabi_ldivmod+0x1e>
 80a443c:	bf08      	it	eq
 80a443e:	2800      	cmpeq	r0, #0
 80a4440:	bf1c      	itt	ne
 80a4442:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80a4446:	f04f 30ff 	movne.w	r0, #4294967295
 80a444a:	f000 b9b5 	b.w	80a47b8 <__aeabi_idiv0>
 80a444e:	f1ad 0c08 	sub.w	ip, sp, #8
 80a4452:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a4456:	2900      	cmp	r1, #0
 80a4458:	db09      	blt.n	80a446e <__aeabi_ldivmod+0x42>
 80a445a:	2b00      	cmp	r3, #0
 80a445c:	db1a      	blt.n	80a4494 <__aeabi_ldivmod+0x68>
 80a445e:	f000 f835 	bl	80a44cc <__udivmoddi4>
 80a4462:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4466:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a446a:	b004      	add	sp, #16
 80a446c:	4770      	bx	lr
 80a446e:	4240      	negs	r0, r0
 80a4470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4474:	2b00      	cmp	r3, #0
 80a4476:	db1b      	blt.n	80a44b0 <__aeabi_ldivmod+0x84>
 80a4478:	f000 f828 	bl	80a44cc <__udivmoddi4>
 80a447c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a4480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4484:	b004      	add	sp, #16
 80a4486:	4240      	negs	r0, r0
 80a4488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a448c:	4252      	negs	r2, r2
 80a448e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4492:	4770      	bx	lr
 80a4494:	4252      	negs	r2, r2
 80a4496:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a449a:	f000 f817 	bl	80a44cc <__udivmoddi4>
 80a449e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a44a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a44a6:	b004      	add	sp, #16
 80a44a8:	4240      	negs	r0, r0
 80a44aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a44ae:	4770      	bx	lr
 80a44b0:	4252      	negs	r2, r2
 80a44b2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a44b6:	f000 f809 	bl	80a44cc <__udivmoddi4>
 80a44ba:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a44be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a44c2:	b004      	add	sp, #16
 80a44c4:	4252      	negs	r2, r2
 80a44c6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a44ca:	4770      	bx	lr

080a44cc <__udivmoddi4>:
 80a44cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a44d0:	468c      	mov	ip, r1
 80a44d2:	460c      	mov	r4, r1
 80a44d4:	4605      	mov	r5, r0
 80a44d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a44d8:	2b00      	cmp	r3, #0
 80a44da:	d14f      	bne.n	80a457c <__udivmoddi4+0xb0>
 80a44dc:	428a      	cmp	r2, r1
 80a44de:	4617      	mov	r7, r2
 80a44e0:	d96b      	bls.n	80a45ba <__udivmoddi4+0xee>
 80a44e2:	fab2 fe82 	clz	lr, r2
 80a44e6:	f1be 0f00 	cmp.w	lr, #0
 80a44ea:	d00b      	beq.n	80a4504 <__udivmoddi4+0x38>
 80a44ec:	f1ce 0520 	rsb	r5, lr, #32
 80a44f0:	fa20 f505 	lsr.w	r5, r0, r5
 80a44f4:	fa01 f30e 	lsl.w	r3, r1, lr
 80a44f8:	ea45 0c03 	orr.w	ip, r5, r3
 80a44fc:	fa02 f70e 	lsl.w	r7, r2, lr
 80a4500:	fa00 f50e 	lsl.w	r5, r0, lr
 80a4504:	0c39      	lsrs	r1, r7, #16
 80a4506:	fbbc f0f1 	udiv	r0, ip, r1
 80a450a:	b2ba      	uxth	r2, r7
 80a450c:	fb01 c310 	mls	r3, r1, r0, ip
 80a4510:	fb00 f802 	mul.w	r8, r0, r2
 80a4514:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a4518:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a451c:	45a0      	cmp	r8, r4
 80a451e:	d909      	bls.n	80a4534 <__udivmoddi4+0x68>
 80a4520:	19e4      	adds	r4, r4, r7
 80a4522:	f100 33ff 	add.w	r3, r0, #4294967295
 80a4526:	f080 8128 	bcs.w	80a477a <__udivmoddi4+0x2ae>
 80a452a:	45a0      	cmp	r8, r4
 80a452c:	f240 8125 	bls.w	80a477a <__udivmoddi4+0x2ae>
 80a4530:	3802      	subs	r0, #2
 80a4532:	443c      	add	r4, r7
 80a4534:	ebc8 0404 	rsb	r4, r8, r4
 80a4538:	fbb4 f3f1 	udiv	r3, r4, r1
 80a453c:	fb01 4c13 	mls	ip, r1, r3, r4
 80a4540:	fb03 f202 	mul.w	r2, r3, r2
 80a4544:	b2ac      	uxth	r4, r5
 80a4546:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a454a:	428a      	cmp	r2, r1
 80a454c:	d909      	bls.n	80a4562 <__udivmoddi4+0x96>
 80a454e:	19c9      	adds	r1, r1, r7
 80a4550:	f103 34ff 	add.w	r4, r3, #4294967295
 80a4554:	f080 810f 	bcs.w	80a4776 <__udivmoddi4+0x2aa>
 80a4558:	428a      	cmp	r2, r1
 80a455a:	f240 810c 	bls.w	80a4776 <__udivmoddi4+0x2aa>
 80a455e:	3b02      	subs	r3, #2
 80a4560:	4439      	add	r1, r7
 80a4562:	1a8a      	subs	r2, r1, r2
 80a4564:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a4568:	2100      	movs	r1, #0
 80a456a:	2e00      	cmp	r6, #0
 80a456c:	d063      	beq.n	80a4636 <__udivmoddi4+0x16a>
 80a456e:	fa22 f20e 	lsr.w	r2, r2, lr
 80a4572:	2300      	movs	r3, #0
 80a4574:	e886 000c 	stmia.w	r6, {r2, r3}
 80a4578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a457c:	428b      	cmp	r3, r1
 80a457e:	d907      	bls.n	80a4590 <__udivmoddi4+0xc4>
 80a4580:	2e00      	cmp	r6, #0
 80a4582:	d056      	beq.n	80a4632 <__udivmoddi4+0x166>
 80a4584:	2100      	movs	r1, #0
 80a4586:	e886 0011 	stmia.w	r6, {r0, r4}
 80a458a:	4608      	mov	r0, r1
 80a458c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4590:	fab3 f183 	clz	r1, r3
 80a4594:	2900      	cmp	r1, #0
 80a4596:	f040 8093 	bne.w	80a46c0 <__udivmoddi4+0x1f4>
 80a459a:	42a3      	cmp	r3, r4
 80a459c:	d302      	bcc.n	80a45a4 <__udivmoddi4+0xd8>
 80a459e:	4282      	cmp	r2, r0
 80a45a0:	f200 80fe 	bhi.w	80a47a0 <__udivmoddi4+0x2d4>
 80a45a4:	1a85      	subs	r5, r0, r2
 80a45a6:	eb64 0303 	sbc.w	r3, r4, r3
 80a45aa:	469c      	mov	ip, r3
 80a45ac:	2001      	movs	r0, #1
 80a45ae:	2e00      	cmp	r6, #0
 80a45b0:	d041      	beq.n	80a4636 <__udivmoddi4+0x16a>
 80a45b2:	e886 1020 	stmia.w	r6, {r5, ip}
 80a45b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a45ba:	b912      	cbnz	r2, 80a45c2 <__udivmoddi4+0xf6>
 80a45bc:	2701      	movs	r7, #1
 80a45be:	fbb7 f7f2 	udiv	r7, r7, r2
 80a45c2:	fab7 fe87 	clz	lr, r7
 80a45c6:	f1be 0f00 	cmp.w	lr, #0
 80a45ca:	d136      	bne.n	80a463a <__udivmoddi4+0x16e>
 80a45cc:	1be4      	subs	r4, r4, r7
 80a45ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a45d2:	fa1f f987 	uxth.w	r9, r7
 80a45d6:	2101      	movs	r1, #1
 80a45d8:	fbb4 f3f8 	udiv	r3, r4, r8
 80a45dc:	fb08 4413 	mls	r4, r8, r3, r4
 80a45e0:	fb09 f203 	mul.w	r2, r9, r3
 80a45e4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a45e8:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a45ec:	42a2      	cmp	r2, r4
 80a45ee:	d907      	bls.n	80a4600 <__udivmoddi4+0x134>
 80a45f0:	19e4      	adds	r4, r4, r7
 80a45f2:	f103 30ff 	add.w	r0, r3, #4294967295
 80a45f6:	d202      	bcs.n	80a45fe <__udivmoddi4+0x132>
 80a45f8:	42a2      	cmp	r2, r4
 80a45fa:	f200 80d3 	bhi.w	80a47a4 <__udivmoddi4+0x2d8>
 80a45fe:	4603      	mov	r3, r0
 80a4600:	1aa4      	subs	r4, r4, r2
 80a4602:	fbb4 f0f8 	udiv	r0, r4, r8
 80a4606:	fb08 4810 	mls	r8, r8, r0, r4
 80a460a:	fb09 f900 	mul.w	r9, r9, r0
 80a460e:	b2ac      	uxth	r4, r5
 80a4610:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a4614:	4591      	cmp	r9, r2
 80a4616:	d907      	bls.n	80a4628 <__udivmoddi4+0x15c>
 80a4618:	19d2      	adds	r2, r2, r7
 80a461a:	f100 34ff 	add.w	r4, r0, #4294967295
 80a461e:	d202      	bcs.n	80a4626 <__udivmoddi4+0x15a>
 80a4620:	4591      	cmp	r9, r2
 80a4622:	f200 80ba 	bhi.w	80a479a <__udivmoddi4+0x2ce>
 80a4626:	4620      	mov	r0, r4
 80a4628:	ebc9 0202 	rsb	r2, r9, r2
 80a462c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a4630:	e79b      	b.n	80a456a <__udivmoddi4+0x9e>
 80a4632:	4631      	mov	r1, r6
 80a4634:	4630      	mov	r0, r6
 80a4636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a463a:	fa07 f70e 	lsl.w	r7, r7, lr
 80a463e:	f1ce 0c20 	rsb	ip, lr, #32
 80a4642:	fa24 f30c 	lsr.w	r3, r4, ip
 80a4646:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a464a:	fbb3 faf8 	udiv	sl, r3, r8
 80a464e:	fa1f f987 	uxth.w	r9, r7
 80a4652:	fb08 351a 	mls	r5, r8, sl, r3
 80a4656:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a465a:	fa04 f40e 	lsl.w	r4, r4, lr
 80a465e:	fb0a fb09 	mul.w	fp, sl, r9
 80a4662:	ea4c 0c04 	orr.w	ip, ip, r4
 80a4666:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a466a:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a466e:	459b      	cmp	fp, r3
 80a4670:	fa00 f50e 	lsl.w	r5, r0, lr
 80a4674:	d90a      	bls.n	80a468c <__udivmoddi4+0x1c0>
 80a4676:	19db      	adds	r3, r3, r7
 80a4678:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a467c:	f080 808b 	bcs.w	80a4796 <__udivmoddi4+0x2ca>
 80a4680:	459b      	cmp	fp, r3
 80a4682:	f240 8088 	bls.w	80a4796 <__udivmoddi4+0x2ca>
 80a4686:	f1aa 0a02 	sub.w	sl, sl, #2
 80a468a:	443b      	add	r3, r7
 80a468c:	ebcb 0303 	rsb	r3, fp, r3
 80a4690:	fbb3 f0f8 	udiv	r0, r3, r8
 80a4694:	fb08 3310 	mls	r3, r8, r0, r3
 80a4698:	fb00 f409 	mul.w	r4, r0, r9
 80a469c:	fa1f fc8c 	uxth.w	ip, ip
 80a46a0:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a46a4:	429c      	cmp	r4, r3
 80a46a6:	d907      	bls.n	80a46b8 <__udivmoddi4+0x1ec>
 80a46a8:	19db      	adds	r3, r3, r7
 80a46aa:	f100 32ff 	add.w	r2, r0, #4294967295
 80a46ae:	d26e      	bcs.n	80a478e <__udivmoddi4+0x2c2>
 80a46b0:	429c      	cmp	r4, r3
 80a46b2:	d96c      	bls.n	80a478e <__udivmoddi4+0x2c2>
 80a46b4:	3802      	subs	r0, #2
 80a46b6:	443b      	add	r3, r7
 80a46b8:	1b1c      	subs	r4, r3, r4
 80a46ba:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a46be:	e78b      	b.n	80a45d8 <__udivmoddi4+0x10c>
 80a46c0:	f1c1 0e20 	rsb	lr, r1, #32
 80a46c4:	408b      	lsls	r3, r1
 80a46c6:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a46ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80a46ce:	fa24 f70e 	lsr.w	r7, r4, lr
 80a46d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a46d6:	fbb7 faf9 	udiv	sl, r7, r9
 80a46da:	fa1f f38c 	uxth.w	r3, ip
 80a46de:	fb09 771a 	mls	r7, r9, sl, r7
 80a46e2:	fa20 f80e 	lsr.w	r8, r0, lr
 80a46e6:	408c      	lsls	r4, r1
 80a46e8:	fb0a f503 	mul.w	r5, sl, r3
 80a46ec:	ea48 0404 	orr.w	r4, r8, r4
 80a46f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a46f4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a46f8:	42bd      	cmp	r5, r7
 80a46fa:	fa02 f201 	lsl.w	r2, r2, r1
 80a46fe:	fa00 fb01 	lsl.w	fp, r0, r1
 80a4702:	d909      	bls.n	80a4718 <__udivmoddi4+0x24c>
 80a4704:	eb17 070c 	adds.w	r7, r7, ip
 80a4708:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a470c:	d241      	bcs.n	80a4792 <__udivmoddi4+0x2c6>
 80a470e:	42bd      	cmp	r5, r7
 80a4710:	d93f      	bls.n	80a4792 <__udivmoddi4+0x2c6>
 80a4712:	f1aa 0a02 	sub.w	sl, sl, #2
 80a4716:	4467      	add	r7, ip
 80a4718:	1b7f      	subs	r7, r7, r5
 80a471a:	fbb7 f5f9 	udiv	r5, r7, r9
 80a471e:	fb09 7715 	mls	r7, r9, r5, r7
 80a4722:	fb05 f303 	mul.w	r3, r5, r3
 80a4726:	b2a4      	uxth	r4, r4
 80a4728:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a472c:	42bb      	cmp	r3, r7
 80a472e:	d908      	bls.n	80a4742 <__udivmoddi4+0x276>
 80a4730:	eb17 070c 	adds.w	r7, r7, ip
 80a4734:	f105 30ff 	add.w	r0, r5, #4294967295
 80a4738:	d227      	bcs.n	80a478a <__udivmoddi4+0x2be>
 80a473a:	42bb      	cmp	r3, r7
 80a473c:	d925      	bls.n	80a478a <__udivmoddi4+0x2be>
 80a473e:	3d02      	subs	r5, #2
 80a4740:	4467      	add	r7, ip
 80a4742:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a4746:	fba0 8902 	umull	r8, r9, r0, r2
 80a474a:	1aff      	subs	r7, r7, r3
 80a474c:	454f      	cmp	r7, r9
 80a474e:	4645      	mov	r5, r8
 80a4750:	464c      	mov	r4, r9
 80a4752:	d314      	bcc.n	80a477e <__udivmoddi4+0x2b2>
 80a4754:	d029      	beq.n	80a47aa <__udivmoddi4+0x2de>
 80a4756:	b366      	cbz	r6, 80a47b2 <__udivmoddi4+0x2e6>
 80a4758:	ebbb 0305 	subs.w	r3, fp, r5
 80a475c:	eb67 0704 	sbc.w	r7, r7, r4
 80a4760:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a4764:	40cb      	lsrs	r3, r1
 80a4766:	40cf      	lsrs	r7, r1
 80a4768:	ea4e 0303 	orr.w	r3, lr, r3
 80a476c:	e886 0088 	stmia.w	r6, {r3, r7}
 80a4770:	2100      	movs	r1, #0
 80a4772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4776:	4623      	mov	r3, r4
 80a4778:	e6f3      	b.n	80a4562 <__udivmoddi4+0x96>
 80a477a:	4618      	mov	r0, r3
 80a477c:	e6da      	b.n	80a4534 <__udivmoddi4+0x68>
 80a477e:	ebb8 0502 	subs.w	r5, r8, r2
 80a4782:	eb69 040c 	sbc.w	r4, r9, ip
 80a4786:	3801      	subs	r0, #1
 80a4788:	e7e5      	b.n	80a4756 <__udivmoddi4+0x28a>
 80a478a:	4605      	mov	r5, r0
 80a478c:	e7d9      	b.n	80a4742 <__udivmoddi4+0x276>
 80a478e:	4610      	mov	r0, r2
 80a4790:	e792      	b.n	80a46b8 <__udivmoddi4+0x1ec>
 80a4792:	4682      	mov	sl, r0
 80a4794:	e7c0      	b.n	80a4718 <__udivmoddi4+0x24c>
 80a4796:	4692      	mov	sl, r2
 80a4798:	e778      	b.n	80a468c <__udivmoddi4+0x1c0>
 80a479a:	3802      	subs	r0, #2
 80a479c:	443a      	add	r2, r7
 80a479e:	e743      	b.n	80a4628 <__udivmoddi4+0x15c>
 80a47a0:	4608      	mov	r0, r1
 80a47a2:	e704      	b.n	80a45ae <__udivmoddi4+0xe2>
 80a47a4:	3b02      	subs	r3, #2
 80a47a6:	443c      	add	r4, r7
 80a47a8:	e72a      	b.n	80a4600 <__udivmoddi4+0x134>
 80a47aa:	45c3      	cmp	fp, r8
 80a47ac:	d3e7      	bcc.n	80a477e <__udivmoddi4+0x2b2>
 80a47ae:	463c      	mov	r4, r7
 80a47b0:	e7d1      	b.n	80a4756 <__udivmoddi4+0x28a>
 80a47b2:	4631      	mov	r1, r6
 80a47b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a47b8 <__aeabi_idiv0>:
 80a47b8:	4770      	bx	lr
 80a47ba:	bf00      	nop

080a47bc <__cxa_atexit>:
 80a47bc:	b510      	push	{r4, lr}
 80a47be:	4c05      	ldr	r4, [pc, #20]	; (80a47d4 <__cxa_atexit+0x18>)
 80a47c0:	4613      	mov	r3, r2
 80a47c2:	b12c      	cbz	r4, 80a47d0 <__cxa_atexit+0x14>
 80a47c4:	460a      	mov	r2, r1
 80a47c6:	4601      	mov	r1, r0
 80a47c8:	2002      	movs	r0, #2
 80a47ca:	f3af 8000 	nop.w
 80a47ce:	bd10      	pop	{r4, pc}
 80a47d0:	4620      	mov	r0, r4
 80a47d2:	bd10      	pop	{r4, pc}
 80a47d4:	00000000 	.word	0x00000000

080a47d8 <memcpy>:
 80a47d8:	b510      	push	{r4, lr}
 80a47da:	1e43      	subs	r3, r0, #1
 80a47dc:	440a      	add	r2, r1
 80a47de:	4291      	cmp	r1, r2
 80a47e0:	d004      	beq.n	80a47ec <memcpy+0x14>
 80a47e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a47e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a47ea:	e7f8      	b.n	80a47de <memcpy+0x6>
 80a47ec:	bd10      	pop	{r4, pc}

080a47ee <memset>:
 80a47ee:	4603      	mov	r3, r0
 80a47f0:	4402      	add	r2, r0
 80a47f2:	4293      	cmp	r3, r2
 80a47f4:	d002      	beq.n	80a47fc <memset+0xe>
 80a47f6:	f803 1b01 	strb.w	r1, [r3], #1
 80a47fa:	e7fa      	b.n	80a47f2 <memset+0x4>
 80a47fc:	4770      	bx	lr
	...

080a4800 <srand>:
 80a4800:	b538      	push	{r3, r4, r5, lr}
 80a4802:	4b12      	ldr	r3, [pc, #72]	; (80a484c <srand+0x4c>)
 80a4804:	4605      	mov	r5, r0
 80a4806:	681c      	ldr	r4, [r3, #0]
 80a4808:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a480a:	b9d3      	cbnz	r3, 80a4842 <srand+0x42>
 80a480c:	2018      	movs	r0, #24
 80a480e:	f7fd fbdb 	bl	80a1fc8 <malloc>
 80a4812:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4816:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4818:	8003      	strh	r3, [r0, #0]
 80a481a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a481e:	8043      	strh	r3, [r0, #2]
 80a4820:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4824:	8083      	strh	r3, [r0, #4]
 80a4826:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a482a:	80c3      	strh	r3, [r0, #6]
 80a482c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4830:	8103      	strh	r3, [r0, #8]
 80a4832:	2305      	movs	r3, #5
 80a4834:	8143      	strh	r3, [r0, #10]
 80a4836:	230b      	movs	r3, #11
 80a4838:	8183      	strh	r3, [r0, #12]
 80a483a:	2201      	movs	r2, #1
 80a483c:	2300      	movs	r3, #0
 80a483e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a4842:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4844:	2200      	movs	r2, #0
 80a4846:	611d      	str	r5, [r3, #16]
 80a4848:	615a      	str	r2, [r3, #20]
 80a484a:	bd38      	pop	{r3, r4, r5, pc}
 80a484c:	20000488 	.word	0x20000488

080a4850 <strlen>:
 80a4850:	4603      	mov	r3, r0
 80a4852:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4856:	2a00      	cmp	r2, #0
 80a4858:	d1fb      	bne.n	80a4852 <strlen+0x2>
 80a485a:	1a18      	subs	r0, r3, r0
 80a485c:	3801      	subs	r0, #1
 80a485e:	4770      	bx	lr

080a4860 <dynalib_user>:
 80a4860:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a4870:	0000 0000 4d42 3245 3038 6e20 746f 6920     ....BME280 not i
 80a4880:	696e 6974 6c61 7a69 6465 7700 6165 6874     nitialized.weath
 80a4890:	7265 6c63 6569 746e 4800 6c65 6f6c 6620     erclient.Hello f
 80a48a0:	6f72 206d 6573 736e 726f 7700 6165 6874     rom sensor.weath
 80a48b0:	7265 2500 322e 0066 6577 7461 6568 2f72     er.%.2f.weather/
 80a48c0:	6554 706d 7265 7461 7275 7700 6165 6874     Temperatur.weath
 80a48d0:	7265 542f 7972 006b 6577 7461 6568 2f72     er/Tryk.weather/
 80a48e0:	7546 7467 6769 6568 0064 6554 706d 203a     Fugtighed.Temp: 
 80a48f0:	4800 6d75 3a69 0020 7250 7365 3a73 0020     .Humi: .Press: .

080a4900 <_ZTV16Adafruit_SSD1306>:
	...
 80a4908:	0319 080a 031b 080a 0a09 080a 2757 080a     ............W'..
 80a4918:	0641 080a 0705 080a 04c9 080a 0355 080a     A...........U...
 80a4928:	07c5 080a 085b 080a 0893 080a 08af 080a     ....[...........

080a4938 <_ZTV12Adafruit_GFX>:
	...
 80a4948:	0a09 080a 2757 080a 00ad 080a 0705 080a     ....W'..........
 80a4958:	0825 080a 0841 080a 07c5 080a 085b 080a     %...A.......[...
 80a4968:	0893 080a 08af 080a                         ........

080a4970 <_ZL4font>:
 80a4970:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 80a4980:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 80a4990:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 80a49a0:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 80a49b0:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 80a49c0:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 80a49d0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 80a49e0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 80a49f0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 80a4a00:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 80a4a10:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 80a4a20:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 80a4a30:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 80a4a40:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 80a4a50:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 80a4a60:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 80a4a70:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 80a4a80:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 80a4a90:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 80a4aa0:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 80a4ab0:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 80a4ac0:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 80a4ad0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 80a4ae0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 80a4af0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 80a4b00:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 80a4b10:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 80a4b20:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 80a4b30:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 80a4b40:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 80a4b50:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 80a4b60:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 80a4b70:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 80a4b80:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 80a4b90:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 80a4ba0:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 80a4bb0:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 80a4bc0:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 80a4bd0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 80a4be0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 80a4bf0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 80a4c00:	5555 4179 5421 7854 2141 5455 4078 5420     UUyA!TTxA!UTx@ T
 80a4c10:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 80a4c20:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 80a4c30:	0042 4501 407c 29f0 2924 f0f0 2528 f028     B..E|@.)$)..(%(.
 80a4c40:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 80a4c50:	4949 3249 4832 4848 3232 484a 3048 413a     III22HHH22JHH0:A
 80a4c60:	2141 3a7a 4042 7820 9d00 a0a0 397d 4444     A!z:B@ x....}9DD
 80a4c70:	3944 403d 4040 3c3d ff24 2424 7e48 4349     D9=@@@=<$.$$H~IC
 80a4c80:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 80a4c90:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 80a4ca0:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 80a4cb0:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 80a4cc0:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 80a4cd0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 80a4ce0:	00aa 0055 aaaa aa55 aa55 0000 ff00 1000     ..U...U.U.......
 80a4cf0:	1010 00ff 1414 ff14 1000 ff10 ff00 1010     ................
 80a4d00:	10f0 14f0 1414 00fc 1414 00f7 00ff ff00     ................
 80a4d10:	ff00 1414 04f4 14fc 1714 1f10 1010 101f     ................
 80a4d20:	141f 1414 001f 1010 f010 0000 0000 101f     ................
 80a4d30:	1010 1f10 1010 1010 10f0 0000 ff00 1010     ................
 80a4d40:	1010 1010 1010 ff10 0010 0000 14ff 0000     ................
 80a4d50:	00ff 00ff 1f00 1710 0000 04fc 14f4 1714     ................
 80a4d60:	1710 1414 04f4 00f4 ff00 f700 1414 1414     ................
 80a4d70:	1414 f714 f700 1414 1714 1014 1f10 1f10     ................
 80a4d80:	1414 f414 1014 f010 f010 0000 101f 001f     ................
 80a4d90:	0000 141f 0000 fc00 0014 f000 f010 1010     ................
 80a4da0:	10ff 14ff 1414 14ff 1010 1f10 0000 0000     ................
 80a4db0:	10f0 ffff ffff f0ff f0f0 f0f0 ffff 00ff     ................
 80a4dc0:	0000 0000 ffff 0f0f 0f0f 380f 4444 4438     ...........8DD8D
 80a4dd0:	2a7c 3e2a 7e14 0202 0606 7e02 7e02 6302     |**>.~.....~.~.c
 80a4de0:	4955 6341 4438 3c44 4004 207e 201e 0206     UIAc8DD<.@~ . ..
 80a4df0:	027e 9902 e7a5 99a5 2a1c 2a49 4c1c 0172     ~........*I*.Lr.
 80a4e00:	4c72 4a30 4d4d 3030 7848 3048 62bc 465a     rL0JMM00HxH0.bZF
 80a4e10:	3e3d 4949 0049 017e 0101 2a7e 2a2a 2a2a     =>III.~...~*****
 80a4e20:	4444 445f 4044 4a51 4044 4440 514a 0040     DD_DD@QJD@@DJQ@.
 80a4e30:	ff00 0301 80e0 00ff 0800 6b08 086b 1236     ...........kk.6.
 80a4e40:	2436 0636 090f 060f 0000 1818 0000 1000     6$6.............
 80a4e50:	0010 4030 01ff 0001 011f 1e01 1900 171d     ..0@............
 80a4e60:	0012 3c3c 3c3c 0000 0000 0000 4d04 5451     ..<<<<.......MQT
 80a4e70:	0454 0600 514d 7349 7064 0003               T...MQIsdp..

080a4e7c <_ZTVN8particle13__SPISettingsE>:
	...
 80a4e84:	1275 080a 6564 6166 6c75 2074 4d00 4253     u...default .MSB
 80a4e94:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
 80a4ea4:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
 80a4eb4:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
 80a4ec4:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

080a4ed0 <_ZTV8SPIClass>:
	...
 80a4ed8:	2019 080a 201b 080a                         . ... ..

080a4ee0 <_ZL14clock_divisors>:
 80a4ee0:	0800 1810 2820 3830                         .... (08

080a4ee8 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a4ef0:	21dd 080a 21e3 080a 25fb 080a 21f1 080a     .!...!...%...!..
 80a4f00:	21df 080a                                   .!..

080a4f04 <_ZTV9TCPClient>:
	...
 80a4f0c:	0a89 080a 0abd 080a 2199 080a 21b3 080a     .........!...!..
 80a4f1c:	22f9 080a 2263 080a 2235 080a 21db 080a     ."..c"..5"...!..
 80a4f2c:	23a5 080a 2615 080a 2297 080a 2371 080a     .#...&..."..q#..
 80a4f3c:	24f3 080a 2545 080a 21c3 080a 24b7 080a     .$..E%...!...$..
 80a4f4c:	2215 080a 6977 6972 676e 5400 5043 6c43     ."..wiring.TCPCl
 80a4f5c:	6569 746e 7320 636f 656b 3d74 7825 6e00     ient socket=%x.n
 80a4f6c:	6e61 6f00 6676 2e00 6900 666e 6200 7561     an.ovf...inf.bau
 80a4f7c:	0064 6553 6972 6c61 5500 4253 6553 6972     d.Serial.USBSeri
 80a4f8c:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
 80a4f9c:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
 80a4fac:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
 80a4fbc:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
 80a4fcc:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
 80a4fdc:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
 80a4fec:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
 80a4ffc:	2500 0064 202c 2800 3a29 0020 5b20 6300     .%d., .(): . [.c
 80a500c:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
 80a501c:	2073 203d 0d00 000a 6e6c 6600 006e 6f63     s = ....ln.fn.co
 80a502c:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
 80a503c:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
 80a504c:	7272 726f 7000 6e61 6369 6100 6c6c 5a00     rror.panic.all.Z
 80a505c:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
 80a506c:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a507c:	7361 7463 6d69 0065                         asctime.

080a5084 <_ZTV9IPAddress>:
	...
 80a508c:	2c09 080a 2bf9 080a 2bfb 080a               .,...+...+..

080a5098 <_ZTV9USBSerial>:
	...
 80a50a0:	2cf1 080a 2d41 080a 2d4f 080a 2757 080a     .,..A-..O-..W'..
 80a50b0:	2d2d 080a 2cf3 080a 2d09 080a 2d3b 080a     --...,...-..;-..
 80a50c0:	2d1f 080a 2ced 080a                         .-...,..

080a50c8 <_ZTV11USARTSerial>:
	...
 80a50d0:	2e9d 080a 2eed 080a 2efb 080a 2757 080a     ............W'..
 80a50e0:	2eb1 080a 2ed3 080a 2ebf 080a 2ee7 080a     ................
 80a50f0:	2e9f 080a 2ea3 080a                         ........

080a50f8 <_ZTV7TwoWire>:
	...
 80a5100:	2fa1 080a 2feb 080a 2fc3 080a 2fa3 080a     ./.../.../.../..
 80a5110:	2fcb 080a 2fd3 080a 2fdb 080a 2fe3 080a     ./.../.../.../..

080a5120 <_ZTVN5spark9WiFiClassE>:
	...
 80a5128:	30f5 080a 30eb 080a 30e1 080a 305f 080a     .0...0...0.._0..
 80a5138:	2a51 080a 30d5 080a 30c9 080a 30c1 080a     Q*...0...0...0..
 80a5148:	30b7 080a 30ad 080a 3069 080a               .0...0..i0..

080a5154 <_ZTVN5spark12NetworkClassE>:
	...
 80a515c:	3115 080a 311f 080a 3129 080a 3133 080a     .1...1..)1..31..
 80a516c:	313d 080a 3149 080a 3155 080a 3161 080a     =1..I1..U1..a1..
 80a517c:	3169 080a 3173 080a 317d 080a               i1..s1..}1..

080a5188 <__sf_fake_stdin>:
	...

080a51a8 <__sf_fake_stdout>:
	...

080a51c8 <__sf_fake_stderr>:
	...
 80a51e8:	0043                                        C.

080a51ea <link_const_variable_data_end>:
	...

080a51ec <link_constructors_location>:
 80a51ec:	080a028d 	.word	0x080a028d
 80a51f0:	080a0305 	.word	0x080a0305
 80a51f4:	080a0329 	.word	0x080a0329
 80a51f8:	080a0701 	.word	0x080a0701
 80a51fc:	080a0a83 	.word	0x080a0a83
 80a5200:	080a126f 	.word	0x080a126f
 80a5204:	080a1b49 	.word	0x080a1b49
 80a5208:	080a2181 	.word	0x080a2181
 80a520c:	080a2a5d 	.word	0x080a2a5d
 80a5210:	080a2a6d 	.word	0x080a2a6d
 80a5214:	080a2aa5 	.word	0x080a2aa5
 80a5218:	080a3101 	.word	0x080a3101
 80a521c:	080a31e5 	.word	0x080a31e5
 80a5220:	080a32bd 	.word	0x080a32bd
 80a5224:	080a3301 	.word	0x080a3301
 80a5228:	080a3381 	.word	0x080a3381
 80a522c:	080a3405 	.word	0x080a3405
 80a5230:	080a34c9 	.word	0x080a34c9
 80a5234:	080a358d 	.word	0x080a358d

080a5238 <link_constructors_end>:
	...
